<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[工厂设计模式]]></title>
    <url>%2F2019%2F08%2F15%2F%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[聊聊工厂模式相关的设计《设计模式》《代码大全》都要提及抽象工厂模式、工厂方法模式，都需要创建型模式，属于常见的 23 中设计模式中，工作中设计到工厂相关的模式还有另外两种，简单工厂，静态工厂方法，他们之间的区别是什么呢？ 工厂方法模式维基百科的描述：“ 定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类。工厂方法让类的实例化推迟到子类中进行。” 通俗点：定义一个接口用于创建对象，但是让子类决定初始化哪个类。工厂方法把一个类的初始化下放到子类。小米电视工厂，TCL电视工厂。强调的 产品等级，小米电视、TCL电视，都属于不同的电视平台，属于同一产品等级 使用场景 创建对象需要大量重复的代码 客户端(应用层)不依赖于产品类实例如何被创建、实现等细节 一个类通过其子类来指定创建那个对象 优点 用户只需要关心所需产品对应的工厂，无须关心创建细节 加入新产品符合开闭原则，提高可扩展性 缺点 类的个数容易过多，增加复杂度 增加了系统的抽象性和理解难度 Java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public static void main(String[] args) &#123; TVFactory tvFactory; TV tv; tvFactory = new MiTVFactory(); tv = tvFactory.getTV(); System.out.println(tv.toString()); tvFactory = new TCLTVFactory(); tv = tvFactory.getTV(); System.out.println(tv);&#125;// 产品public interface TV &#123;&#125;public class MiTV implements TV &#123; @Override public String toString() &#123; return "欢迎使用小米电视..."; &#125;&#125;public class TCLTV implements TV &#123; @Override public String toString() &#123; return "欢迎使用TCL电视..."; &#125;&#125;// 工厂public interface TVFactory &#123; TV getTV();&#125;public class MiTVFactory implements TVFactory &#123; @Override public TV getTV() &#123; return new MiTV(); &#125;&#125;public class TCLTVFactory implements TVFactory &#123; @Override public TV getTV() &#123; return new TCLTV(); &#125;&#125; UML 抽象工厂模式维基百科的描述：“ 提供接口，创建一系列相关或独立的对象，而不指定这些对象的具体类。” 通俗点：为一个产品族提供了统一的创建接口。当需要这个产品族的某一系列的时候，可以从抽象工厂中选出相应的系列创建一个具体的工厂类。强调的是创建产品族 、一些列相关或独立的对象，小米电视、小米电饭煲、小米手表等相关的小米智能家居产品都应当属于一个产品族。 使用场景 一个系统要独立于它的产品的创建、组合和表示时。 一个系统要由多个产品系列中的一个来配置时。 需要强调一系列相关的产品对象的设计以便进行联合使用时。 提供一个产品类库，而只想显示它们的接口而不是实现时。 优点 具体产品从客户代码中被分离出来 容易改变产品的系列 将一个系列的产品族统一到一起创建 缺点 在产品族中扩展新的产品是很困难的，它需要修改抽象工厂的接口 Java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374public static void main(String[] args) &#123; SmartHomeFactory smartHomeFactory; TV tv; ElectricCooker electricCooker; smartHomeFactory = new MiSmartHomeFactory(); // smartHomeFactory = new TCLSmartHomeFactory(); tv = smartHomeFactory.getTV(); electricCooker = smartHomeFactory.getElectricCooker(); System.out.println(tv.toString()); System.out.println(electricCooker.toString());&#125;// 工厂public interface SmartHomeFactory &#123; TV getTV(); ElectricCooker getElectricCooker();&#125;public class MiSmartHomeFactory implements SmartHomeFactory &#123; @Override public TV getTV() &#123; return new MiTV(); &#125; @Override public ElectricCooker getElectricCooker() &#123; return new MiElectricCooker(); &#125;&#125;public class TCLSmartHomeFactory implements SmartHomeFactory &#123; @Override public TV getTV() &#123; return new TCLTV(); &#125; @Override public ElectricCooker getElectricCooker() &#123; return new TCLElectricCooker(); &#125;&#125;// 产品public interface TV &#123;&#125;public class MiTV implements TV &#123; @Override public String toString() &#123; return "欢迎使用小米电视..."; &#125;&#125;public interface ElectricCooker &#123;&#125;public class MiElectricCooker implements ElectricCooker &#123; @Override public String toString() &#123; return "欢迎使用小米电饭煲..."; &#125;&#125; UML 简单工厂维基百科的描述：“ 普通的工厂方法模式通常伴随着对象的具体类型与工厂具体类型的一一对应，客户端代码根据需要选择合适的具体类型工厂使用。然而，这种选择可能包含复杂的逻辑。这时，可以创建一个单一的工厂类，用以包含这种选择逻辑，根据参数的不同选择实现不同的具体对象。这个工厂类不需要由每个具体产品实现一个自己的具体的工厂类，所以可以将工厂方法设置为静态方法。 ” 通俗点：不需要通过具体的工厂类型来创建对应的对象，而是通过静态方法、参数的形式来选择性的创建指定对象，在一些场景下，方便理解，更高效，简单工厂模式由于使用了静态工厂方法，也可以代替构造器来创建对象。 使用场景 工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了专门的工厂类用于创建对象。 客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。 优点 工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了专门的工厂类用于创建对象。 客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。 通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。 缺点 由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。 使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。 系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。 简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。 Java123456789101112131415161718192021222324252627282930public static void main(String[] args) throws InstantiationException, IllegalAccessException &#123; TV tv = TVSimpleFactory.getInstance("mi"); System.out.println(tv); TV tv1 = TVSimpleFactory.getInstance(MiTV.class); TV tv2 = TVSimpleFactory.getInstance(TCLTV.class); System.out.println(tv1); System.out.println(tv2);&#125;public class TVSimpleFactory &#123; public static TV getInstance(String name) &#123; if ("mi".equals(name)) &#123; return new MiTV(); &#125; else if ("tcl".equals(name)) &#123; return new TCLTV(); &#125; return null; &#125; public static TV getInstance(Class clazz) throws IllegalAccessException, InstantiationException &#123; TV tv = (TV) clazz.newInstance(); return tv; &#125;&#125; UML 静态工厂方法很多人分不清楚静态工厂方法和简单工厂的区别，简单工厂一种模式，简单工厂模式使用了静态工厂方法，静态工厂方法更小的概念，一般用来创建和销毁对象，静态工厂用的比较多的场景是取代构造器的方法来构建对象。 使用场景对于类而言，为了让客户端获取它自身的一个实例，最传统的方法就是提供一个公有的构造器。还有一种方法，也应该在每个程序员的工具箱中占有一席之地。类可以提供一个公有的静态工厂方法（ static factory method ），它只是一个返回类的实例的静态方法。下面是一个来自Bolean （基本类型boolean 的装箱类）的简单示例。这个方法将boolean 基本类型值转换成了一个Boolean 对象引用： 优势 静态工厂方法与构造器不同的第一大优势在于，它们有名称。如果构造器的参数本身没有确切地描述正被返回的对象，那么具有适当名称的静态工厂会更容易使用，产生的客户端代码也更易于阅读。例如，构造器BigInteger (int , int, Random ）返回的 Biginteger 可能为素数，如果用名为BigInteger.probablePrime 的静态工厂方法来表示，显然更为清楚。(Java 4 版本中增加了这个方法。） 一个类只能有一个带有指定签名的构造器。编程人员通常知道如何避开这一限制： 通过提供两个构造器，它们的参数列表只在参数类型的顺序上有所不同。实际上这并不是个好主意。面对这样的AP I ， 用户永远也记不住该用哪个构造器， 结果常常会调用错误的构造器。并且在读到使用了这些构造器的代码时，如果没有参考类的文档，往往不知所云。 由于静态工厂方法有名称，所以它们不受上述限制。当一个类需要多个带有相同签名的构造器时，就用静态工厂方法代替构造器，并且仔细地选择名称以便突出静态工厂方法之间的区别。 静态工厂方法与构造器不同的第二大优势在于，不必在每次调用它们的时候都创建一个新对象。这使得不可变类（详见第17 条）可以使用预先构建好的实例，或者将构建好的实例缓存起来， 进行重复利用，从而避免创建不必要的重复对象。Boolean.valueOf (b oolean ）方法说明了这项技术： 它从来不创建对象。这种方法类似于享元(Flyweight ）模式［ Gamma95 ］ 。如果程序经常请求创建相同的对象，并且创建对象的代价很高，则这项技术可以极大地提升性能。 静态工厂方法能够为重复的调用返回相同对象，这样有助于类总能严格控制在某个时刻哪些实例应该存在。这种类被称作实例受控的类（ instance-controlled ） 。编写实例受控的类有几个原因。实例受控使得类可以确保它是一个Singleton （详见第3 条）或者是不可实例化的（详见第4 条） 。它还使得不可变的值类（详见第17 条）可以确保不会存在两个相等的实例， 即当且仅当a==b 时， a . equals(b ）才为true 。这是享元模式［ Gamma95 ］ 的基础。枚举（巳num ）类型（详见第34 条）保证了这一点。 静态工厂方法与构造器不同的第三大优势在子，它们可以返回原返回类型的任何子类型的对象。这样我们在选择返回对象的类时就有了更大的灵活性。这种灵活性的一种应用是， API 可以返回对象，同时又不会使对象的类变成公有的。以这种方式隐藏实现类会使API 变得非常简洁。这项技术适用于基于接口的框架（ interface based framework ) （详见第20 条），因为在这种框架中，接口为静态工厂方法提供了自然返回类型。 在Java 8 之前，接口不能有静态方法，因此按照惯例，接口Type 的静态工厂方法被放在一个名为Types 的不可实例化的伴生类（详见第4 条）中。例如Java Collections Framework的集合接口有45 个工具实现，分别提供了不可修改的集合、同步集合，等等。几乎所有这些实现都通过静态工厂方法在－个不可实例化的类（ java.util. Collections ） 中导出。所有返回对象的类都是非公有的。 现在的Collections Framework API 比导出45 个独立公有类的那种实现方式要小得多，每种便利实现都对应一个类。这不仅仅是指API 数量上的减少，也是概念意义上的减少：为了使用这个API，用户必须掌握的概念在数量和难度上都减少了。程序员知道，被返回的对象是由相关的接口精确指定的，所以他们不需要阅读有关的类文档。此外，使用这种静态工厂方法时，甚至要求客户端通过接口来引用被返回的对象， 而不是通过它的实现类来引用被返回的对象，这是一种良好的习惯（详见第64 条） 。 从Java 8 版本开始，接口中不能包含静态方法的这一限制成为历史，因此一般没有任何理由给接口提供一个不可实例化的伴生类。已经被放在这种类中的许多公有的静态成员，应该被放到接口中去。但是要注意，仍然有必要将这些静态方法背后的大部分实现代码，单独放进一个包级私有的类中。这是因为在Java 8 中仍要求接口的所有静态成员都必须是公有的。在Java 9 中允许接口有私有的静态方法，但是静态域和静态成员类仍然需要是公有的。 静态工厂的第四大优势在于，所返回的对象的类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值。只要是已声明的返回类型的子类型，都是允许的。返回对象的类也可能随着发行版本的不同而不同。 EnumSet （详见第36 条）没有公有的构造器，只有静态工厂方法。在OpenJDK 实现中，它们返回两种子类之一的一个实例，具体则取决于底层枚举类型的大小：如果它的元素有64个或者更少，就像大多数枚举类型一样，静态工厂方法就会返回一个RegalarEumSet 实例，用单个long 进行支持；如果枚举类型有65 个或者更多元素，工厂就返回JumboEnumSet实例，用一个long 数组进行支持。 这两个实现类的存在对于客户端来说是不可见的。如果RegularEnumSet 不能再给小的枚举类型提供性能优势，就可能从未来的发行版本中将它删除，不会造成任何负面的影H向。同样地，如果事实证明对性能有好处，也可能在未来的发行版本中添加第三甚至第四个EnumSet 实现。客户端永远不知道也不关心它们从工厂方法中得到的对象的类，它们只关心它是EnumSet 的某个子类。 静态工厂的第五大优势在于，方法返回的对象所属的类，在编写包含该静态工厂方法的类时可以不存在。这种灵活的静态工厂方法构成了服务提供者框架（ Service ProviderFramework）的基础，例如JDBC(Java 数据库连接）API 。服务提供者框架是指这样一个系统：多个服务提供者实现一个服务，系统为服务提供者的客户端提供多个实现，并把它们从多个实现中解耦出来。 服务提供者框架中有三个重要的组件：服务接口（ Service Interface ），这是提供者实现的；提供者注册API ( Provider Registration API ），这是提供者用来注册实现的；服务访问API (Service Access API) ，这是客户端用来获取服务的实例。服务访问API 是客户端用来指定某种选择实现的条件。如果没有这样的规定， API 就会返回默认实现的一个实例，或者允许客户端遍历所有可用的实现。服务访问API 是“灵活的静态工厂”，它构成了服务提供者框架的基础。 服务提供者框架的第四个组件服务提供者接口（ Service Provider Interface ）是可选的，它表示产生服务接口之实例的工厂对象。如果没有服务提供者接口，实现就通 过反射方式进行实例化（详见第65 条） 。对于JDBC 来说， Connectio 口就是其服务接口的一部分DriverManager.registerDriver 是提供者注册API,DriverManager.getConnection是服务访问API, Driver 是服务提供者接口。 服务提供者框架模式有着无数种变体。例如，服务访问API 可以返回比提供者需要的更丰富的服务接口。这就是桥接（ Bri dge ）模式［ Gamma95 ］ 。依赖、注入框架（详见第5 条）可以被看作是一个强大的服务提供者。从Java 6 版本开始， Java 平台就提供了一个通用的服务提供者框架j ava . util.ServiceLoader ，因此你不需要（一般来说也不应该）再自己编写了（详见第59 条） 。JDBC 不用S er v 工ceLoader ，因为前者出现得比后者早。 劣势 静态工厂方法的主要缺点在于，类如果不含公有的或者受保护的构造器，就不能被子类化。例如，要想将Collections Framework 中的任何便利的实现类子类化， 这是不可能的。但是这样也许会因祸得福，因为它鼓励程序员使用复合（composition ），而不是继承（详见第四条），这正是不可变类型所需要的（详见第17 条） 。 静态工厂方法的第二个缺点在于，程序员很难发现它们。在API 文档中，它们没有像构造器那样在API 文档中明确标识出来， 因此对于提供了静态工厂方法而不是构造器的类来说，要想查明如何实例化一个类是非常困难的。Javadoc 工具总有一天会注意到静态工厂方法。同时，通过在类或者接口注释中关注静态工厂， 并遵守标准的命名习惯，也可以弥补这一劣势。下面是静态工厂方法的一些惯用名称。这里只列出了其中的一小部分： from一一类型转换方法，它只有单个参数，返回该类型的一个相对应的实例，例如： Date d = Date . from(instant) ; of一一聚合方法，带有多个参数，返回该类型的一个实例，把它们合并起来，例如： Set faceCards = EnumSet.of (JACK , QUEEN, KING); valueOf一一比from 和of 更烦琐的一种替代方法，例如： BigInteger prime = BigInteger.valueOf(Integer.MAX_VALUE); instance 或者get Instance一－返回的实例是通过方法的（如有）参数来描述的，但是不能说与参数具有同样的值，例如： StackWalker luke = StackWalker.getInstance(); create 或者new Instance一一像instance 或者getInstance 一样，但create或者new Instance 能够确保每次调用都返回一个新的实例，例如： StackWalker luke = StackWalker.getInstance(); getType一一像getInstance 一样，但是在工厂方法处于不同的类中的时候使用。Type 表示工厂方法所返回的对象类型，例如： FileStore fs = Files.getFileStore(Path); newType一一像 new Instance 一样，但是在工厂方法处于不同的类中的时候使用。Type 表示工厂方法所返回的对象类型，例如： BufferedReader bufferedReader = Files.newBufferedReader(Path); type-一－get Type 和new Type 的简版，例如： List litany ＝ Collections.list(legacylitany); 简而言之，静态工厂方法和公有构造器都各有用处，我们需要理解它们各自的长处。静态工厂经常更加合适，因此切忌第一反应就是提供公有的构造器， 而不先考虑静态工厂。 参考：设计模式 (计算机)](https://zh.wikipedia.org/wiki/设计模式_(计算机))) Effective Java中文版 (第3版) Graphic Design Patterns]]></content>
      <categories>
        <category>design model</category>
      </categories>
      <tags>
        <tag>factory</tag>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[长字符串如何建立索引]]></title>
    <url>%2F2019%2F07%2F23%2F%E9%95%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[场景分析库中有一张表记录着所有客户文件上传或者、客户上传的BASE64图片资源，file_store_record 表中有两个字段 name original_name 分别取记录文件名称和文件的原文件名称，由于文件名称是唯一的，有些做法会在该字段下建立唯一索引，并且都是通过时间戳（秒||毫秒）+ 文件后缀的形式去生成唯一值 123name original.name15634508992959536.jpg 1寸白底.jpg15634510398049541.jpg 1寸白底.jpg 索引优化首先我们分析下上面的情况，能如何去优化，或者说有哪些问题，首先name 的字段类型是 VARCHAR，VARCHAR 存储可变长度的 M 个字符，大小 0-65535 字节，如果是 UTF-8 编码的话，一个字符占 3 字节，如果是 UTF-8mb4，一个字符占 4 字节，UTF8mb4 varchar(10)=40字节；从上面的例子可以看出已经超过了 20 字符，name 字段 varchar(20)，索引的存储并不会存储你改列的实际大小，只会存储改字段定义类型所占的字节大小；第二是索引是存储在内存中的，索引的查找也是会设计到比较的，虽然是存储在内存中，一般还是建议索引的类型和长度越短越好，第三的思路是进行比较部分长度，其实在前12，13，14 位的区分度就比较高，可以建立 前缀索引 12345678910111213141516171819202122232425思路一mysql&gt; alter table SUser add index index(name(12));mysql&gt; alter table SUser add index index(name(13));mysql&gt; alter table SUser add index index(name(14));思路二拆分namename_pre, suffixname_pre 单独存储 15634508992959536suffix 存储 .jpgname 可以用 BIGINT 存储，存储空间为 8 字节虽然很明显了减少了索引的存储空间，但是索引的检索过程中，还是会进行比较长检索思路三在思路一的基础上进行改造，由于时间戳的前面部分基本都是一样的，区分度是非常的低，也会导致检索浪费，如果直接反转 name_pre，15634508992959536-&gt;6359592998054365115634510398049541-&gt;14594089301543651索引前半部分的区分度变得非常的高，不过也增加业务操作成本，需要进行反转拼接思路四索取的区分度虽然提高了，但是字段的长度还是没有太大的降低，BITLOG 8字节 长度也是比较高的，还有一种情况，类似于人脸机的文件存储格式为 FACE_1166914936_20190719T124010508_121.jpg，这样就比较的尴尬了，后面了解到有一种 crc32 ，当然需要增加额外的存储空间，不过查询的方式相比反转会更稳定点，应该冲突的概率比较低 检错能力极强，开销小，易于用编码器及检测电路实现。从其检错能力来看，它所不能发现的错误的几率仅为0.0047%以下。从性能上和开销上考虑，均远远优于奇偶校验及算术和校验等方式。因而，在数据存储和数据通讯领域，CRC无处不在：著名的通讯协议X.25的FCS（帧检错序列）采用的是CRC-CCITT，ARJ、LHA等压缩工具软件采用的是CRC32，磁盘驱动器的读写采用了CRC16，通用的图像存储格式GIF、TIFF等也都用CRC作为检错手段。 CRC32 百度百科 测试情况，由于样本不多，不过也能分析出大概情况12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364# 区分度并不高mysql&gt; select -&gt; count(*), -&gt; count(distinct left(name,8)) as L8, -&gt; count(distinct left(name,9)) as L9, -&gt; count(distinct left(name,10)) as L10, -&gt; count(distinct left(name,30)) as L30, -&gt; count(distinct left(name,35)) as L35 -&gt; from file_store_record;+----------+----+----+-----+-----+-----+| count(*) | L8 | L9 | L10 | L30 | L35 |+----------+----+----+-----+-----+-----+| 13 | 8 | 8 | 8 | 11 | 13 |+----------+----+----+-----+-----+-----+1 row in set (0.00 sec)# 前缀索引mysql&gt; select -&gt; count(*), -&gt; count(distinct left(reverse(name),4)) as L4, -&gt; count(distinct left(reverse(name),5)) as L5, -&gt; count(distinct left(reverse(name),6)) as L6, -&gt; count(distinct left(reverse(name),8)) as L7 -&gt; from file_store_record;+----------+----+----+----+----+| count(*) | L4 | L5 | L6 | L7 |+----------+----+----+----+----+| 13 | 1 | 9 | 13 | 13 |+----------+----+----+----+----+1 row in set (0.00 sec)# 前缀索引 倒序存储的方式# 10 78 136 154mysql&gt; select -&gt; count(*), -&gt; count(distinct substr(reverse(name),5,1)) as L1, -&gt; count(distinct substr(reverse(name),5,2)) as L2, -&gt; count(distinct substr(reverse(name),5,3)) as L3, -&gt; count(distinct substr(reverse(name),5,4)) as L4 -&gt; from file_store_record;+----------+----+----+----+----+| count(*) | L1 | L2 | L3 | L4 |+----------+----+----+----+----+| 13 | 9 | 13 | 13 | 13 |+----------+----+----+----+----+1 row in set (0.00 sec)# crc32alter table file_store_record add name_crc int unsigned, add index(id_card_crc);UPDATE file_store_record SET name_crc = crc32(name);mysql&gt; select -&gt; count(*), -&gt; count(distinct left(name_crc,1)) as L1, -&gt; count(distinct left(name_crc,2)) as L2, -&gt; count(distinct left(name_crc,3)) as L3, -&gt; count(distinct left(name_crc,4)) as L4, -&gt; count(distinct left(name_crc,5)) as L5 -&gt; from file_store_record;+----------+----+----+----+----+----+| count(*) | L1 | L2 | L3 | L4 | L5 |+----------+----+----+----+----+----+| 13 | 4 | 12 | 13 | 13 | 13 |+----------+----+----+----+----+----+1 row in set (0.00 sec)]]></content>
      <categories>
        <category>RDB</category>
      </categories>
      <tags>
        <tag>index</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[说服艺术]]></title>
    <url>%2F2019%2F06%2F23%2F%E8%AF%B4%E6%9C%8D%E8%89%BA%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[每当你遇到难解的问题，不要悲伤，不要着急，总有一个人会给你答案，每次看连叔的解答都能让人产生信心，也能让你不断的去思考。 人与人之间的沟通，一大作用就是说服对方，让对方接受自己的观点。但这点又非常难做到，经常可以听到抱怨他人的冥顽不化。 而只要一开始指责，说服工作就宣告失败，责怪他人，逻辑再顺，三观再正，对被责怪的人来说，也几乎不起作用，甚至只会起反作用，他为了维护自己的尊严与面子，更不会退让与改变。 当你想说服一个人时，避免指责，不只是一个策略问题，更是一个核心技术，你得认真寻找到对方的优点。这点，任正非先生有完美的示范。 从有限的资料来判断，任正非先生在企业内部管理上，风格是严厉的，被他批评可能并不好受。在企业管理上，这没有问题，企业就是变形的君主制度，老板说了算，尤其是任正非这样有声望有威信，钱又给得多的老板，员工被批评了只能改正，也比较乐意改正。 但在对外谈判中，对方又相当强大，严厉指责就是错误的。任正非最近的对手是特朗普，他在采访中对特朗普的评价却很高：我认为特朗普是伟大的总统，是因为他把税降下来了，这在一个民主国家是极其艰难的事情。欧洲为什么形成了福利社会？税太重了，拼命努力工作，大多数钱都缴税了，不如少干一点，在大街上喝两杯咖啡，为什么要去干活呢？税减下来以后是有利于产业发展的。 降税确实非常难，你只要办过一间小小的公司，就会知道，税的轻重，是生死攸关的事，利润就那么一点，加税，没钱赚，公司可能就得关门，降税，能够活下去，再小的公司都能提供几个就业机会，维持几个家庭的生计。美国开始降税，迫使全世界其他国家也得跟着降税，不然就要失去竞争力，这等于造福全球的企业。称赞特朗普这点，是适当的。特朗普又那么爱面子，喜欢自吹自擂，任正非先生真诚的夸奖会不会影响他？会的。 始终给对手一个台阶下，相信对方能够改变，这是说服的艺术。任正非先生的这次示范（他在不同的采访中反复强调过特朗普降税的意义）,值得记住，并在自己的沟通中使用，你未必有机会劝说美国总统，但是你的对手可能比美国总统更难退让，美国总统有更大利益时，或者一意孤行成本过大，可能瞬间会改变，但是你的家人，你的长辈，可能就会跟你死磕到底。 几天前，一位老朋友在评论区写下了完美说服的例子： “我爸曾经把‘穷开心穷开心，因为我穷所以我开心’挂在嘴边，我在听过n遍之后有一次好奇而温和的问他：‘您真觉得开心是因为穷吗？我倒觉得是因为您遇事想得开看的透才开心的呢，因为我们经历过为钱发愁的事情啊，一点都不开心。’ 老爸虽然没吭声，我知道老爸接受了我的说法，因为从那以后我没再听老爸说过这句让我感觉自相矛盾的话了。 所以老爸的确是看的开想的透呢。” 这次关键性说服，技术比任正非先生还高明。仔细观察，在生活中有不少沟通高手，批评都有本事以赞美的形式出现，但又真诚且真实，绝不是廉价的马屁。我们应该努力掌握这个技术。如果我们爱一个人（比如自己的父亲），如果我们爱自己的观念，认为它是正确的，对人有益的，那么，我们在说服一个人之前，应当相信他人能够改变，这样能够放弃恶意的、攻击性的、羞辱性的反效果沟通。 沟通的内核是事实与逻辑，但前提还真是爱与温暖。 连岳 微信公众号搜索连岳]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>沟通</tag>
        <tag>说服</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[框架 or 基础知识]]></title>
    <url>%2F2019%2F03%2F31%2F%E6%A1%86%E6%9E%B6-or-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[前言鄙人南下就业，以为掌握 Dubbo、SpringCloud 等技术栈就比较占优，不曾想到各种碰壁，事与愿违，在准备面试题的过程中，开始思考，痛并思痛，自己是不是该改变学习策略了；框架和基础知识那个更重要呢？ 第一家面试的是亚马逊中国，上来就是一顿算法题，懵了； 第二家面试的是懒人科技，上来也是一顿 Java 基础知识，GC 优化，多线程、并发编程，底层原理，哎… 又被打败了； 刚好看到 极客时间 有相关的文章，甚是欣喜，特意引用，以史为诫。 极客时间 | 技术人员应该停止学习框架，专注基础知识作为一名开发人员，需要不停地学习新技术。那么，我们应该学习什么样的技术？关于这个话题，有着 15 年工作经验的软件工程师爱德华·兹西佐夫（Eduards Sizovs）发文表达了自己的看法。 他认为，开发者需要掌握最新的技术，每天学习编程语言、框架和库，知道的工具越新越好，但这一切都是在浪费时间。科技以光速变化，这场比赛没有赢家，因为它没有终点。 技术的未来预期寿命与其当前存在时间成正比，每一段额外的生存期都意味着更长的剩余预期寿命。技术存在的时间越长，学习它就越安全，对于技术人员来说，不要急于学习新技术，因为它有很高的消亡概率；时间是最好的导师，它会证明哪些技术值得学习，所以需要学会等待。 曾经，兹西佐夫的导师给他上了重要一课。他的导师询问他正在做什么，他回答正在阅读一本关于如何用 GWT 构建现代 Java 应用程序的书，GWT 是必须跟进的技术。在此之前，他还读了一本 500 页的关于 Apache Tapestry 的书，但他现在根本没用到 Apache Tapestry ，这也没办法帮助他很好地解决 GWT 相关的问题。 因此，导师建议他正确地设置优先级，把 80% 的时间花在基础学习上，然后剩下 20% 的时间留给框架，库和工具的学习即可。 现如今，十年过去了，他经历了 50 个不同的软件项目。上述这些建议让他学到的所有东西都可以跨公司、团队、跨领域使用。他认为，只有深入研究项目本质，才会发现它们都是相似的： 编程语言是不同的，但设计是相似的。 框架是不同的，但设计模式是可以通用的。 开发者是不同的，但与人打交道的规则是统一的。 框架、库和工具是会变化的，但时间是宝贵的。开发者应该将宝贵的时间花在可移植的技能上，比如框架进化体系结构，干净的代码，设计模式，DDD、安全精简编码原则、容错模式、HTTP 和 REST 等技能上。]]></content>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat NIO、APR 压力测试性能对比]]></title>
    <url>%2F2019%2F02%2F02%2FTomcat-NIO%E3%80%81APR-%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94%2F</url>
    <content type="text"><![CDATA[Tomcat 三种线程模式 一、bio(blocking I/O) 即阻塞式I/O操作，表示Tomcat使用的是传统的Java I/O操作(即java.io包及其子包)。是基于JAVA的HTTP/1.1连接器，Tomcat7以下版本在默认情况下是以bio模式运行的。一般而言，bio模式是三种运行模式中性能最低的一种。我们可以通过Tomcat Manager来查看服务器的当前状态。（Tomcat7或以下，在 Linux 系统中默认使用这种方式） 一个线程处理一个请求，缺点：并发量高时，线程数较多，浪费资源 二、nio(new I/O) 是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，因此nio也被看成是non-blocking I/O的缩写。它拥有比传统I/O操作(bio)更好的并发运行性能。要让Tomcat以nio模式来运行只需要在Tomcat安装目录/conf/server.xml 中将对应的中protocol的属性值改为 org.apache.coyote.http11.Http11NioProtocol即可 利用 Java 的异步请求 IO 处理，可以通过少量的线程处理大量的请求 注意： Tomcat8 以上版本在 Linux 系统中，默认使用的就是NIO模式，不需要额外修改 ，Tomcat7必须修改Connector配置来启动 undefined 三、apr(Apache Portable Runtime/Apache可移植运行时) （ 安装配置过程相对复杂） Tomcat将以JNI的形式调用Apache HTTP服务器的核心动态链接库来处理文件读取或网络传输操作，从而大大地提高Tomcat对静态文件的处理性能。Tomcat apr也是在Tomcat上运行高并发应用的首选模式。从操作系统级别来解决异步的IO问题 undefined zhuawang’s blog三种高级运行模式 主要注意的一点： 毕竟 APR 是 c 语言编写的，是非跨平台的，如果你追求稳定和简单的话，推荐还是默认的 NIO 模式 Tomcat启动的时候，可以通过log看到Connector使用的是哪一种运行模式： Starting ProtocolHandler [“http-bio-8080”] Starting ProtocolHandler [“http-nio-8080”] Starting ProtocolHandler [“http-apr-8080”] APR 安装APR 官网下载地址 APR 1.6.5 is the best available version APR-util 1.6.1 is the best available version APR iconv 1.2.2 is the best available version 安装顺序12345678910111213141516171819# 下载APR依赖包yum install -y expat expat-devel安装步骤1. apr 1. 解压至安装目录(# tar -xvf apr-1.6.5.tar.gz -C ../install/) 2. ./configure -prefix=/usr/local/apr 3. make 4. make install2. apr-iconv 1. 解压至安装目录(# tar -xvf apr-iconv-1.2.2.tar.gz -C ../install/) 2. ./configure -prefix=/usr/local/apr-iconv --with-apr=/usr/local/apr 3. make 4. make install3. apr-util 1. 解压至安装目录(# tar -xvf apr-util-1.6.1.tar.gz -C ../install/) 2. ./configure -prefix=/usr/local/apr-util --with-apr=/usr/local/apr --with-apriconv=/usr/local/apr-iconv 3. make 4. make install Tomcat APR模式配置Native 解压配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152[root@iZuf6iq8e7ya9v3ix71k0pZ apr-util-1.6.1]# cd /opt/install/apache-tomcat-9.0.14/bin[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# lsbootstrap.jar configtest.bat makebase.bat tomcat-juli.jarcatalina.bat configtest.sh makebase.sh tomcat-native.tar.gzcatalina.sh daemon.sh setclasspath.bat tool-wrapper.batcatalina-tasks.xml digest.bat setclasspath.sh tool-wrapper.shciphers.bat digest.sh shutdown.bat version.batciphers.sh guns-logs shutdown.sh version.shcommons-daemon.jar guns-rest.log startup.batcommons-daemon-native.tar.gz hs_err_pid6741.log startup.sh[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# tar -zxf tomcat-native.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# cd tomcat-native-1.2.19-src/[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat-native-1.2.19-src]# cd native/[root@iZuf6iq8e7ya9v3ix71k0pZ native]# lsbuild build-outputs.mk include Makefile.in os tcnative.pc.inbuildconf config.layout libtcnative.dsp NMAKEmakefile src tcnative.specbuild.conf configure libtcnative.dsw NMAKEmakefile.inc srclibBUILDING configure.in LICENSE.bin.win NOTICE.bin.win tcnative.dsp[提示 java home 找不到][root@iZuf6iq8e7ya9v3ix71k0pZ native]# ./configure --with-apr=/usr/local/aprchecking build system type... x86_64-pc-linux-gnuchecking host system type... x86_64-pc-linux-gnuchecking target system type... x86_64-pc-linux-gnuchecking for a BSD-compatible install... /usr/bin/install -cchecking for working mkdir -p... yesTomcat Native Version: 1.2.19checking for chosen layout... tcnativechecking for APR... yesconfigure: APR 1.6.5 detected. setting CC to &quot;gcc&quot; setting CPP to &quot;gcc -E&quot; setting LIBTOOL to &quot;/usr/local/apr/build-1/libtool&quot;checking for JDK location... configure: error: Java Home not defined. Rerun with --with-java-home=... parameter[root@iZuf6iq8e7ya9v3ix71k0pZ install]# vim /etc/profileexport JAVA_HOME=/usr/java/jdk1.8.0_111export PATH=$JAVA_HOME/bin:$PATH[root@iZuf6iq8e7ya9v3ix71k0pZ install]# source /etc/profile[root@iZuf6iq8e7ya9v3ix71k0pZ install]# echo $JAVA_HOME/usr/java/jdk1.8.0_111[root@iZuf6iq8e7ya9v3ix71k0pZ native]# ./configure --with-apr=/usr/local/apr - -with-java-home=/usr/java/jdk1.8.0_111[root@iZuf6iq8e7ya9v3ix71k0pZ native]# make &amp; make install2. 修改 catalina.shLD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/apr/lib export LD_LIBRARY_PATH3. 修改 server.xmlprotocol=&quot;org.apache.coyote.http11.Http11AprProtocol&quot; NIO 和 APR 压力测试安装压力测试 apache A/B 测试1[root@iZuf6iq8e7ya9v3ix71k0pZ apache-tomcat-9.0.14]# yum install httpd-tools 启动不同模式的 Tomcat 服务1221-Jan-2019 17:03:41.288 信息 [main] org.apache.coyote.AbstractProtocol.start 开始协议处理句柄[&quot;http-apr-8081&quot;]21-Jan-2019 17:03:41.288 信息 [main] org.apache.coyote.AbstractProtocol.start 开始协议处理句柄[&quot;http-nio-8082&quot;] TP99 性能指标1234567891011121314151617181920212223ab -n 3000 -c 100 http://smniuhe.com:8081/xxx/listTime per request: 1335.676 [ms] (mean)Time per request: 1289.714 [ms] (mean)Time per request: 1344.385 [ms] (mean)ab -n 3000 -c 100 http://smniuhe.com:8082/xxx/listTime per request: 1293.279 [ms] (mean)Time per request: 1275.337 [ms] (mean)Time per request: 1291.890 [ms] (mean)数据量比较少的缘故，并不能明显的看出ab -n 6000 -c 100 http://smniuhe.com:8081/xxx/listTime per request: 995.545 [ms] (mean)apr_pollset_poll: The timeout specified has expired (70007)Total of 5983 requests completedapr_pollset_poll: The timeout specified has expired (70007)Total of 5992 requests completed ab -n 6000 -c 100 http://smniuhe.com:8082/xxx/listTime per request: 975.884 [ms] (mean)Time per request: 975.526 [ms] (mean)Time per request: 966.517 [ms] (mean)]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>thread mode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cloud Toolkit 运用]]></title>
    <url>%2F2019%2F02%2F02%2FCloud-Toolkit-%E8%BF%90%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Alibaba Cloud Toolkit（ 阿里云开发者插件，简称：Cloud Toolkit ）是一个面向 IntelliJ IDEA、Eclipse 和 Maven 平台的免费插件，旨在帮助开发者在本地开发平台（IDE）中更便捷的使用阿里云，从而高效地开发、测试、诊断并部署应用。Cloud Toolkit 帮助开发者将本地应用程序一键部署到线下自有 VM，或阿里云 ECS、EDAS、Kubernetes 中去；并支持快速 SSH 登录到机器，高效执行终端命令和文件上传等。钉钉群号：23341694 Cloud Toolkit产品说明 使用阿里的文档还是写的比较好的，基本可以下面链接直接上手 Alibaba Cloud Toolkit 使用指南 Cloud Toolkit 之 Command 编写指南 注意事项讲一讲我当前遇到这个版本的几个问题 Alibaba Cloud Tookit v2018.12.0 Actions 中 Upload 是针对于文件上传服务器的，我之前一直用的是 SFTP，但是这个上传的记录并没有保存记录，需要每次输入 配置 ECS on Alibaba Cloud 相关 configuration 的时候，Deployment File with select Maven Build 方法的时候，一般下面会有一个 Run Maven Goal ‘module: clean install’ 这个有时候删除，再次run 的时候还是存在该选项，可以在 run 的时候移除掉，配置自己的 maven 配置 可以编写自定义的 .sh 文件，去尽可能的操作更多的命令]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>plugins</tag>
        <tag>Toolkit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多条件查询遵循 Restful API 规范的改如何设计？]]></title>
    <url>%2F2018%2F12%2F12%2F%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2%E9%81%B5%E5%BE%AA-Restful-API-%E8%A7%84%E8%8C%83%E7%9A%84%E6%94%B9%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[SF提问12345678910111213141516#### 问题描述1. 由于遵循 Restful API 规范，Get 请求的方式针对于多条件查询来说，不好设计接口#### 问题出现的环境背景及自己尝试过哪些方法有人提供过两种方式1. http://localhost:8080/app/names?queryDtoStr=&#123;"query1":12,"query2":2,"query3":2&#125; 2. 或者直接使用 POST 请求#### 相关代码#### 你期待的结果是什么？实际看到的错误信息又是什么？有没有其他设计方式，尽量遵循 Restful API 规范 回答如果Action不符合CRUD操作那该怎么办？ 重新构造这个Action，使得它像一个资源的field（我理解为部分域或者部分字段）。这种方法在Action不包含参数的情况下可以奏效。例如一个有效的action可以映射成布尔类型field，并且可以通过PATCH更新资源。 利用RESTful原则像处理子资源一样处理它。例如，Github的API让你通过PUT /gists/:id/star 来 star a gist ，而通过DELETE /gists/:id/star来进行 unstar 。 有时候你实在是没有办法将Action映射到任何有意义的RESTful结构。例如，多资源搜索没办法真正地映射到任何一个资源接入点。这种情况，/search 将非常有意义，虽然它不是一个名词。这样做没有问题 - 你只需要从API消费者的角度做正确的事，并确保所做的一切都用文档清晰记录下来了以避免（API消费者的）困惑。 RESTful API 设计最佳实践引用于 所以题主完全可以提供 /app/names/search 服务专门用于搜索功能，查询参数一般是通过 query parameters 的方式传递。]]></content>
      <categories>
        <category>RESTful</category>
      </categories>
      <tags>
        <tag>多条件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot整合shiro 密码加密]]></title>
    <url>%2F2018%2F12%2F07%2FSpringBoot%E6%95%B4%E5%90%88shiro-%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[数据库中密码相关字段都不是明文,肯定是加密之后的，传统方式一般是使用MD5加密。 单纯使用不加盐的MD5加密方式，当两个用户的密码相同时，会发现数据库中存在相同内容的密码，这样也是不安全的。我们希望即便是两个人的原始密码一样，加密后的结果也不一样。 下面进行shiro密码 加密加盐配置： 1.ShiroConfig中添加密码比较器12345678910111213141516171819/** * 配置密码比较器 * @return */@Bean("credentialsMatcher")public RetryLimitHashedCredentialsMatcher retryLimitHashedCredentialsMatcher()&#123; RetryLimitHashedCredentialsMatcher retryLimitHashedCredentialsMatcher = new RetryLimitHashedCredentialsMatcher(); retryLimitHashedCredentialsMatcher.setRedisManager(redisManager()); //如果密码加密,可以打开下面配置 //加密算法的名称 retryLimitHashedCredentialsMatcher.setHashAlgorithmName("MD5"); //配置加密的次数 retryLimitHashedCredentialsMatcher.setHashIterations(2); //是否存储为16进制 retryLimitHashedCredentialsMatcher.setStoredCredentialsHexEncoded(true); return retryLimitHashedCredentialsMatcher;&#125; 2.将密码比较器配置给ShiroRealm1234567891011121314151617181920/** * 身份认证realm; (这个需要自己写，账号密码校验；权限等) * @return */@Beanpublic ShiroRealm shiroRealm()&#123; ShiroRealm shiroRealm = new ShiroRealm(); shiroRealm.setCachingEnabled(true); //启用身份验证缓存，即缓存AuthenticationInfo信息，默认false shiroRealm.setAuthenticationCachingEnabled(true); //缓存AuthenticationInfo信息的缓存名称 在ehcache-shiro.xml中有对应缓存的配置 shiroRealm.setAuthenticationCacheName("authenticationCache"); //启用授权缓存，即缓存AuthorizationInfo信息，默认false shiroRealm.setAuthorizationCachingEnabled(true); //缓存AuthorizationInfo信息的缓存名称 在ehcache-shiro.xml中有对应缓存的配置 shiroRealm.setAuthorizationCacheName("authorizationCache"); //配置自定义密码比较器 shiroRealm.setCredentialsMatcher(retryLimitHashedCredentialsMatcher()); return shiroRealm;&#125; 3.密码比较器RetryLimitHashedCredentialsMatcher自定义的密码比较器，跟前面博客中逻辑没有变化,唯一变的是 继承的类从 SimpleCredentialsMatcher 变为 HashedCredentialsMatcher 在密码比较器中做了： 如果用户输入密码连续错误5次，将锁定账号,具体参考博客：https://blog.csdn.net/qq_34021712/article/details/80461177 RetryLimitHashedCredentialsMatcher完整内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788package com.springboot.test.shiro.config.shiro;import java.util.concurrent.atomic.AtomicInteger;import com.springboot.test.shiro.modules.user.dao.UserMapper;import com.springboot.test.shiro.modules.user.dao.entity.User;import org.apache.log4j.Logger;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.LockedAccountException;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.springframework.beans.factory.annotation.Autowired;/** * @author: SmNiuhe * @date: 2018/12/7 * @description: 登陆次数限制 */public class RetryLimitHashedCredentialsMatcher extends HashedCredentialsMatcher &#123; private static final Logger logger = Logger.getLogger(RetryLimitHashedCredentialsMatcher.class); public static final String DEFAULT_RETRYLIMIT_CACHE_KEY_PREFIX = "shiro:cache:retrylimit:"; private String keyPrefix = DEFAULT_RETRYLIMIT_CACHE_KEY_PREFIX; @Autowired private UserMapper userMapper; private RedisManager redisManager; public void setRedisManager(RedisManager redisManager) &#123; this.redisManager = redisManager; &#125; private String getRedisKickoutKey(String username) &#123; return this.keyPrefix + username; &#125; @Override public boolean doCredentialsMatch(AuthenticationToken token, AuthenticationInfo info) &#123; //获取用户名 String username = (String)token.getPrincipal(); //获取用户登录次数 AtomicInteger retryCount = (AtomicInteger)redisManager.get(getRedisKickoutKey(username)); if (retryCount == null) &#123; //如果用户没有登陆过,登陆次数加1 并放入缓存 retryCount = new AtomicInteger(0); &#125; if (retryCount.incrementAndGet() &gt; 5) &#123; //如果用户登陆失败次数大于5次 抛出锁定用户异常 并修改数据库字段 User user = userMapper.findByUserName(username); if (user != null &amp;&amp; "0".equals(user.getState()))&#123; //数据库字段 默认为 0 就是正常状态 所以 要改为1 //修改数据库的状态字段为锁定 user.setState("1"); userMapper.update(user); &#125; logger.info("锁定用户" + user.getUsername()); //抛出用户锁定异常 throw new LockedAccountException(); &#125; //判断用户账号和密码是否正确 boolean matches = super.doCredentialsMatch(token, info); if (matches) &#123; //如果正确,从缓存中将用户登录计数 清除 redisManager.del(getRedisKickoutKey(username)); &#125;&#123; redisManager.set(getRedisKickoutKey(username), retryCount); &#125; return matches; &#125; /** * 根据用户名 解锁用户 * @param username * @return */ public void unlockAccount(String username)&#123; User user = userMapper.findByUserName(username); if (user != null)&#123; //修改数据库的状态字段为锁定 user.setState("0"); userMapper.update(user); redisManager.del(getRedisKickoutKey(username)); &#125; &#125;&#125; 4.修改ShiroRealm中doGetAuthenticationInfo方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168package com.springboot.test.shiro.config.shiro;import com.springboot.test.shiro.modules.user.dao.PermissionMapper;import com.springboot.test.shiro.modules.user.dao.RoleMapper;import com.springboot.test.shiro.modules.user.dao.entity.Permission;import com.springboot.test.shiro.modules.user.dao.entity.Role;import com.springboot.test.shiro.modules.user.dao.UserMapper;import com.springboot.test.shiro.modules.user.dao.entity.User;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.*;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.springframework.beans.factory.annotation.Autowired;import java.util.Set;/** * @author: SmNiuhe * @date: 2018/12/7 * @description: 在Shiro中，最终是通过Realm来获取应用程序中的用户、角色及权限信息的 * 在Realm中会直接从我们的数据源中获取Shiro需要的验证信息。可以说，Realm是专用于安全框架的DAO. */public class ShiroRealm extends AuthorizingRealm &#123; @Autowired private UserMapper userMapper; @Autowired private RoleMapper roleMapper; @Autowired private PermissionMapper permissionMapper; /** * 验证用户身份 * @param authenticationToken * @return * @throws AuthenticationException */ @Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123; //获取用户名密码 第一种方式 //String username = (String) authenticationToken.getPrincipal(); //String password = new String((char[]) authenticationToken.getCredentials()); //获取用户名 密码 第二种方式 UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) authenticationToken; String username = usernamePasswordToken.getUsername(); String password = new String(usernamePasswordToken.getPassword()); //从数据库查询用户信息 User user = this.userMapper.findByUserName(username); //可以在这里直接对用户名校验,或者调用 CredentialsMatcher 校验 if (user == null) &#123; throw new UnknownAccountException("用户名或密码错误！"); &#125; //这里将 密码对比 注销掉,否则 无法锁定 要将密码对比 交给 密码比较器 //if (!password.equals(user.getPassword())) &#123; // throw new IncorrectCredentialsException("用户名或密码错误！"); //&#125; if ("1".equals(user.getState())) &#123; throw new LockedAccountException("账号已被锁定,请联系管理员！"); &#125; SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(user, user.getPassword(),new MyByteSource(user.getUsername()),getName()); return info; &#125; /** * 授权用户权限 * 授权的方法是在碰到&lt;shiro:hasPermission name=''&gt;&lt;/shiro:hasPermission&gt;标签的时候调用的 * 它会去检测shiro框架中的权限(这里的permissions)是否包含有该标签的name值,如果有,里面的内容显示 * 如果没有,里面的内容不予显示(这就完成了对于权限的认证.) * * shiro的权限授权是通过继承AuthorizingRealm抽象类，重载doGetAuthorizationInfo(); * 当访问到页面的时候，链接配置了相应的权限或者shiro标签才会执行此方法否则不会执行 * 所以如果只是简单的身份认证没有权限的控制的话，那么这个方法可以不进行实现，直接返回null即可。 * * 在这个方法中主要是使用类：SimpleAuthorizationInfo 进行角色的添加和权限的添加。 * authorizationInfo.addRole(role.getRole()); authorizationInfo.addStringPermission(p.getPermission()); * * 当然也可以添加set集合：roles是从数据库查询的当前用户的角色，stringPermissions是从数据库查询的当前用户对应的权限 * authorizationInfo.setRoles(roles); authorizationInfo.setStringPermissions(stringPermissions); * * 就是说如果在shiro配置文件中添加了filterChainDefinitionMap.put("/add", "perms[权限添加]"); * 就说明访问/add这个链接必须要有“权限添加”这个权限才可以访问 * * 如果在shiro配置文件中添加了filterChainDefinitionMap.put("/add", "roles[100002]，perms[权限添加]"); * 就说明访问/add这个链接必须要有 "权限添加" 这个权限和具有 "100002" 这个角色才可以访问 * @param principalCollection * @return */ @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123; System.out.println("查询权限方法调用了！！！"); //获取用户 User user = (User) SecurityUtils.getSubject().getPrincipal(); //获取用户角色 Set&lt;Role&gt; roles =this.roleMapper.findRolesByUserId(user.getUid()); //添加角色 SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo(); for (Role role : roles) &#123; authorizationInfo.addRole(role.getRole()); &#125; //获取用户权限 Set&lt;Permission&gt; permissions = this.permissionMapper.findPermissionsByRoleId(roles); //添加权限 for (Permission permission:permissions) &#123; authorizationInfo.addStringPermission(permission.getPermission()); &#125; return authorizationInfo; &#125; /** * 重写方法,清除当前用户的的 授权缓存 * @param principals */ @Override public void clearCachedAuthorizationInfo(PrincipalCollection principals) &#123; super.clearCachedAuthorizationInfo(principals); &#125; /** * 重写方法，清除当前用户的 认证缓存 * @param principals */ @Override public void clearCachedAuthenticationInfo(PrincipalCollection principals) &#123; super.clearCachedAuthenticationInfo(principals); &#125; @Override public void clearCache(PrincipalCollection principals) &#123; super.clearCache(principals); &#125; /** * 自定义方法：清除所有 授权缓存 */ public void clearAllCachedAuthorizationInfo() &#123; getAuthorizationCache().clear(); &#125; /** * 自定义方法：清除所有 认证缓存 */ public void clearAllCachedAuthenticationInfo() &#123; getAuthenticationCache().clear(); &#125; /** * 自定义方法：清除所有的 认证缓存 和 授权缓存 */ public void clearAllCache() &#123; clearAllCachedAuthenticationInfo(); clearAllCachedAuthorizationInfo(); &#125;&#125; 跟之前的 ShiroRealm 相比,唯一改变的了SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(user, user.getPassword(),new MyByteSource(user.getUsername()),getName());这一行代码,添加了 加盐参数。 注意：大家可能看到了使用了 MyByteSource 而不是 ByteSource.Util.bytes(user.getUsername())具体原因参考博客：https://blog.csdn.net/qq_34021712/article/details/84567437 5.下面是生成密码加密加盐的方法,可以在注册的时候对明文进行加密 加盐 入库1234567891011121314151617181920212223242526272829303132package com.springboot.test.shiro;import org.apache.shiro.crypto.hash.SimpleHash;import org.apache.shiro.util.ByteSource;import org.junit.Test;/** * @author: SmNiuhe * @date: 2018/12/7 * @description: 给 密码进行 加密加盐 盐值默认为 用户名 */public class PasswordSaltTest &#123; @Test public void test() throws Exception &#123; System.out.println(md5("123456","admin")); &#125; public static final String md5(String password, String salt)&#123; //加密方式 String hashAlgorithmName = "MD5"; //盐：为了即使相同的密码不同的盐加密后的结果也不同 ByteSource byteSalt = ByteSource.Util.bytes(salt); //密码 Object source = password; //加密次数 int hashIterations = 2; SimpleHash result = new SimpleHash(hashAlgorithmName, source, byteSalt, hashIterations); return result.toString(); &#125;&#125; 可能出现的问题可能会发生这种情况，测试发现密码不对，具体原因debug都可以发现,这里直接把结果发出来： 第一种：debug发现 传入的密码 经过加密加盐之后是对的,但是 从数据库中 获取的密码 却是明文,原因是在ShiroRealm中 doGetAuthenticationInfo方法中,最后返回的SimpleAuthenticationInfo 第二个参数 是密码,这个密码 不是从前台传过来的密码,而是从数据库中查询出来的 第二种：debug发现 传入的密码 经过加密加盐之后是对的,但是 从数据库中 获取的密码 却是更长的一段密文,原因是在ShiroConfig中配置的RetryLimitHashedCredentialsMatcher一个属性： 12//是否存储为16进制retryLimitHashedCredentialsMatcher.setStoredCredentialsHexEncoded(true); 默认是true，如果改为false，则会出现 对比的时候从数据库拿出密码,然后转 base64 变成了另外一个更长的字符串,所以怎么对比都是不通过的。]]></content>
      <categories>
        <category>encrypt</category>
      </categories>
      <tags>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot web 应用加速]]></title>
    <url>%2F2018%2F12%2F06%2FSpring-Boot-web-%E5%BA%94%E7%94%A8%E5%8A%A0%E9%80%9F%2F</url>
    <content type="text"><![CDATA[Spring Boot Web 应用加速默认情况下，Spring Boot Web 应用会装配一些功能组件 Bean。 在大多数 Web 应用场景下，可以选择性地关闭一下自动装配的Spring 组件 Bean，以达到提升性能的目的。 配置项优化Spring Boot Web 应用加速 完整配置项1234567891011121314151617181920management.add-application-context-header = falsespring.mvc.formcontent.putfilter.enabled = falsespring.autoconfigure.exclude = org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\org.springframework.boot.actuate.autoconfigure.TraceRepositoryAutoConfiguration,\org.springframework.boot.actuate.autoconfigure.TraceWebFilterAutoConfiguration,\org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration 配置项汇总123spring.autoconfigure.exclude = org.springframework.boot.actuate.autoconfigure.TraceRepositoryAutoConfiguration,\org.springframework.boot.actuate.autoconfigure.TraceWebFilterAutoConfiguration,\org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration 关闭 Web 请求跟踪 自动装配org.springframework.boot.actuate.autoconfigure.TraceWebFilterAutoConfiguration顾名思义，该自动装配用跟踪 Web 请求，通过Servlet Filter org.springframework.boot.actuate.trace.WebRequestTraceFilter 记录请求的信息（如：请求方法、请求头以及请求路径等），其计算的过程存在一定的开销，使用场景罕见，故可选择关闭。 配置项 1org.springframework.boot.actuate.autoconfigure.TraceWebFilterAutoConfiguration org.springframework.boot.actuate.autoconfigure.TraceRepositoryAutoConfiguration当org.springframework.boot.actuate.autoconfigure.TraceWebFilterAutoConfiguration关闭后，其请求信息存储介质org.springframework.boot.actuate.trace.TraceRepository没有存在的必要，故可选择关闭。 配置项 1spring.autoconfigure.exclude = org.springframework.boot.actuate.autoconfigure.TraceRepositoryAutoConfiguration 关闭 Web 请求结果指标 自动装配org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration该组件将自动装配org.springframework.boot.actuate.autoconfigure.MetricsFilter，该 Filter 主要记录Web 请求结果指标（如：相应状态码、请求方法执行时间等），该信息一定程度上与反向代理服务器（nginx）功能重叠，故可选择关闭。 配置项 1spring.autoconfigure.exclude = org.springframework.boot.actuate.autoconfigure.MetricFilterAutoConfiguration 可关闭 Servlet Web 组件org.springframework.web.filter.HttpPutFormContentFilter 引入版本 org.springframework.web.filter.HttpPutFormContentFilter 由 Spring Framework 3.1 版本引入，分发在 org.springframework:spring-web 中。 使用场景 通常 Web 场景中，浏览器通过 HTTP GET 或者 POST 请求 提交 Form 数据，而非浏览 器客户端（如应用程序）可能通过 HTTP PUT 请求来实现。 当 HTTP 请求头Content-Type 为 application/x-www-form-urlencoded 时 ，Form 数据被 encoded。而 Servlet 规范中， ServletRequest.getParameter*()方法仅对 HTTP POST 方法支持请求参数的获取，如： 123456789101112131415public intetfacce ServletRequest &#123; ...... public String getParameter(String name); public Enumeration&lt;String&gt; getParameterNames(); public String[] getParameterValues(String name); public Map&lt;String, String[]&gt; getParameterMap(); ......&#125; 故 以上方法无法支持 HTTP PUT 或 HTTP PATCH请求方法（请求头Content-Type为application/x-www-form-urlencoded）。 org.springframework.web.filter.HttpPutFormContentFilter 正是这种场景的解 决方案。 Spring Boot 默认场景下，将 org.springframework.web.filter.HttpPutFormContentFilter 被 org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration 自动 装配，以下为 Spring Boot 1.4.1.RELEASE 以及更好版本定义（可能存在一定的差异）： 12345678910111213141516171819202122@Configuration@ConditionalOnWebApplication@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurerAdapter.class &#125;)@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, ValidationAutoConfiguration.class &#125;)public class WebMvcAutoConfiguration &#123; ...... @Bean @ConditionalOnMissingBean(HttpPutFormContentFilter.class) @ConditionalOnProperty(prefix = "spring.mvc.formcontent.putfilter", name = "enabled", matchIfMissing = true) public OrderedHttpPutFormContentFilter httpPutFormContentFilter() &#123; return new OrderedHttpPutFormContentFilter(); &#125; ......&#125; 综上所述，org.springframework.web.filter.HttpPutFormContentFilter 在绝大 多数 Web 使用场景下为非必须组件。 配置项 如果应用依赖 Spring Boot 版本 为 1.4.1.RELEASE 以及更高的版本，可通过如下配置， 进行将 org.springframework.web.filter.HttpPutFormContentFilter 关闭： 1spring.mvc.formcontent.putfilter.enabled = false org.springframework.web.filter.HiddenHttpMethodFilter 引入版本 org.springframework.web.filter.HiddenHttpMethodFilter由 Spring Framework 3.0 版本引入，分发在 org.springframework:spring-web 中。 使用场景 当 Web 服务端同一资源（URL）提供了多请求方法的实现，例如 URI ：/update 提供了 HTTP POST 以及 HTTP PUT 实现），通常 Web 场景中，浏览器仅支持 HTTP GET或者 POST 请求方法，这样的话，浏览器无法发起 HTTP PUT 请求。 为了浏览器可以消费 HTTP PUT 资源， 需要在服务端将 HTTP POST转化成 HTTP PUT 请求，为了解决这类问题，Spring 引入 org.springframework.web.filter.HiddenHttpMethodFilter Web 组件。 当浏览器 发起 HTTP POST 请求时，可通过增加请求参数（默认参数名称：”method”） 的方式，进行HTTP 请求方法切换， org.springframework.web.filter.HiddenHttpMethodFilter 获取参数”method” 值后，将参数值作为 HttpServletRequest#getMethod()的返回值，给后续 Servlet实现使用。 出于通用性的考虑，org.springframework.web.filter.HiddenHttpMethodFilter通过调用 #setMethodParam(String) 方法，来修改转换请求方法的参数名称。 Spring Boot 默认场景下，将 org.springframework.web.filter.HttpPutFormContentFilter 被 org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration 自动 装配，以下为 Spring Boot 1.4.1.RELEASE 以及更好版本定义（可能存在一定的差异）： 123456789101112131415161718192021@Configuration@ConditionalOnWebApplication@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurerAdapter.class &#125;)@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, ValidationAutoConfiguration.class &#125;)public class WebMvcAutoConfiguration &#123; ...... @Bean @ConditionalOnMissingBean(HiddenHttpMethodFilter.class) public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() &#123; return new OrderedHiddenHttpMethodFilter(); &#125; ......&#125; 综上所述，org.springframework.web.filter.HiddenHttpMethodFilter 也是特殊 场景下所需，故可以关闭之。 配置项 按目前最新的 Spring Boot 1.5.2.RELEASE 版本中实现，也没有提供类似 spring.mvc.formcontent.putfilter.enabled 这样的配置项关闭，无法关闭。]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈摘要、数字签名、数字证书]]></title>
    <url>%2F2018%2F12%2F01%2F%E6%B5%85%E8%B0%88%E6%91%98%E8%A6%81%E3%80%81%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E3%80%81%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[CIA 原则所有互联网企业都要建立一套完整的信息安全体系，遵循 CIA 原则，即保密性（Confidentiality）、完整性（Integrity）、可用性（Availability） 保密性。对需要保护的数据（比如用户的私人信息等）进行保密操作，无论是存储还是传输，都要保证用户数据及相关资源的安全。比如，在存储文件时会进行加密，在数据传输中也会通过各种编码方式进行加密等。在实际编程中，通常使用加密等手段保证数据的安全。黑客不只是外部的，有可能从内部窃取数据，所以现在大多数企业的用户名敏感信息都不是以明文存储的，避免数据管理员在某些利益的驱动下，直接托库下载。数据泄露可能导致黑客进一步利用这些数据进行网站攻击，造成企业的巨大损失。 上面这段介绍是出自《码出高效：Java开发手册》 初遇摘要，电子合同，电子签章之前了解过电子合同，电子签章相关的业务，虽然只有半天，但是还是很感激有机会去了解不同公司业务的一些核心内容。 现在做的业务在对接银行存管相关业务，需要对报文的参数进行数字签名；以及后续的电子合同相关，也是有相关的数字签名 1、摘要一段信息，经过摘要算法得到一串哈希值，就是摘要(dijest)。 信息是任意长度，而摘要是定长。 摘要算法有MD5、SHA1、SHA256、SHA512等，算法把无限的映射成有限，因此可能会有碰撞（两个不同的信息，算出的摘要相同） 摘要不同于加密算法，因为不存在解密，只不过从摘要反推原信息很难（可以认为能加密但无法解密还原，但可以用于比对）。类比到人的话：时间一直向前走 ，我没有办法从现在的你身上反观到你过去的样子，也没法从现在的他身上反观到他过去的样子……但你们现在的样子依然有作用，那就是在于“是否相同”：我可以通过比对现在的你和现在的他是否相同，来判断过去的你和他是否相同，而无需知道过去的你和过去的他具体是什么样子。 摘要相同，信息一定相同。如果两张图片的md5相同，说明图片完全一样，不需要重复爬取。 利用这个特点，摘要还可以用于应用在网站后台数据库中，用于比对用户的输入密码和预设密码是否相同。这里都无需关心密码本身是什么，关注的是密码是否相同，而密码是否相同取决于摘要是否相同，所以问题转化成了摘要是否相同。将用户密码的摘要而不是密码本身保存在数据库中，因为反推很难，所以真实密码是保密的……非要暴露的话，也是通过比对而不是反推。 2、非对称加密算法算法重要的概念是公钥和私匙。 先有私钥，再用函数生成公钥。公钥包含了私钥的信息，但也掺杂了其他随机变量，因此不能反推。 私匙不要泄露，公钥要告诉和你通信的对方。公钥加密，只有对应私钥能解开（保密）；私钥加密，只有对应公钥能解开（不可抵赖）。 具体有两种情形： （1）对方用你的公钥加密信息，你收到后用私钥解开。 只有你有私钥，所以只有你能解开，换句话说，有私钥才能看到信息，很安全。 （2）你拿私钥加密信息，对方收到后用你的公钥解开。 公钥是公开的，所以其他人也可以看到你的信息，不保密。 私钥加密，只有对应公钥能解开。既然用你的公钥能解开，说明加密一定是你的私钥。私钥只有你有，所以一定是你发送的，你不可抵赖。 3、数字签名摘要经过加密，就得到数字签名 数字签名在发送方，分两步：（1）从内容算摘要（哈希算法）（2）从摘要明文到摘要密文，也称数字签名（发送方私钥+加密算法） 数字签名验证在接收方，分两步：（1）从摘要密文（数字签名）到摘要明文（发送方公钥+解密算法）（2）从收到的内容当场计算摘要（哈希算法），与（1）的结果比对是否一致 如果一致，可以说明两点： （1）内容未被篡改（摘要一致） （2）内容只能是私钥拥方发送，不可抵赖（密文能够用对方的公钥解开） 然后单独想一下， （1）为什么要对摘要加密后再发送？为什么不直接发摘要？摘要不可以逆向推导原文，摘要泄露了也没事…… 答：摘要泄露是没事，但不怀好意的人的目的可能并不在想要窃听你发送了什么，而是想伪造发送的内容让你相信。通过同时替换摘要和内容，很简单就实现了。所以摘要需要经过加密，不怀好意的人没有私钥，无法完成加密。或者说你收到的东西只要能用公钥解密，你才认为这个东西确实是对应私钥持有者完成的。这叫做当事人不可抵赖，同时别人无法仿冒。（数字签名：不可抵赖+无法仿冒） （2）为什么不直接对内容加密，而是先生成摘要，对摘要加密？ 答：可能是内容很长吧，直接加密算半天！摘要算法可以把无限长的内容输出成长度固定的摘要，再进行加密时间就是可以预估的 4、数字证书上面的一切都很完美，你用公钥能够解密，说明确实是私钥方发送的，你很放心…… 但有没有想过，万一这把公钥本身，就被人做了手脚？？？ 为了保证“公钥”是可信的，数字证书应运而生。 数字证书里有个重要概念，CA,发送方先把自己的公钥给CA，CA对其进行加密得到加密后的发送方公钥（用的是CA的私钥和CA加密算法），也就是CA的数字证书。 注意这里有两个不同的非对称算法（对应2个公钥私钥对），一个算法是发送方加密摘要的，用于生成数字签名；另一个算法是CA加密发送方公钥的，用于生成数字证书。两个算法相互独立，没有必然联系。 发送时不仅发送内容、数字签名，还包含发送方的数字证书。接收方拿到后，首先从数字证书中解密出发送方公钥（用的是CA的公钥和CA解密算法），这个公钥必然是可信的。然后就是和前面一样的流程，拿发送方公钥去解密数字证书，得到摘要；最后比对摘要是否一致。 一个问题：既然数字证书是为了保证发送方公钥不是别人伪造的，那怎么保证“CA”的公钥不是伪造的呢？ 答：CA是第三方机构，CA公钥是公开的，接收方可以跟别人比对（比如在网上查询），因此不可能伪造。但是发送方公钥，接收方是通过通信得到的，收到后无法验证。 【实例1】https 工作流程，基本分为三个阶段：1、认证服务器。浏览器内置一个受信任的CA机构列表，并保存了这些CA机构的证书。第一阶段服务器会提供经CA机构认证颁发的服务器证书，如果签发该证书的CA，存在于浏览器的受信任CA列表中（也就是签发该证书的CA的根证书，能够与客户端中保存的CA根证书比对上），说明这个CA是可信任的，可以保证证书不假。然后，再进一步判断服务器证书中的信息与当前正在访问的网站（域名等）一致，那么浏览器就认为服务端是可信的，并从服务器证书中取得服务器公钥，用于后续流程。否则，浏览器将提示用户，根据用户的选择，决定是否继续。 客户端是否能够信任这个站点的证书，首先取决于客户端程序是否导入了证书颁发者的根证书。 2、协商会话密钥。客户端在认证完服务器，获得服务器的公钥之后，利用该公钥与服务器进行加密通信，协商出两个会话密钥，分别是用于加密客户端往服务端发送数据的客户端会话密钥，用于加密服务端往客户端发送数据的服务端会话密钥。在已有服务器公钥，可以加密通讯的前提下，还要协商两个对称密钥的原因，是因为非对称加密相对复杂度更高，在数据传输过程中，使用对称加密，可以节省计算资源。另外，会话密钥是随机生成，每次协商都会有不一样的结果，所以安全性也比较高。 3、加密通讯。此时客户端服务器双方都有了本次通讯的会话密钥，之后传输的所有Http数据，都通过会话密钥加密。这样网路上的其它用户，将很难窃取和篡改客户端和服务端之间传输的数据，从而保证了数据的私密性和完整性。 客户端是否能够信任这个站点的证书，首先取决于客户端程序是否导入了证书颁发者的根证书。 IE浏览器在验证证书的时候主要从下面三个方面考察，只要有任何一个不满足都将给出警告 证书的颁发者是否在“根受信任的证书颁发机构列表”中 证书是否过期 证书的持有者是否和访问的网站一致 这会儿我正好在装Fiddler。默认Fiddler不对https traffic加密，如果勾选，就会弹出如下对话框，大意是：Fiddler会在https流量收发双方中间，类似代理的角色，为了参与https通信，Fiddler自己也要有一个证书，然后这个证书由一个CA颁发，现在这个CA的根证书需要导入windows，用户需要让windows信任这个CA。 之后是windows的警告：因为在往系统里加一个新的CA根证书，windows并不确定这个根证书是否是真的，所以问你（根证书责任重大，选择相信根证书意味着相信这个CA的一切操作……） 实例2】加密机 个人理解，可能有错。欢迎指正~ 加密机A和加密机B双向通信，没有绝对的客户端和服务端之分。或者更准确地说，每台加密机既是服务端，需要找CA给自己签个签证书；也是客户端，需要提前导入CA根证书，用于识别收到的证书是否是可靠CA签发的（比对收到证书的根证书是否在可靠CA列表中）。CA签发证书的过程，就是对【包括发送方公钥在内的发送方信息】进行加密（用CA加密算法和CA私钥）。因此签出来的证书，在接收方可以被解密得到【包括发送方公钥在内的发送方信息】（用CA解密算法和CA公钥）。 此外，A需要导入B的证书，B需要导入A的证书。 上述准备工作（初始化）完成后，A和B首先建立连接（不涉及应用数据，只是协商一致建立一条加密隧道），其实就是A需要验证现在与我通信的另一端、证书里生成的B，是不是真正的B。这个就依靠B发送自己的证书给A，A收到后首先确认这个证书颁发CA是可靠的（依据CA的根在自己的可靠根列表中），说明证书可信，再从对证书进行解密（CA的公钥+CA解密算法），得到【包括B的公钥在内的B的信息】，据此证明对端就是真正的B，并拿到了B真正的公钥，验证完成。同理，B也要验证对端确实是A，就不再赘述。 互相验证完成后，A与B的链接建立，等待真正的数据收发。之后的加解密，应该就是加密机自己的算法和秘钥了，硬件上是由加密卡完成，加密卡也是加密机最值钱最核心的部件…… （加密机部分纯属个人理解，欢迎指正。有时间我会再带着这个思路去阅读加密机的说明书……）]]></content>
      <categories>
        <category>encrypt</category>
      </categories>
      <tags>
        <tag>digest</tag>
        <tag>digital signature</tag>
        <tag>DC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WireMock 伪造REST服务]]></title>
    <url>%2F2018%2F11%2F04%2FWireMock-%E4%BC%AA%E9%80%A0REST%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[交代背景在工作的过程中，前后端工程师一般都是并行工作的，假如移动端工程师（Android ,ios）、Web工程师（公司主站）需要我后端的一个接口，或者需要知道后端会返回怎样的数据格式时，此时后端可能还在撸逻辑，或者说还在不停的修改逻辑或者重构代码，这个时候就比较尴尬啦！你可能会觉得他们自己就可以模拟相关HTTP接口，REST服务等… 引发问题但是这样做，会有点问题，就是他们每个人都需要模拟这部分代码，并且可能每个人的理解都不相同，并且每个人做出的接口响应格式和传输格式，与后端设计出现的又有部分出路。 增加前端，移动端工程师的工作量 因为可能的理解偏差或者个人风格不同，设计出来的接口和后端的接口又不相同，增加继续沟通成本 假如项目需要重构或者修改部分逻辑，导致前段后端又需要重新设计 归根到底，解决这些问题最核心的原因就是后端控制；可以先设计REST服务（模拟服务），共前端，移动端开发者调用，后端也可以继续围绕着设计出的模拟服务去实现，一举两得。 WireMock 登场WireMock网站 downloaded the standalone JAR 启动服务12345678910111213141516171819202122➜ ~ cd ~/wiremock➜ wiremock lltotal 24656-rw-r--r--@ 1 niuhesm staff 12M Nov 4 19:05 wiremock-standalone-2.19.0.jar➜ wiremock java -jar wiremock-standalone-2.19.0.jar --port 9999SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".SLF4J: Defaulting to no-operation (NOP) logger implementationSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details. /$$ /$$ /$$ /$$ /$$ /$$| $$ /$ | $$|__/ | $$$ /$$$ | $$| $$ /$$$| $$ /$$ /$$$$$$ /$$$$$$ | $$$$ /$$$$ /$$$$$$ /$$$$$$$| $$ /$$| $$/$$ $$ $$| $$ /$$__ $$ /$$__ $$| $$ $$/$$ $$ /$$__ $$ /$$_____/| $$ /$$/| $$$$_ $$$$| $$| $$ \__/| $$$$$$$$| $$ $$$| $$| $$ \ $$| $$ | $$$$$$/| $$$/ \ $$$| $$| $$ | $$_____/| $$\ $ | $$| $$ | $$| $$ | $$_ $$| $$/ \ $$| $$| $$ | $$$$$$$| $$ \/ | $$| $$$$$$/| $$$$$$$| $$ \ $$|__/ \__/|__/|__/ \_______/|__/ |__/ \______/ \_______/|__/ \__/port: 9999enable-browser-proxying: falsedisable-banner: falseno-request-journal: falseverbose: false 编写MockServer代码Maven 配置12345678&lt;!-- https://mvnrepository.com/artifact/com.github.tomakehurst/wiremock --&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.tomakehurst&lt;/groupId&gt; &lt;artifactId&gt;wiremock&lt;/artifactId&gt; &lt;version&gt;2.19.0&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 核心代码123456789101112131415161718192021public class MockServer &#123; /** * @param args * @throws IOException */ public static void main(String[] args) throws IOException &#123; configureFor(8062); removeAllMappings(); mock("/order/1", "01"); mock("/order/2", "02"); &#125; private static void mock(String url, String file) throws IOException &#123; ClassPathResource resource = new ClassPathResource("mock/response/" + file + ".txt"); String content = StringUtils.join(FileUtils.readLines(resource.getFile(), "UTF-8").toArray(), "\n"); stubFor(get(urlPathEqualTo(url)).willReturn(aResponse().withBody(content).withStatus(200))); &#125;&#125; 响应格式列表1234&#123; "id":1, "type":"C"&#125; 1234&#123; "id":2, "type":"B"&#125;]]></content>
      <categories>
        <category>Mock</category>
      </categories>
      <tags>
        <tag>wiremock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins 搭建自动化测试环境]]></title>
    <url>%2F2018%2F10%2F28%2FJenkins-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[Jenkins 安装官网下载war官网下载 Download Jenkins 2.148 for: jenkins.war 安装并启动服务123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596Last login: Sun Oct 28 16:16:56 on ttys002dyld: Library not loaded: /usr/local/opt/gdbm/lib/libgdbm.4.dylib Referenced from: /usr/local/bin/zsh Reason: image not foundzsh: abort➜ ~ /Users/niuhesm/resouces/Jekins➜ Jekins lsjenkins.war➜ Jekins lltotal 148272-rw-r--r--@ 1 niuhesm staff 72M 10 28 17:03 jenkins.war➜ Jekins clear➜ Jekins lsjenkins.war➜ Jekins java -jar jenkins.warRunning from: /Users/niuhesm/resouces/Jekins/jenkins.warwebroot: $user.home/.jenkins十月 28, 2018 5:10:56 下午 org.eclipse.jetty.util.log.Log initialized信息: Logging initialized @621ms to org.eclipse.jetty.util.log.JavaUtilLog十月 28, 2018 5:10:57 下午 winstone.Logger logInternal信息: Beginning extraction from war file十月 28, 2018 5:10:58 下午 org.eclipse.jetty.server.handler.ContextHandler setContextPath警告: Empty contextPath十月 28, 2018 5:10:58 下午 org.eclipse.jetty.server.Server doStart信息: jetty-9.4.z-SNAPSHOT; built: 2018-08-30T13:59:14.071Z; git: 27208684755d94a92186989f695db2d7b21ebc51; jvm 1.8.0_121-b13十月 28, 2018 5:10:59 下午 org.eclipse.jetty.webapp.StandardDescriptorProcessor visitServlet信息: NO JSP Support for /, did not find org.eclipse.jetty.jsp.JettyJspServlet十月 28, 2018 5:10:59 下午 org.eclipse.jetty.server.session.DefaultSessionIdManager doStart信息: DefaultSessionIdManager workerName=node0十月 28, 2018 5:10:59 下午 org.eclipse.jetty.server.session.DefaultSessionIdManager doStart信息: No SessionScavenger set, using defaults十月 28, 2018 5:10:59 下午 org.eclipse.jetty.server.session.HouseKeeper startScavenging信息: node0 Scavenging every 660000msJenkins home directory: /Users/niuhesm/.jenkins found at: $user.home/.jenkins十月 28, 2018 5:11:01 下午 org.eclipse.jetty.server.handler.ContextHandler doStart信息: Started w.@2187fff7&#123;Jenkins v2.148,/,file:///Users/niuhesm/.jenkins/war/,AVAILABLE&#125;&#123;/Users/niuhesm/.jenkins/war&#125;十月 28, 2018 5:11:01 下午 org.eclipse.jetty.server.AbstractConnector doStart信息: Started ServerConnector@660e9100&#123;HTTP/1.1,[http/1.1]&#125;&#123;0.0.0.0:8080&#125;十月 28, 2018 5:11:01 下午 org.eclipse.jetty.server.Server doStart信息: Started @5588ms十月 28, 2018 5:11:01 下午 winstone.Logger logInternal信息: Winstone Servlet Engine v4.0 running: controlPort=disabled十月 28, 2018 5:11:03 下午 jenkins.InitReactorRunner$1 onAttained信息: Started initialization十月 28, 2018 5:11:03 下午 jenkins.InitReactorRunner$1 onAttained信息: Listed all plugins十月 28, 2018 5:11:05 下午 jenkins.InitReactorRunner$1 onAttained信息: Prepared all plugins十月 28, 2018 5:11:05 下午 jenkins.InitReactorRunner$1 onAttained信息: Started all plugins十月 28, 2018 5:11:05 下午 jenkins.InitReactorRunner$1 onAttained信息: Augmented all extensions十月 28, 2018 5:11:07 下午 jenkins.InitReactorRunner$1 onAttained信息: Loaded all jobs十月 28, 2018 5:11:07 下午 hudson.model.AsyncPeriodicWork$1 run信息: Started Download metadata十月 28, 2018 5:11:09 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh信息: Refreshing org.springframework.web.context.support.StaticWebApplicationContext@315668fb: display name [Root WebApplicationContext]; startup date [Sun Oct 28 17:11:09 CST 2018]; root of context hierarchy十月 28, 2018 5:11:09 下午 org.springframework.context.support.AbstractApplicationContext obtainFreshBeanFactory信息: Bean factory for application context [org.springframework.web.context.support.StaticWebApplicationContext@315668fb]: org.springframework.beans.factory.support.DefaultListableBeanFactory@2c5f65b3十月 28, 2018 5:11:09 下午 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons信息: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@2c5f65b3: defining beans [authenticationManager]; root of factory hierarchy十月 28, 2018 5:11:09 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh信息: Refreshing org.springframework.web.context.support.StaticWebApplicationContext@48bbdcc5: display name [Root WebApplicationContext]; startup date [Sun Oct 28 17:11:09 CST 2018]; root of context hierarchy十月 28, 2018 5:11:09 下午 org.springframework.context.support.AbstractApplicationContext obtainFreshBeanFactory信息: Bean factory for application context [org.springframework.web.context.support.StaticWebApplicationContext@48bbdcc5]: org.springframework.beans.factory.support.DefaultListableBeanFactory@53866d40十月 28, 2018 5:11:09 下午 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons信息: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@53866d40: defining beans [filter,legacy]; root of factory hierarchy十月 28, 2018 5:11:09 下午 jenkins.install.SetupWizard init信息:***************************************************************************************************************************************************************************************Jenkins initial setup is required. An admin user has been created and a password generated.Please use the following password to proceed to installation:cc2e5c2985cc437e8cd33d1ea7e37210This may also be found at: /Users/niuhesm/.jenkins/secrets/initialAdminPassword***************************************************************************************************************************************************************************************十月 28, 2018 5:12:27 下午 hudson.model.AsyncPeriodicWork$1 run信息: Finished Download metadata. 80,614 ms十月 28, 2018 5:14:01 下午 hudson.model.UpdateSite updateData信息: Obtained the latest update center data file for UpdateSource default十月 28, 2018 5:14:02 下午 jenkins.InitReactorRunner$1 onAttained信息: Completed initialization十月 28, 2018 5:14:02 下午 hudson.UDPBroadcastThread run信息: Cannot listen to UDP port 33,848, skipping: java.net.SocketException: Can't assign requested address十月 28, 2018 5:14:02 下午 hudson.WebAppMain$3 run信息: Jenkins is fully up and running 查看密码登录1234➜ ~ vim /Users/niuhesm/.jenkins/secrets/initialAdminPassword➜ ~ cat /Users/niuhesm/.jenkins/secrets/initialAdminPasswordcc2e5c2985cc437e8cd33d1ea7e37210➜ ~ 选择安装方式12341. Install suggested plugins2. Select plugins to install选择第一种，推荐的安装模式，安装需要一段时间 创建用户填写相关的用户信息（smniuhe,smniuhe），点击 Save and Continue Instance ConfigurationJenkins URL: http://localhost:8080/ ，点击 Save and Finish Start using Jenkins 插件安装123系统管理》插件管理》选择available》filter过滤插件Rebuilder 用于构建插件safe restart 安全重启插件 基础设置1234全局安全配置》Authorization》安全矩阵add user or groups... , 输入smniuhe,授予所有权限管理用户》添加用户创建一个 guest 用户，授予所有权限(去除 administer) 应用服务器linux 系统准备1234567891011121314151617181920212223242526272829303132333435363738394041421. 确认ip地址2. 确认登录用户名、密码3. 确定启动了ssh服务4. 确定防火墙是否关闭## 查看ip地址[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 172.19.106.154 netmask 255.255.240.0 broadcast 172.19.111.255 ether 00:16:3e:06:03:ef txqueuelen 1000 (Ethernet) RX packets 7782177 bytes 1405512494 (1.3 GiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 7414005 bytes 1016904340 (969.7 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 loop txqueuelen 1 (Local Loopback) RX packets 5404745 bytes 341429566 (325.6 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 5404745 bytes 341429566 (325.6 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0## 查看 ssh 服务是否启动[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# netstat -anp|grep :22tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1804/sshdtcp 0 0 172.19.106.154:22 220.175.70.154:30021 ESTABLISHED 31085/sshd: root@pttcp 0 36 172.19.106.154:22 117.166.23.61:13830 ESTABLISHED 31827/sshd: root@pt## 如果没有启动，该命令是启动 ssh 服务[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# service sshd startRedirecting to /bin/systemctl start sshd.service## 检查防火墙的状态[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# service iptables statusRedirecting to /bin/systemctl status iptables.serviceUnit iptables.service could not be found.[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# firewall-cmd --statenot running## 停止 firewall[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# systemctl stop firewalld.service## 静止 firewall 开机启动[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# systemctl disable firewalld.service 安装Java环境1[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# yum install java 安装Git12345[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# yum install git[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# git versiongit version 1.8.3.1[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# git config --global user.name "smniuhe"[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# git config --global user.email "smniuhe@163.com" SSH证书1234[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# ssh-keygen -t rsa -C "smniuhe@163.com"[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# cd ~/.ssh/[root@iZuf6iq8e7ya9v3ix71k0pZ .ssh]# lsauthorized_keys id_rsa id_rsa.pub Github关联linux服务器1234567891011121314151617##Github上 SSH keys Add keyTitle LinuxEnvKey 如下[root@iZuf6iq8e7ya9v3ix71k0pZ .ssh]# cat id_rsa.pubssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDR0r/R1UdT9BRr8TsjONLmf8Kj0M6G/6fbGbD7ChHs1EAPFRjxSpJhl0noIKFdQYg9kJ8PpIkj6fIslXHvpYupqrDKGZ1l4xAJt+u1iUQsLEfv7XrarL6I1V3+nWowsAO1CpIdxS41A4lKZ34snt5IG55BVm+Gnq3puD59qrE4iNwfV1zfZRwDdjHI7/x8TY9PdHHSQNEk4GesUF9y3ynUnxMIwRxIui9c5D+iLaw2RgMLb0Y8Zh7F/pQ2uUYkvbA7Fz0N/883201BrWGFbyqn19geZqfvF6enKipa6H0whW6uM1KPkMIur3HTvRKOTdzsvP5jiknGAwufkMCQVsjr smniuhe@163.com##验证centos是否授信github[root@iZuf6iq8e7ya9v3ix71k0pZ .ssh]# ssh git@github.comThe authenticity of host 'github.com (192.30.253.113)' can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.RSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'github.com,192.30.253.113' (RSA) to the list of known hosts.PTY allocation request failed on channel 0Hi SmNiuhe! You've successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed.[root@iZuf6iq8e7ya9v3ix71k0pZ .ssh]# 安装并配置Maven1234567891011121314151617181920212223242526272829303132333435http://maven.apache.org/ -》Download -》Binary zip archive apache-maven-3.5.4-bin.zip复制其地址http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.zip[root@iZuf6iq8e7ya9v3ix71k0pZ .ssh]# wget http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.zip--2018-10-28 22:09:35-- http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.zipResolving mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)... 101.6.8.193, 2402:f000:1:408:8100::1Connecting to mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)|101.6.8.193|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 9001022 (8.6M) [application/zip]Saving to: 'apache-maven-3.5.4-bin.zip'100%[====================================================================================================================================&gt;] 9,001,022 29.3MB/s in 0.3s2018-10-28 22:09:36 (29.3 MB/s) - 'apache-maven-3.5.4-bin.zip' saved [9001022/9001022][root@iZuf6iq8e7ya9v3ix71k0pZ .ssh]# cd ~[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# unzip apache-maven-3.5.4-bin.zip-bash: unzip: 未找到命令[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# yum install -y unzip zip[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# vim /etc/profile## 配置文件的末端添加如下参数，相当于windows下配置环境变量中的path参数export MAVEN_HOME=/root/apache-maven-3.5.4export PATH=$MAVEN_HOME/bin:$PATH## 加载下刚配置的文件[root@iZuf6iq8e7ya9v3ix71k0pZ apache-maven-3.5.4]# . /etc/profile## 验证maven配置是否生效[root@iZuf6iq8e7ya9v3ix71k0pZ apache-maven-3.5.4]# mvn -versionApache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)Maven home: /root/apache-maven-3.5.4Java version: 1.8.0_111, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8.0_111/jreDefault locale: en_US, platform encoding: ANSI_X3.4-1968OS name: "linux", version: "3.10.0-514.26.2.el7.x86_64", arch: "amd64", family: "unix"[root@iZuf6iq8e7ya9v3ix71k0pZ apache-maven-3.5.4]# 安装并配置Tomcat1234567891011121314151617181920212223242526272829303132[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-9/v9.0.12/bin/apache-tomcat-9.0.12.zip[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# lltotal 10284-rw-r--r-- 1 root root 10520486 Sep 5 06:35 apache-tomcat-9.0.12.zipdrwxr-xr-x 10 root root 4096 Apr 4 2018 tomcat-8081drwxr-xr-x 9 root root 4096 Apr 4 2018 tomcat-8082[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# unzip apache-tomcat-9.0.12.zip[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# lltotal 10288drwxr-xr-x 9 root root 4096 Sep 4 23:15 apache-tomcat-9.0.12-rw-r--r-- 1 root root 10520486 Sep 5 06:35 apache-tomcat-9.0.12.zipdrwxr-xr-x 10 root root 4096 Apr 4 2018 tomcat-8081drwxr-xr-x 9 root root 4096 Apr 4 2018 tomcat-8082## 赋予执行权限[root@iZuf6iq8e7ya9v3ix71k0pZ apache-tomcat-9.0.12]# chmod a+x -R *chomd 修改权限的命令a+x 赋予登录的所有人，可执行权限-R 表示当前路径和子路径* 表示所有问题## 更换端口，8090[root@iZuf6iq8e7ya9v3ix71k0pZ apache-tomcat-9.0.12]# vim conf/server.xml## 启动验证Tomcat[root@iZuf6iq8e7ya9v3ix71k0pZ apache-tomcat-9.0.12]# ps -ef|grep tomcatroot 32153 1 23 22:52 pts/0 00:00:02 /usr/bin/java -Djava.util.logging.config.file=/usr/local/tomcat/apache-tomcat-9.0.12/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /usr/local/tomcat/apache-tomcat-9.0.12/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-9.0.12/bin/tomcat-juli.jar -Dcatalina.base=/usr/local/tomcat/apache-tomcat-9.0.12 -Dcatalina.home=/usr/local/tomcat/apache-tomcat-9.0.12 -Djava.io.tmpdir=/usr/local/tomcat/apache-tomcat-9.0.12/temp org.apache.catalina.startup.Bootstrap startroot 32185 31829 0 22:52 pts/0 00:00:00 grep --color=auto tomcat[root@iZuf6iq8e7ya9v3ix71k0pZ apache-tomcat-9.0.12]# lsof -i:8090COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEjava 32153 root 49u IPv4 3994555 0t0 TCP *:8090 (LISTEN)## 浏览器验证http://smniuhe.com:8090/## 新建节点 Linux注册到 Jenkins 上新建节点12345678系统管理》节点管理》New NodeNode name: TestEnv选择固定节点Description：这是一台测试环境的Linux主机Remote root directory：/root/.jenkinsLaunch method：Launch agent agents via SSH主机：smniuhe.comCredintials：xxxxx 启动节点，验证123456789101112131415161718192021222324252627282930313233343536373839点击当前节点，再返回到节点列表，可以查看linux主机的相关信息## 验证进入主页》New 任务Enter an item name：TestTask选择：构建一个自由风格的软件项目点击Ok，选中 `Restrict where this project can be runLabel Expression： TestEnv(表示只能在这个节点上运行)Build》执行 shellCommand: ifconfig点击保存立即构建点击 Build History&gt;#1点击 Console Output## 验证成功 shell 命令生效由用户 smniuheQm 启动在远程节点 TestEnv 上构建 在工作空间 /root/.jenkins/workspace/TestTask 中[TestTask] $ /bin/sh -xe /tmp/jenkins403614120976103060.sh+ ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 172.19.106.154 netmask 255.255.240.0 broadcast 172.19.111.255 ether 00:16:3e:06:03:ef txqueuelen 1000 (Ethernet) RX packets 7834286 bytes 1466452360 (1.3 GiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 7436834 bytes 1020460157 (973.1 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 loop txqueuelen 1 (Local Loopback) RX packets 5406822 bytes 341559418 (325.7 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 5406822 bytes 341559418 (325.7 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0Finished: SUCCESS 部署应用介绍与前期准备12新建一个项目，Push 到 Github 上复制url: git@github.com:SmNiuhe/springboot-jenkins.git 自动化部署任务开发123456789101112131415161718git 同步最新代码 =》 maven 打包 =》 停止 Tomcat =》 部署应用 =》 启动tomcat =》验证结果创建Jenkins部署任务创建Jenkins任务 =》填写Server信息 =》配置git参数 =》填写构建语句，实际部署测试环境1. 创建任务2. 填写相关信息勾选 `Restrict where this project can be run``Label Expression` 输入并选择 `TestEnv`3. 配置git参数Source Code Management 选择 `Git`Repository URL `git@github.com:SmNiuhe/springboot-jenkins.git`Additional Behaviours `add按钮` `Check out to a sub-directory`Local subdirectory for repo `springboot-jenkins`Build `add build step` `执行shell`Command 脚本命令如下 || 123456789BUILD_ID=DONTKILLME. /etc/profile#配置运行参数export PROJ_PATH=`pwd`export TOMCAT_APP_PATH=/usr/local/tomcat/apache-tomcat-9.0.12sh $PROJ_PATH/springboot-jenkins/deploy.sh 1234567891011121314151617181920212223242526272829303132运行部署任务执行Jenkins部署任务 =》 确定执行结果成功 =》 打开浏览器访问部署应用程序 =》确定发布结果的正确性单机立即构建http://smniuhe.com:8090/ 出现了 &#123;"name":"zhangsan","age":"15"&#125;nice success ！[root@iZuf6iq8e7ya9v3ix71k0pZ /]# find -name springboot-jenkins./root/.jenkins/workspace/DeploySpringboot-jenkins/springboot-jenkins./root/.m2/repository/com/smniuhe/springboot-jenkins./root/projects/springboot-jenkins./usr/local/tomcat/apache-tomcat-9.0.12/webapps/ROOT/META-INF/maven/com.smniuhe/springboot-jenkins[root@iZuf6iq8e7ya9v3ix71k0pZ /]# cd /root/.m2/repository/com/smniuhe/springboot-jenkins[root@iZuf6iq8e7ya9v3ix71k0pZ springboot-jenkins]# lltotal 8drwxr-xr-x 2 root root 4096 Oct 29 23:51 1.0-rw-r--r-- 1 root root 305 Oct 30 00:03 maven-metadata-local.xml[root@iZuf6iq8e7ya9v3ix71k0pZ springboot-jenkins]# cd 1.0[root@iZuf6iq8e7ya9v3ix71k0pZ 1.0]# lltotal 15868-rw-r--r-- 1 root root 198 Oct 30 00:03 _remote.repositories-rw-r--r-- 1 root root 2393 Oct 30 00:03 springboot-jenkins-1.0.pom-rw-r--r-- 1 root root 16237933 Oct 30 00:03 springboot-jenkins-1.0.war[root@iZuf6iq8e7ya9v3ix71k0pZ 1.0]# cd /root/.jenkins/workspace/DeploySpringboot-jenkins/springboot-jenkins[root@iZuf6iq8e7ya9v3ix71k0pZ springboot-jenkins]# lltotal 32-rw-r--r-- 1 root root 1026 Oct 29 23:32 deploy.sh-rwxr-xr-x 1 root root 6468 Oct 29 23:32 mvnw-rw-r--r-- 1 root root 4994 Oct 29 23:32 mvnw.cmd-rw-r--r-- 1 root root 2393 Oct 30 00:03 pom.xmldrwxr-xr-x 4 root root 4096 Oct 29 23:32 srcdrwxr-xr-x 10 root root 4096 Oct 30 00:03 target[root@iZuf6iq8e7ya9v3ix71k0pZ springboot-jenkins]#]]></content>
      <categories>
        <category>environment</category>
      </categories>
      <tags>
        <tag>Jekins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[焦油坑，没有银弹]]></title>
    <url>%2F2018%2F10%2F07%2F%E7%84%A6%E6%B2%B9%E5%9D%91%2C%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9%2F</url>
    <content type="text"><![CDATA[没事就多聚聚，反正也是不归路我总算体会到了, 以前那本我只愿意抬一眼看看封面那宛如动物世界一般的图片的&lt;&lt;人月神化&gt;&gt;. 从现在体会开来软件开发就是如此, 一个焦油坑. 没有银弹, 就看有人否让我们不越陷越深而已. 别期望写出令自己可以满意的代码, 除非你有充足的时间可以去每天涂涂改改. 面对前辈留下的心血, 我们接过他们的枪(冠冕堂皇点是, 说穿就是烂滩子), 理解多个人的思想, 最后才发觉每个人思想不统一, 他们之间的思想又可以排列组合出不同的思想. 最后发觉自己在那焦油坑里又陷下去一点. 接着把能骂的能发泄的话都说出来,吃着instant food做完最大的补救, 然后同样的结局和场景会发生在接过你的烂摊子的那个人身上. [終わりなき旅](https://junchu25.wordpress.com/)地址 microservice对于一个新事物的诞生，本能地套用已有的知识。特别是一个并不简单的东西，这算是一种高效的入门方法。微服务架构其实相当复杂，我是分成好几个阶段理解。 第一阶段，微服务架构就是去掉了ESB的SOA架构，只不过是通信的方式和结构变了。对于初级的使用者而言，这样理解没有太大问题。 第二阶段，没有了ESB，原本很多由ESB组件做的事儿，转到服务的提供者和调用者这里了。他们需要考虑服务的拆分粒。大体仍然算是SOA架构。 第三阶段，随着服务的数量大幅增加，服务的管理越来越困难，此时DevOps出现了。这个阶段的微服务架构，已经是跟SOA架构完全不同的东西了。 从传统架构，转向微服务架构。 建设好基础设施，RPC、服务治理、日志、监控、持续集成、持续部署、运维自动化是基本的，其它包括服务编排、分布式追踪等。 要逐步演进和迭代，不要过于激进，更不要拆分过细，拆分的粒度，要与团队的架构相互匹配。（康威定律） 微服务与数据库方面，是个很大的难点，可以深入了解下领域驱动设计，做好领域建模，特别是数据库要随着服务一起拆分。]]></content>
      <tags>
        <tag>银弹</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ安装和详解]]></title>
    <url>%2F2018%2F09%2F11%2FRabbitMQ%E5%AE%89%E8%A3%85%E5%92%8C%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[RabbitMQ介绍RabbitMQ是实现AMQP（高级消息队列协议）的消息中间件的一种，最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。RabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。 AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。 RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。 RabbitMQ Mac 安装123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293➜ ~ brew install rabbitmqUpdating Homebrew...==&gt; Auto-updated Homebrew!Updated 3 taps (homebrew/cask, homebrew/core, phinze/cask).==&gt; New Formulaeperu skopeo ucloud==&gt; Updated Formulaegit ✔ cmdshelf imagemagick phpunitvim ✔ double-conversion imagemagick@6 pqivzsh ✔ eslint kubernetes-cli pulumiactivemq fauna-shell kustomize rcloneafflib folly libimobiledevice ripgrepannie fonttools libphonenumber swiftformatansible geoipupdate libspectre terragruntapache-drill ghostscript lnav the_platinum_searcherapktool glm logentries torat-spi2-atk gnu-indent mariadb@10.1 upxatk goreleaser mdcat vaultatomicparsley grafana media-info watchexecaws-okta grunt-cli mongodb@3.4 webpackawscli gutenberg mps-youtube wireguard-toolsbwfmetaedit handbrake msgpack wskdeploychronograf harfbuzz nano xmountcloc hlint node@8 youtube-dlcmake homebank pdfsandwich==&gt; Deleted Formulaellvm@3.7==&gt; Installing dependencies for rabbitmq: jpeg, libpng, libtiff, wxmac, erlang==&gt; Installing rabbitmq dependency: jpeg==&gt; Downloading https://homebrew.bintray.com/bottles/jpeg-9c.sierra.bottle.tar.gz######################################################################## 100.0%==&gt; Pouring jpeg-9c.sierra.bottle.tar.gz🍺 /usr/local/Cellar/jpeg/9c: 21 files, 724.6KB==&gt; Installing rabbitmq dependency: libpng==&gt; Downloading https://homebrew.bintray.com/bottles/libpng-1.6.35.sierra.bottle.tar.gz######################################################################## 100.0%==&gt; Pouring libpng-1.6.35.sierra.bottle.tar.gz🍺 /usr/local/Cellar/libpng/1.6.35: 26 files, 1.2MB==&gt; Installing rabbitmq dependency: libtiff==&gt; Downloading https://homebrew.bintray.com/bottles/libtiff-4.0.9_4.sierra.bottle.tar.gz######################################################################## 100.0%==&gt; Pouring libtiff-4.0.9_4.sierra.bottle.tar.gz🍺 /usr/local/Cellar/libtiff/4.0.9_4: 246 files, 3.5MB==&gt; Installing rabbitmq dependency: wxmac==&gt; Downloading https://homebrew.bintray.com/bottles/wxmac-3.0.4_1.sierra.bottle.tar.gz######################################################################## 100.0%==&gt; Pouring wxmac-3.0.4_1.sierra.bottle.tar.gz🍺 /usr/local/Cellar/wxmac/3.0.4_1: 813 files, 23.8MB==&gt; Installing rabbitmq dependency: erlang==&gt; Downloading https://homebrew.bintray.com/bottles/erlang-21.0.8.sierra.bottle.tar.gz######################################################################## 100.0%==&gt; Pouring erlang-21.0.8.sierra.bottle.tar.gz==&gt; CaveatsMan pages can be found in: /usr/local/opt/erlang/lib/erlang/manAccess them with `erl -man`, or add this directory to MANPATH.==&gt; Summary🍺 /usr/local/Cellar/erlang/21.0.8: 5,668 files, 271.7MB==&gt; Installing rabbitmq==&gt; Downloading https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.7/rabbitmq-server-generic-unix-3.7.7######################################################################## 100.0%==&gt; /usr/bin/unzip -qq -j /usr/local/Cellar/rabbitmq/3.7.7_1/plugins/rabbitmq_management-3.7.7.ez rabbitmq_m==&gt; CaveatsManagement Plugin enabled by default at http://localhost:15672Bash completion has been installed to: /usr/local/etc/bash_completion.dTo have launchd start rabbitmq now and restart at login: brew services start rabbitmqOr, if you don't want/need a background service you can just run: rabbitmq-server==&gt; Summary🍺 /usr/local/Cellar/rabbitmq/3.7.7_1: 233 files, 13.3MB, built in 1 minute 31 seconds==&gt; Caveats==&gt; erlangMan pages can be found in: /usr/local/opt/erlang/lib/erlang/manAccess them with `erl -man`, or add this directory to MANPATH.==&gt; rabbitmqManagement Plugin enabled by default at http://localhost:15672Bash completion has been installed to: /usr/local/etc/bash_completion.dTo have launchd start rabbitmq now and restart at login: brew services start rabbitmqOr, if you don't want/need a background service you can just run: rabbitmq-server➜ ~ 相关信息123456789安装目录：/usr/local/Cellar/rabbitmq/3.7.7_1现在启动rabbitmq并在登录时重新启动:brew services start rabbitmq或者，如果你不想/需要后台服务，你可以运行:rabbitmq-server初始化账号密码，guest 启动123456789101112➜ ~ cd /usr/local/Cellar/rabbitmq/3.7.7_1/➜ 3.7.7_1 sbin/rabbitmq-server ## ## ## ## RabbitMQ 3.7.7. Copyright (C) 2007-2018 Pivotal Software, Inc. ########## Licensed under the MPL. See http://www.rabbitmq.com/ ###### ## ########## Logs: /usr/local/var/log/rabbitmq/rabbit@localhost.log /usr/local/var/log/rabbitmq/rabbit@localhost_upgrade.log Starting broker... completed with 6 plugins. Spring Boot 集成 RabbitMQ配置Maven依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;&lt;/dependency&gt; 配置文件，配置 rabbitmq 的安装地址、端口及账户信息123456spring.application.name=spirng-boot-rabbitmqspring.rabbitmq.host=192.168.0.1spring.rabbitmq.port=5672spring.rabbitmq.username=adminspring.rabbitmq.password=123456 定义队列123456789@Configurationpublic class RabbitConfig &#123; @Bean public Queue Queue() &#123; return new Queue("hello"); &#125;&#125; 发送者AmqpTemplate 是 Spring Boot 提供的默认实现。123456789101112public class HelloSender &#123; @Autowired private AmqpTemplate rabbitTemplate; public void send() &#123; String context = "hello " + new Date(); System.out.println("Sender : " + context); this.rabbitTemplate.convertAndSend("hello", context); &#125;&#125; 接收者注意使用注解@RabbitListener，使用 queues 指明队列名称，@RabbitHandler为具体接收的方法。 12345678910@Component@RabbitListener(queues = "hello")public class HelloReceiver &#123; @RabbitHandler public void process(String hello) &#123; System.out.println("Receiver : " + hello); &#125;&#125; 测试1234567891011121314@RunWith(SpringRunner.class)@Spring BootTestpublic class RabbitMqHelloTest &#123; @Autowired private HelloSender helloSender; @Test public void hello() throws Exception &#123; helloSender.send(); Thread.sleep(1000l); &#125;&#125; 注意，发送者和接收者的 queue name 必须一致，不然不能接收。 让测试方法等待 1 秒，让接收者接收到消息，不然应用退出时可能还没有接收到消息。以上一个最常用简单的示例就完成了。 以上参考：springboot(八)：RabbitMQ详解 纯洁的微笑地址]]></content>
      <categories>
        <category>middleware</category>
      </categories>
      <tags>
        <tag>消息中间件</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[语义化版本]]></title>
    <url>%2F2018%2F09%2F08%2F%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[如何制定版本版本格式：主版本号.次版本号.修订号，版本号递增规则如下： 主版本号：当你做了不兼容的 API 修改， 次版本号：当你做了向下兼容的功能性新增， 修订号：当你做了向下兼容的问题修正。 先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。 标签命名建议通常的做法是在你的版本名称前加上字母 v 前缀， v1.0 或者 v2.3.4。 如果标签不适合在生产环境下使用，请在版本名称后添加预发行版本。例如：v0.2-alpha 或者 v5.9-beta.3。 版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，“必须 MUST ”把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译信息不在这份比较的列表中）。由左到右依序比较每个标识符号，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha &lt; 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级“必须 MUST ”透过由左到右的每个被句点分隔的标识符号来比较，直到找到一个差异值后决定：只有数字的标识符号以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符号比非数字的标识符号优先层级低。若开头的标识符号都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0- rc.1 &lt; 1.0.0。 FAQ在 0.y.z 初始开发阶段，我该如何进行版本控制？最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。 如何判断发布 1.0.0 版本的时机？当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。 这不会阻碍快速开发和迭代吗？主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。 对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。 为整个公共 API 写文件太费事了！为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。 万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。 如果我更新了自己的依赖但没有改变公共 API 该怎么办？由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的套件有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。 如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。 我该如何处理即将弃用的功能？弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。 语义化版本对于版本的字串长度是否有限制呢？没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。]]></content>
      <categories>
        <category>VC</category>
      </categories>
      <tags>
        <tag>语义化版本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot启动初始化资源]]></title>
    <url>%2F2018%2F09%2F08%2FSpringBoot%E5%90%AF%E5%8A%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E8%B5%84%E6%BA%90%2F</url>
    <content type="text"><![CDATA[背景SpringBoot 配置的时候，针对于文件上传，有个 location 属性，主要是设置一个文件的临时目录，但是他没不能自动创建该目录，而且必须存在，不然则会报错；一开始在 @ComponentScan 扫描的时候，创建一个针对文件目录 config，从而达到效果；后面发现有个专门针对启动时初始化资源的接口 12345678# 文件上传配置#http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties#search multipart#spring.servlet.multipart.enabled=true #默认支持文件上传.#spring.servlet.multipart.file-size-threshold=0 #支持文件写入磁盘.#spring.servlet.multipart.location= # 上传文件的临时目录#spring.servlet.multipart.max-file-size=1Mb # 最大支持文件大小#spring.servlet.multipart.max-request-size=10Mb # 最大支持请求大小 12345# 文件上传目录file: directory: upload: $&#123;user.home&#125;/yxd/crm/test/fileUploadDir temp: $&#123;user.home&#125;/yxd/crm/test/fileTempDir 神奇 CommandLineRunnerCommandLineRunner 接口的 Component 会在所有 Spring Beans都初始化之后，SpringApplication.run()之前执行，非常适合在应用程序启动之初进行一些数据初始化的工作。 1234567891011121314151617181920/** * @Description: 文件目录初始化 * @author: &lt;a href="smniuhe@gmail.com"/&gt;smniuhe&lt;/a&gt; */@Log4j2@Componentpublic class FileDirInitRunner implements CommandLineRunner &#123; @Autowired private FileProperties fileProperties; @Override public void run(String... args) throws Exception &#123; String temp = fileProperties.getTemp(); File fileTempDir = new File(temp); FileUtils.forceMkdir(fileTempDir); log.info("文件临时目录初始化：&#123;&#125;，", fileTempDir); &#125;&#125; 参考Spring Boot 2.0(七)：Spring Boot 如何解决项目启动时初始化资源纯洁的微笑地址]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>Runner</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot+druid+passwordEncrypt]]></title>
    <url>%2F2018%2F08%2F03%2Fspringboot-druid-passwordEncrypt%2F</url>
    <content type="text"><![CDATA[安全最近在读《大型网站技术架构:核心原理与案例分析》，并且在极客时间看了一场知道创宇研发中心潘少华的分享，分享最新区块链安全态势，发现安全问题不可忽视，比如我们在 showdoc 上分享线上接口 API，或者将代码托管到码云的企业级管理账号上，总是存在着各种风险，我们能做的就是尽量暴露少量的核心信息，数据库连接密码就是最为关键的之一 加密策略 根据下面代码可以知道，公约，私钥，加密后的密码的生产策略 1234567891011121314public class ConfigTools &#123; private static final String DEFAULT_PRIVATE_KEY_STRING = "MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAocbCrurZGbC5GArEHKlAfDSZi7gFBnd4yxOt0rwTqKBFzGyhtQLu5PRKjEiOXVa95aeIIBJ6OhC2f8FjqFUpawIDAQABAkAPejKaBYHrwUqUEEOe8lpnB6lBAsQIUFnQI/vXU4MV+MhIzW0BLVZCiarIQqUXeOhThVWXKFt8GxCykrrUsQ6BAiEA4vMVxEHBovz1di3aozzFvSMdsjTcYRRo82hS5Ru2/OECIQC2fAPoXixVTVY7bNMeuxCP4954ZkXp7fEPDINCjcQDywIgcc8XLkkPcs3Jxk7uYofaXaPbg39wuJpEmzPIxi3k0OECIGubmdpOnin3HuCP/bbjbJLNNoUdGiEmFL5hDI4UdwAdAiEAtcAwbm08bKN7pwwvyqaCBC//VnEWaq39DCzxr+Z2EIk="; public static final String DEFAULT_PUBLIC_KEY_STRING = "MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKHGwq7q2RmwuRgKxBypQHw0mYu4BQZ3eMsTrdK8E6igRcxsobUC7uT0SoxIjl1WveWniCASejoQtn/BY6hVKWsCAwEAAQ=="; public static void main(String[] args) throws Exception &#123; String password = args[0]; String[] arr = genKeyPair(512); System.out.println("privateKey:" + arr[0]); System.out.println("publicKey:" + arr[1]); System.out.println("password:" + encrypt(arr[0], password)); &#125; ...&#125; 12345678910111213➜ 1.1.10 lltotal 5456-rw-r--r-- 1 niuhesm staff 195B 7 28 15:05 _remote.repositories-rw-r--r-- 1 niuhesm staff 2.6M 7 28 15:04 druid-1.1.10.jar-rw-r--r-- 1 niuhesm staff 40B 7 28 15:04 druid-1.1.10.jar.sha1-rw-r--r-- 1 niuhesm staff 18K 7 28 15:04 druid-1.1.10.pom-rw-r--r-- 1 niuhesm staff 40B 7 28 15:04 druid-1.1.10.pom.sha1➜ 1.1.10 pwd/Users/niuhesm/.m2/repository/com/alibaba/druid/1.1.10➜ 1.1.10 java -cp druid-1.1.10.jar com.alibaba.druid.filter.config.ConfigTools 123456privateKey:MIIBUwIBADANBgkqhkiG9w0BAQEFAASCAT0wggE5AgEAAkEAuTqQKLAvphok1rS1/NTvdWb8dejoPF144uP8hE4GjDvTeCFTkAGE1di4b+wlRtBJT/TWElQMPUXnypDQbZTyFwIDAQABAkAR0HcS4rcCc5s9Zw3lrhkFooz/ThIf1CGPOLwNgW+RxvlMGEvPRjMDmZFbSLPvmdO3J3RCy2eygzoJQu6djrUhAiEA4PHsbva76Qt2iHaruX/kDvzBWwMBvDeG6kkXvIDc9tECIQDSzPm4Tfhi+j7k7AyWKtjCl055JAyOP7UjlVXUGQRkZwIgIaMLf+xVXRvhtbZJJ4wARl11bG6eq86B1jbn3cBHSoECIEdj+dKMPWmv3GsE8kJNInnMalwmdEYcl0kEwzuAeXdTAiBFIqi7wiCi0zeNkMLv3L4sI+Sy0bsaZ/U/6jRbw7WIYQ==publicKey:MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALk6kCiwL6YaJNa0tfzU73Vm/HXo6DxdeOLj/IROBow703ghU5ABhNXYuG/sJUbQSU/01hJUDD1F58qQ0G2U8hcCAwEAAQ==password:SPhksKFVhjsnWJ21HJASdn8ekZ/izn22D5ed+waMKxjjsWVn1KRI/px4vY2kRDsIAvm8uaMQG9lu7kWAWpP/jQ== 解密配置 关键 此时就需要通过 Java config 相关的 DataSource，并通过重写 DruidPasswordCallback&amp;setProperties 方法来重新设置解密后的密码 ConfigTools.decrypt(publickey, password); 提供对应的解密算法 spring.datasource.druid.password-callback=com.lckjep.yxd.crm.config.DbPasswordCallback 1234567891011121314151617181920212223/** * @Description: 数据库密码回调 * @author: &lt;a href="smniuhe@gmail.com"/&gt;smniuhe&lt;/a&gt; */public class DbPasswordCallback extends DruidPasswordCallback &#123; private static final Logger LOGGER = LoggerFactory.getLogger(DbPasswordCallback.class); @Override public void setProperties(Properties properties) &#123; super.setProperties(properties); String password = (String) properties.get("password"); String publickey = (String) properties.get("publickey"); try &#123; String dbpassword = ConfigTools.decrypt(publickey, password); System.out.println("===============" + dbpassword); setPassword(dbpassword.toCharArray()); &#125; catch (Exception e) &#123; LOGGER.error("Druid ConfigTools.decrypt", e); &#125; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126/** * servlet,filter 组件注册（servlet 3.0 后时代） * @Description: spring boot项目启动的时候，动态注册相关 servlet,filter * @author &lt;a href="smniuhe@gmail.com"&gt;smniuhe&lt;/a&gt; */@Configurationpublic class DruidConfig &#123; private Logger logger = LoggerFactory.getLogger(getClass()); @Value("$&#123;spring.datasource.druid.url&#125;") private String dbUrl; @Value("$&#123;spring.datasource.druid.username&#125;") private String username; @Value("$&#123;spring.datasource.druid.password&#125;") private String password; @Value("$&#123;spring.datasource.druid.driver-class-name&#125;") private String driverClassName; @Value("$&#123;spring.datasource.type&#125;") private String dbType; @Value("$&#123;spring.datasource.druid.initial-size&#125;") private int initialSize; @Value("$&#123;spring.datasource.druid.min-idle&#125;") private int minIdle; @Value("$&#123;spring.datasource.druid.max-active&#125;") private int maxActive; @Value("$&#123;spring.datasource.druid.max-wait&#125;") private int maxWait; @Value("$&#123;spring.datasource.druid.time-between-eviction-runs-millis&#125;") private int timeBetweenEvictionRunsMillis; @Value("$&#123;spring.datasource.druid.min-evictable-idle-time-millis&#125;") private int minEvictableIdleTimeMillis; @Value("$&#123;spring.datasource.druid.validation-query&#125;") private String validationQuery; @Value("$&#123;spring.datasource.druid.test-while-idle&#125;") private boolean testWhileIdle; @Value("$&#123;spring.datasource.druid.test-on-borrow&#125;") private boolean testOnBorrow; @Value("$&#123;spring.datasource.druid.test-on-return&#125;") private boolean testOnReturn; @Value("$&#123;spring.datasource.druid.pool-prepared-statements&#125;") private boolean poolPreparedStatements; @Value("$&#123;spring.datasource.druid.max-pool-prepared-statement-per-connection-size&#125;") private int maxPoolPreparedStatementPerConnectionSize; @Value("$&#123;spring.datasource.druid.filters&#125;") private String filters; @Value("$&#123;spring.datasource.druid.connection-properties&#125;") private String connectionProperties; @Value("$&#123;spring.datasource.druid.password-callback&#125;") private String passwordCallbackClassName; @Bean public DataSource dataSource() &#123; DruidDataSource datasource = new DruidDataSource(); datasource.setUrl(dbUrl); datasource.setUsername(username); datasource.setPassword(password); datasource.setDriverClassName(driverClassName); datasource.setInitialSize(initialSize); datasource.setMinIdle(minIdle); datasource.setMaxActive(maxActive); datasource.setMaxWait(maxWait); datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis); datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis); datasource.setValidationQuery(validationQuery); datasource.setTestWhileIdle(testWhileIdle); datasource.setTestOnBorrow(testOnBorrow); datasource.setTestOnReturn(testOnReturn); datasource.setPoolPreparedStatements(poolPreparedStatements); datasource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize); datasource.setConnectionProperties(connectionProperties); datasource.setDbType(dbType); try &#123; datasource.setPasswordCallbackClassName(passwordCallbackClassName); &#125; catch (Exception e) &#123; logger.error("druid configuration initialization passwordCallbackClassName", e); &#125; try &#123; datasource.setFilters(filters); &#125; catch (SQLException e) &#123; logger.error("druid configuration initialization filter", e); &#125; return datasource; &#125; @Bean public ServletRegistrationBean druidServlet() &#123; ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new StatViewServlet(), "/druid/*"); //登录查看信息的账号密码. servletRegistrationBean.addInitParameter("loginUsername","admin"); servletRegistrationBean.addInitParameter("loginPassword","123456"); return servletRegistrationBean; &#125; @Bean public FilterRegistrationBean filterRegistrationBean() &#123; FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(); filterRegistrationBean.setFilter(new WebStatFilter()); filterRegistrationBean.addUrlPatterns("/*"); filterRegistrationBean.addInitParameter("exclusions", "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"); return filterRegistrationBean; &#125; 12345678910111213141516171819202122232425262728293031# 数据源基础配置spring.datasource.druid.url=jdbc:mysql://localhost:3306/yxp2p?useSSL=false&amp;characterEncoding=utf8spring.datasource.druid.username=rootspring.datasource.druid.password=SPhksKFVhjsnWJ21HJASdn8ekZ/izn22D5ed+waMKxjjsWVn1KRI/px4vY2kRDsIAvm8uaMQG9lu7kWAWpP/jQ==spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver# 初始化大小，最小，最大spring.datasource.druid.initial-size=1spring.datasource.druid.max-active=20spring.datasource.druid.min-idle=1# 配置获取连接等待超时的时间spring.datasource.druid.max-wait=60000# 打开PSCache，并且指定每个连接上PSCache的大小spring.datasource.druid.pool-prepared-statements=falsespring.datasource.druid.max-pool-prepared-statement-per-connection-size=20spring.datasource.druid.validation-query=SELECT * FROM rd_system WHERE id = 1spring.datasource.druid.test-on-borrow=falsespring.datasource.druid.test-on-return=falsespring.datasource.druid.test-while-idle=true# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒spring.datasource.druid.time-between-eviction-runs-millis=60000# 配置一个连接在池中最小生存的时间，单位是毫秒spring.datasource.druid.min-evictable-idle-time-millis=300000# 配置监控统计拦截的filters，去掉后监控界面sql无法统计spring.datasource.druid.filters=statspring.datasource.type=com.alibaba.druid.pool.DruidDataSourcespring.datasource.druid.password-callback=com.lckjep.yxd.crm.config.DbPasswordCallbackspring.datasource.publicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALk6kCiwL6YaJNa0tfzU73Vm/HXo6DxdeOLj/IROBow703ghU5ABhNXYuG/sJUbQSU/01hJUDD1F58qQ0G2U8hcCAwEAAQ==8zj7+9vU3jjqItds740GMbZJkuqCECAwEAAQ==# 通过connectProperties属性来打开mergeSql功能；慢SQL记录spring.datasource.druid.connection-properties=config.decrypt=true;publickey=$&#123;spring.datasource.publicKey&#125;;password=$&#123;spring.datasource.druid.password&#125;]]></content>
      <categories>
        <category>Database Pool</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>druid</tag>
        <tag>encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二进制思维设定权限]]></title>
    <url>%2F2018%2F06%2F10%2F%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%80%9D%E7%BB%B4%E8%AE%BE%E5%AE%9A%E6%9D%83%E9%99%90%2F</url>
    <content type="text"><![CDATA[背景之前做权限判定的基本都是通过Boolean类型，但是当权限比较多的时候，此时数据库的字段和持久层的pojo的维护都会比较麻烦，比如如下： 12345678public final static Long OP_BIND_PHONE = 1L &lt;&lt; 0; // 用户绑定手机状态码public final static Long OP_BIND_EMAIL = 1L &lt;&lt; 1; // 用户绑定邮箱public final static Long OP_BASIC_INFO = 1L &lt;&lt; 2;// 用户是否填写基本资料public final static Long OP_REAL_AUTH = 1L &lt;&lt; 3;// 用户是否实名认证public final static Long OP_VEDIO_AUTH = 1L &lt;&lt; 4;// 用户是否视频认证public final static Long OP_HAS_BIDREQUEST_PROCESS = 1L &lt;&lt; 5;// 用户是否有一个借款正在处理流程当中public final static Long OP_BIND_BANKINFO = 1L &lt;&lt; 6;// 用户是否绑定银行卡public final static Long OP_HAS_MONEYWITHDRAW_PROCESS = 1L &lt;&lt; 7;// 用户是否有一个提现申请在处理中 思路位运算法(非短路的运算符)&amp;(按位进行‘与’运算) 仅当两个操作数都为1时。输出结果才为1。否则为0 |(按位进行‘或’运算) 仅当两个操作数都为0时，输出的结果才为0 ^(按位进行‘异或’运算) 仅当两个操作数不同一时候。对应的输出结果才为1，否则为0 ~(按位进行‘取反’运算) 全部的0置为1，1置为0 http://www.runoob.com/java/java-operators.html 扩展 一个值表示多个权限 优点：操作处理比较简单 缺点：数据库查询是否繁琐 移位运算符123456789101112java中有三种移位运算符&lt;&lt; : 左移运算符，num &lt;&lt; 1,相当于num乘以2&gt;&gt; : 右移运算符，num &gt;&gt; 1,相当于num除以2&gt;&gt;&gt; : 无符号右移，忽略符号位，空位都以0补齐43210 位数-------- 1010 十进制：10 原始数 number10100 十进制：20 左移一位 number = number &lt;&lt; 1; 1010 十进制：10 右移一位 number = number &gt;&gt; 1; 验证是否可行123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package com.smniuhe.bitStates;import org.apache.ibatis.reflection.SystemMetaObject;import org.junit.Assert;import org.junit.Test;/** * Desc: 二进制状态码测试 * * @author niuhesm * @date 2018/6/10 */public class BitStatesTest &#123; @Test public void testBidStatesUtils() &#123; /** * java中有三种移位运算符 * &lt;&lt; : 左移运算符，num &lt;&lt; 1,相当于num乘以2 * &gt;&gt; : 右移运算符，num &gt;&gt; 1,相当于num除以2 * &gt;&gt;&gt; : 无符号右移，忽略符号位，空位都以0补齐 * 43210 位数 * -------- * 1010 十进制：10 原始数 number * 10100 十进制：20 左移一位 number = number &lt;&lt; 1; * 1010 十进制：10 右移一位 number = number &gt;&gt; 1; */ System.out.println(BitStatesUtils.OP_BIND_PHONE); System.out.println(BitStatesUtils.OP_BIND_EMAIL); System.out.println(BitStatesUtils.OP_BASIC_INFO); System.out.println(BitStatesUtils.OP_REAL_AUTH); System.out.println(BitStatesUtils.OP_VEDIO_AUTH); System.out.println(BitStatesUtils.OP_HAS_BIDREQUEST_PROCESS); /** * 0001 1001 2^4+2^3+2^0=25 * 0001 1010 2^4+2^3+2^1=26 * 0000 0010 2^1=2 * 0000 1010 2^3+2^1=10 * &amp;(按位进行‘与’运算) * 仅当两个操作数都为1时。输出结果才为1。否则为0 * |(按位进行‘或’运算) * 仅当两个操作数都为0时，输出的结果才为0 * ^(按位进行‘异或’运算) * 仅当两个操作数不同一时候。对应的输出结果才为1，否则为0 */ System.out.println("--------------------------------------------"); int value1 = Integer.parseInt("11010", 2); int value2 = Integer.parseInt("11001", 2); int value3 = Integer.parseInt("00010", 2); int value4 = Integer.parseInt("01010", 2); Integer valueInterger = Integer.valueOf("11010", 2); String valueBinary = Integer.toBinaryString(value2); boolean isHaveValue1 = BitStatesUtils.hasState(value1, BitStatesUtils.OP_BIND_EMAIL); boolean isHaveValue2 = BitStatesUtils.hasState(value2, BitStatesUtils.OP_BIND_EMAIL); long addState = BitStatesUtils.addState(value1, BitStatesUtils.OP_BIND_EMAIL); long removeState1 = BitStatesUtils.removeState(addState, BitStatesUtils.OP_BIND_EMAIL); long removeState2 = BitStatesUtils.removeState(addState, value4); System.out.println("十进制 int " + value2); System.out.println("十进制 Interger " + valueInterger); System.out.println("二进制 String " + valueBinary); System.out.println("是否存在该状态 " + isHaveValue1); System.out.println("是否存在该状态 " + isHaveValue2); System.out.println("添加该状态 " + addState); System.out.println("移除该状态 " + removeState1); System.out.println("移除该状态 " + removeState2); &#125;&#125; 控制台可知，思路可行12345678910111213141516171819202122232425262712481632十进制 int 25十进制 Interger 26二进制 String 11001是否存在该状态 true是否存在该状态 false添加该状态 26移除该状态 24移除该状态 16]]></content>
      <categories>
        <category>operator</category>
      </categories>
      <tags>
        <tag>权限</tag>
        <tag>二进制</tag>
        <tag>bit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汶川地震时的历史课]]></title>
    <url>%2F2018%2F05%2F12%2F%E6%B1%B6%E5%B7%9D%E5%9C%B0%E9%9C%87%E6%97%B6%E7%9A%84%E5%8E%86%E5%8F%B2%E8%AF%BE%2F</url>
    <content type="text"><![CDATA[那会儿，我们在那！具体发生的时间我是不记得的，但记得是初一，上历史课；那时的移动通信不像现在，记得班上就两台诺基亚，连个塞班系统的手机都找不到，只能打打电话，发发短信；再加上上的是个该死的寄宿学校，对外面的时间真的是一无所知，加上那会青春期，网瘾少年，学校欺凌事件也是常有的事（压抑的不行），记得初三那会儿翻墙出去上网，看到后面12轮的大卡车，道路两边的禾苗被路灯光打的泛白的激动感受，至今印象深刻。 巧合了，历史课知道的真相刚刚看了下百科具体发生的时间是 14时28分04秒，奇怪的是，大概我们是13点左右知道的，我是推算出来的，上面交代过背景，就算外面发生什么事，我们也不能立马的知道，就连老师也不行，因为没人可以刷手机；记得是下午准备上第二节课的课间，我们和往常一样，老师没来之前都是随便嗨的；就在这时，历史老师（身材不高，头发挺少的，有人说长的像山顶洞人，说白了学生怕的那种老师，教了我们一年，后面考上研究生啦）走到教室门口，威严直视我们，走了几步到讲台，用手狠狠的敲了几下课桌，说实话，那时我被吓到了，估计其他同学也一样，一板一眼的感觉就像唱戏的青天大老爷处死这些遭天杀的恶人；然后说：“你们这些人天天不好好学习，上课铃响还在这吵，谁都有你们这样的条件？，现在汶川发生地震，7.8级，你看看你们现在在干嘛”？，然后就这样继续上完这节历史课，只是记得老师声音没以前响亮，也没怎么互动，说实话，那时的我还是不知道发生了什么，只知道发生了地震，7.8级。 地震发生后的变化历史课后，大概也过了有段时间了，其他学科的老师聊过这个，尤其是徐敬之老师，我们的班主任，心情也是比较的沉重；你让我跟着难受，抹眼泪也是不太可能的，还是那句话，那时的我们真的没概念，连地震的图片都没见过几张，还以为地震就是地裂成好多块，我们只能一个一个的掉到洞里去，哪知道地震是要是死人的，是无情，是绝望的的天灾；发生的哪天是周一，离我回家看天天向上（记得周六回家习惯性看的节目，还是重播，当然了不像现在的综艺节目这么多），反正就这样稀里糊涂的上了几天课，回家看电视。 唯一的信息终端，电视当我打开电视，说实话，有点震惊，或者说有点懵；发现没有“天天向上“了，所有的节目都是报到地震抢险救灾的画面，这时一个“糟糕”周末，晚上睡觉前，终端显示画面都是抬着尸体的消防兵，慢慢从废墟中移动着，没有任何的剪辑效果，一个个找尸体，找活人的流程就这样一幀幀的刷新着；就这样明天向家人拿了饭前，我又回到了那所封闭式的学校上课。 未来不知道是什么时候，我才意识到，假如是我的家庭遭受到这样的灾难，或者说，整个家族就剩下我一个人了，我还会编程嘛，估计现在的我是一名老师、心理医生还是消防兵，或者不愿背负这苦难早早离开，还是很难想象；现在的中国互联网发展的非常快，至少在一定程度上，或者在某个生活细节上，你们都是公平的，都是被尊重的，因为我们都是互联网用户，都是可以快速的在互联网找到可以帮助到你的人，得到你们的信息；ps：只有祖国足够强大，我们才能被足够的保护。]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>汶川</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人月神话]]></title>
    <url>%2F2018%2F05%2F01%2F%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[网站，blog我叫陈皓，我以前的blog在CSDN——http://blog.csdn.net/haoel，08、09年的时候，CSDN的博客系统很不稳定，另外，正好有一台N年前的托管的服务器，所以，就申请了域名，自己建立自己的Blog。本站为什么叫“酷壳”，绝属误打误撞。原来的域名是：CoCre.com，原意是Corporation+Creative两个单词的缩写，是我一大学同学申请的，后来他出国了，所以，我就把这个域名用来做成我的Blog了，把CoCre按发音读成“酷壳”和“酷客”，但感觉不好记，于是注册了CoolShell.cn，感觉这个可能更好记一点。要说“酷壳”有什么意思，在这里我可以说，完全没有，就是一个名字罢了。 这是一个完全依靠个人建立的技术性BLOG。是一个分享技术见闻，知识，趋势的网站，这是我个人建立的网站，如果你喜欢其中的文章呢，欢迎给我们留言，如果不想留言呢，你也可以通过打分来鼓励我们分享和写作。当然，我们最欢迎的是你的加入，欢迎你和我们一起写作。欢迎大家注册并加入我们一起来分享编程和技术方面的见闻和心得。文章可以是原创，翻译、杂谈，灌水，只要是和技术和编程相关就可以。 左耳朵耗子coolshell.cn 江南白衣，公众号：春天的旁边开源项目：vjtools 江南白衣地址 友链特别棒 IT草根地址 《Spring Cloud微服务实战》作者Spring4All社区联合发起人 程序员DDblog.didispace.com ThoughtWorks在每年都会出品两期技术雷达，这是一份关于技术趋势的报告，它比起一些我们能在市面上见到的其他各种技术行情和预测报告，更加具体，更具可操作性，因为它不仅涉及到新技术大趋势，比如云平台和大数据，更有细致到类库和工具的推介和评论，从而更容易落地。 ThoughtWorks 洞见地址 怎么说呢，垠神有时候能很准确的抓住技术发展的进程，blog 文字写法有点像王小波，时时刻刻展现出自己独立人格和尊严，有时候也比较矫情，和我们熟知的大神有点不太一样。 王垠博客地址 阿里巴巴中间件技术部，是世界顶尖的 Java 技术团队之一，起源于淘宝平台架构组，是跟随着阿里电商业务和双十一成长起来的技术团队。复杂的业务场景、飞速的业务增长、高并发的大促洪峰、层出不穷的稳定性问题，让我们一直贴近业务，解决难题，不断进行技术创新。 我们的产品包括高分布式 RPC 服务框架、高可靠分布式消息中间件、分布式数据层、海量数据存储、实时计算、系统性能优化、架构高可用等几大领域的多个产品，这些产品支撑阿里巴巴集团（淘宝、天猫、聚划算、1688、菜鸟）的所有交易和非交易业务系统，安然平稳度过双十一917亿交易成交的挑战。我们开源的中间件组件 dubbo、rocketmq、jstorm、otter、canal、diamond、tengine 等都被很多企业和个人在使用。 阿里中间件团队博客地址 滴滴公司的技术专家，之前一些面试注意和简历改写，都是从这里获取到的。 codeKK地址 小青年是一个经常分享干货的人，前端工程师 小青年博客地址 张哥的文章比较分享一些自己的成长过程，有点像迷茫青年逆袭导师 stormzhang博客地址 普通程序员，毕业于东中国正常大学(校友都懂哈)，目前从事Java开发。生活大爆炸和Running man脑残粉，因为很喜欢李光洙(外号长颈鹿)，所以博客取名为Giraffe’s Home，用来记录学习思考中的一些收获，也许会有错误，也许并不完美，但这不就是成长的过程么。没什么宏伟的目标，只希望每天都能有所收获，add more ing into my life。😜😜😜 Giraffe’s Home地址 潘小鶸ruò，云数据库平台技术专家，客居杭州。喜欢学习研究新技术，然后中途弃坑。擅长构建无状态的分布式服务，更擅长让分布式系统进入无服务状态。不会用 Git 只会用 SourceTree，没有 JetBrains 全家桶就写不出代码，没有 Google 和 StackOverflow 就解决不了技术问题。 RUODOJO地址 潘小鶸ruò，云数据库平台技术专家，客居杭州。喜欢学习研究新技术，然后中途弃坑。擅长构建无状态的分布式服务，更擅长让分布式系统进入无服务状态。不会用 Git 只会用 SourceTree，没有 JetBrains 全家桶就写不出代码，没有 Google 和 StackOverflow 就解决不了技术问题。 刘未鹏地址 video卓越程序员炼成记 大数据的前世今生：诞生、发展、未来？ 技术人如何在技术浪潮中线性成长 软件在软件领域，很少能有像《人月神话》一样具有深远影响力和畅销不衰的著作。Brooks博士为人们管理复杂项目提供了具有洞察力的见解，既有很多发人深省的观点，又有大量软件工程的实践。本书内容来自Brooks博士在IBM公司SYSTEM／360家族和OS／360中的项目管理经验，该项目堪称软件开发项目管理的典范。该书英文原版一经面世，即引起业内人士的强烈反响，后又译为德、法、日、俄、中、韩等多种文字，全球销售数百万册。确立了其在行业内的经典地位。人件 人月神话地址 《人件(原书第3版)》内容简介：在软件管理领域，很少有著作能够与《人件(原书第3版)》媲美。作为经久不衰的畅销书，书中深刻地洞察到软件开发的问题不在于技术，而在于人。人的因素并不容易解决，一旦解决了，你将更有可能获得成功。《人件(原书第3版)》是软件管理领域的传奇经典，被誉为“对美国软件业影响大的一本书”。全书从管理人力资源、创建健康的办公环境、雇用并留用正确的人、高效团队形成、改造企业文化和快乐工作等多个角度阐释了如何思考和管理…… 人件地址 《代码大全(第2版)》中所论述的技术不仅填补了初级与高级编程实践之间的空白，而且也为程序员们提供了一个有关软件开发技术的信息来源。《代码大全(第2版)》对经验丰富的程序员、技术带头人、自学的程序员及没有太多编程经验的学生都是大有裨益的。可以说，只要您具有一定的编程基础，想成为一名优秀的程序员，阅读《代码大全(第2版)》都不会让您失望。 代码大全(第2版)地址 战争在《闪击英雄》这本战争回忆录中，古德里安以其亲身经历详细描述了德国装甲兵的组建、发展、作战史及其经验教训，介绍了他率领德国装甲部队吞并奥地利、捷克斯洛伐克、苏台德区的行动，以及对法、苏作战经过，并对第三帝国的领袖人物和德军统率机关进行了评论。 古德里安回忆录地址 英国军事思想家李德·哈特整理隆美尔二战战时文档，讲述隆美尔在法国战场、非洲战场和盟军诺曼底登陆前在法国负责防御作战的经历。罕见披露沙漠之狐的内心世界，揭示轴心国同盟还有希特勒的军队高层之间的运转内幕。 隆美尔战时文件 (博集历史典藏馆)地址 《朱可夫传》介绍了朱可夫艰难的童年岁月、经受十月革命的洗礼、战后政坛风波，以及他所指挥的重大战役等众多读者感兴趣的内容。其中不乏许多鲜为人知的励志故事，也涵盖了朱可夫从一名皮毛匠到元帅的成长历程，以及对苏德战场起到重大转折的莫斯科保卫战和斯大林格勒战役。作者以鲜活的笔触，为读者介绍二战中的知名将领，点评名将的是非成败，功过得失，历史性与趣味性并存，是一部不可多得的经典著作。 朱可夫——打败希特勒的人地址]]></content>
      <categories>
        <category>books</category>
      </categories>
      <tags>
        <tag>人月神话</tag>
        <tag>入口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简化 Java Bean 代码工具 Lombok]]></title>
    <url>%2F2018%2F04%2F26%2F%E7%AE%80%E5%8C%96-Java-Bean-%E4%BB%A3%E7%A0%81%E5%B7%A5%E5%85%B7-Lombok%2F</url>
    <content type="text"><![CDATA[Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法。 简单来说，我们平时开发过程中总是要花很多时间为Java Bean 去创建getter和setter方法，当类里面的属性很多时则创建的getter和setter就很多，代码就很长。而lombok就可以为我们省去创建getter和setter方法的麻烦，代码也会更加简洁。 lanweihong发布文章地址]]></content>
      <categories>
        <category>simplification</category>
      </categories>
      <tags>
        <tag>Java Bean</tag>
        <tag>lombok</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swagger]]></title>
    <url>%2F2018%2F04%2F17%2Fswagger%2F</url>
    <content type="text"><![CDATA[Spring Boot [如何优雅的编写文档] 在团队协作的时候许多时候需要用到接口文档，我们通常通过手工编写大量重复格式的文档，让我想起了程序员最讨厌的两件事：没有文档，编写文档。哈哈，如果使用过swagger的朋友应该都很了解它带给我们的便利，如果你还没有使用swagger的话，正好打算编写RESTful API文档，这里有一篇文章Spring Boot中使用Swagger2构建强大的RESTful API文档可以帮助你在较短的时间内构建出一个线上文档，有些时候我们需要生成离线文档有该怎么做呢？带着这个问题我们一起去出发。 yangrd发布地址 github 地址https://github.com/SmNiuhe/restdocs SpringMVC+Swagger2整合地址 github 地址https://github.com/SmNiuhe/p2p/tree/master/p2p-sso-web]]></content>
      <categories>
        <category>Document</category>
      </categories>
      <tags>
        <tag>RESTful</tag>
        <tag>文档</tag>
        <tag>swagger</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis 未授权访问缺陷可轻易导致系统被黑]]></title>
    <url>%2F2018%2F04%2F01%2FRedis-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E7%BC%BA%E9%99%B7%E5%8F%AF%E8%BD%BB%E6%98%93%E5%AF%BC%E8%87%B4%E7%B3%BB%E7%BB%9F%E8%A2%AB%E9%BB%91%2F</url>
    <content type="text"><![CDATA[背景最近一直接到阿里云的邮件通知，说：【您的云服务器（106.15.191.27）由于被检测到对外攻击，已阻断该服务器对其它服务器端口（TCP:6379）的访问，阻断预计将在2018-04-02 16:21:08时间内结束，请及时进行安全自查。若有疑问，请工单或电话联系阿里云售后，感谢您对阿里云的支持。】后面才了解到这不是偶然的事件。 Redis 默认情况下，会绑定在 0.0.0.0:6379，这样将会将Redis服务暴露到公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问Redis以及读取Redis的数据。攻击者在未授权访问Redis的情况下可以利用Redis的相关方法，可以成功将自己的公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以直接登录目标服务器。 @伯乐在线blog.jobbole.com/94518 思考：根据这篇文章，我思想一下我遇到了哪些问题；确实不光是 redis 数据被盗取的问题，而且他却是能轻而易举的通过相关代码在服务器上执行植入程序，这也是阿里云报了恶意发包、挖矿程序(监测到) 解决办法(待跟进)临时解决方案(推荐) 配置bind选项, 限定可以连接Redis服务器的IP, 并修改redis的默认端口6379. 配置AUTH, 设置密码, 密码会以明文方式保存在redis配置文件中. 配置rename-command CONFIG “RENAME_CONFIG”, 这样即使存在未授权访问, 也能够给攻击者使用config指令加大难度 好消息是Redis作者表示将会开发”real user”，区分普通用户和admin权限，普通用户将会被禁止运行某些命令，如config 具体解决方法首先，按照上面发生的一些事故，确实我的服务器已经被他植入了公钥 因为我发生此事后，多次修改了远程访问服务的密码(完全没效果) vim ~/.ssh/authotrized_keys 的公钥，确实有被修改的 这也导致我 ssh server 的时候，居然是没有免密的，但是我覆盖后，还是被阿里云服务器通知之前的异常，只能表示，他可能是远程访问是通过临时加在公钥，公钥的文件在我的服务器上 本来打算设置制定 ip 访问 redis 服务器，但是这样设定有影响（多台服务器的话，你要一直修改该配置） 重新 bind 了redis的默认端口 设置了 requirepass https://blog.csdn.net/a491857321/article/details/51985453 根据阿里云云盾的漏洞提示生成对应的修复命令 遇到如下问题12345678910111213 [root@iZuf6iq8e7ya9v3ix71k0pZ ~]# yum update gnutls 已加载插件：fastestmirror http://mirrors.cloud.aliyuncs.com/centos/7/os/x86_64/repodata/repomd.xml: [Errno 14] curl#6 - "Could not resolve host: mirrors.cloud.aliyuncs.com; 未知的名称或服务" 正在尝试其它镜像。 http://mirrors.cloud.aliyuncs.com/epel/7/x86_64/repodata/repomd.xml: [Errno 14] curl#6 - "Could not resolve host: mirrors.cloud.aliyuncs.com; 未知的名称或服务" 正在尝试其它镜像。 http://mirrors.cloud.aliyuncs.com/centos/7/extras/x86_64/repodata/repomd.xml: [Errno 14] curl#6 - "Could not resolve host: mirrors.cloud.aliyuncs.com; 未知的名称或服务" 正在尝试其它镜像。 gitlab_gitlab-ce/x86_64/signature …failure: repodata/repomd.xml from epel: [Errno 256] No more mirrors to try.http://mirrors.cloud.aliyuncs.com/epel/7/x86_64/repodata/repomd.xml: [Errno 14] curl#6 - "Could not resolve host: mirrors.cloud.aliyuncs.com; 未知的名称或服务" 参考 [Name or service not known] [修改CentOS默认yum源为国内yum镜像源] 【暂时这样处理，结果待跟进….】]]></content>
      <categories>
        <category>NoSQL</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS Sierra 连接vpn报错问题]]></title>
    <url>%2F2018%2F03%2F30%2FmacOS-Sierra-%E8%BF%9E%E6%8E%A5vpn%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[背景之前都是用的vpn软件直接翻墙的，突然前几天老哥(马尼拉)发个信息给我，给了我两个vpn账号，分别是hongkang和korea地区的；windows 新建连接/网络-连接到工作区-创建连接(输入相关信息)，直接连接上了，我的 mac 电脑是怎么连接都连接不上，最开始报密钥的相关错误。 解决密钥问题到后面通过网上的建议，直接在 /etc/ppp 目录下新建一个文件 options，写入下面的内容12plugin L2TP.pppl2tpnoipsec 密钥的错误是没有报了（该方式是跳过密钥验证），但是后面报：【VPN 连接，L2TP-VPN 服务器没有响应。请尝试重新连接。如果仍然有问题，请验证您的设置并与管理员联系】。 解决 L2TP-VPN 服务器没有响应网上也有大量的人遇到类似的问题，回复有两种情况，有秒解决的，有没效果的，后面发现出现两个解决的原因可能是大家用的系统不同，我是15年的 MBP，所以 mac OS Sierra 他不支持 PPTP/L2TP 这种形式，但是有网友提到通过第三方软件的形式设置 VPN，第三方软件是支持 PPTP/L2TP 形式的，Shimo 下载地址，后面的操作就很简单了，直接 create vpn，设置 vpn 的连接方式，输入账号，立刻生效了！也写此文给哪些遇到相关问题的人。]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat 热部署]]></title>
    <url>%2F2018%2F03%2F25%2FTomcat-%E7%83%AD%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[Tomcat的后台管理功能Tomcat有个后台管理功能，可以实现工程热部署 配置 Tomcat 后台授权用户123456789101112131415[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# vim tomcat-8081/conf/tomcat-users.xml......&lt;!-- &lt;role rolename="tomcat"/&gt; &lt;role rolename="role1"/&gt; &lt;user username="tomcat" password="&lt;must-be-changed&gt;" roles="tomcat"/&gt; &lt;user username="both" password="&lt;must-be-changed&gt;" roles="tomcat,role1"/&gt; &lt;user username="role1" password="&lt;must-be-changed&gt;" roles="role1"/&gt;--&gt; &lt;role rolename="manager-gui"/&gt; &lt;role rolename="manager-script"/&gt; &lt;user username="root" password="root" roles="manager-gui,manager-script"/&gt;&lt;/tomcat-users&gt; 刷新manager.html页面，还是403，后面重新启动tomcat,403,这就奇怪了… 还是403后面查看相关tomcat官网，还需要此manager.xml文件，赋予远程管理的权限Each deployed webapp has a context.xml file that lives in $CATALINA_BASE/conf/[enginename]/[hostname] (conf/Catalina/localhost by default) and has the same name as the webapp (manager.xml in this case). If no file is present, default values are used.So, you need to create a file conf/Catalina/localhost/manager.xml and specify the rule you want to allow remote access.12345678[root@iZuf6iq8e7ya9v3ix71k0pZ localhost]# pwd/usr/local/tomcat/tomcat-8081/conf/Catalina/localhost[root@iZuf6iq8e7ya9v3ix71k0pZ localhost]# vim manager.xml...&lt;Context privileged="true" antiResourceLocking="false"​ docBase="$&#123;catalina.home&#125;/webapps/manager"&gt;​ &lt;Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="^.*$" /&gt;&lt;/Context&gt;重新启动 tomcat，刷新manger.html 发布服务到服务器端配置二级域名解析 服务的分布结构8083 manager.smniuhe.com rudy-manager-web(表现层)8084 smniuhe.com:8084 rudy-manager(服务层)8085 smniuhe.com:8085 rudy-content(服务层)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465# 查看服务器内存占用情况[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# free -m​ total used free shared buff/cache availableMem: 3790 1707 793 0 1289 1831Swap: 0 0 0# 释放网页缓存，目录项和索引[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# sync[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# echo 3 &gt; /proc/sys/vm/drop_caches[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# free -m​ total used free shared buff/cache availableMem: 3790 1706 1994 0 89 1914Swap: 0 0 0[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# ll总用量 9480-rw-r--r-- 1 root root 9536557 1月 30 23:28 apache-tomcat-8.5.27.tar.gz-rw-r----- 1 root root 156775 3月 26 11:36 dubbo-governance.logdrwxr-xr-x 9 root root 4096 3月 26 11:36 tomcat-8081drwxr-xr-x 9 root root 4096 3月 20 13:38 tomcat-8083# cp热部署配置[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# cp tomcat-8081/conf/Catalina/localhost/manager.xml tomcat-8083/conf/Catalina/localhost/[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# vim tomcat-8083/conf/tomcat-users.xml...... &lt;role rolename="manager-gui"/&gt; &lt;role rolename="manager-script"/&gt; &lt;user username="root" password="root" roles="manager-gui,manager-script"/&gt;[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# cp -rf tomcat-8083 tomcat-8084[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# cp -rf tomcat-8083 tomcat-8085[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# vim tomcat-8084/conf/server.xml[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# vim tomcat-8085/conf/server.xml[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# vim start-345.sh.../usr/local/tomcat/tomcat-8083/bin/startup.sh/usr/local/tomcat/tomcat-8084/bin/startup.sh/usr/local/tomcat/tomcat-8085/bin/startup.sh[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# chmod +x start-345.sh[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# vim stop-345.sh.../usr/local/tomcat/tomcat-8083/bin/shutdown.sh/usr/local/tomcat/tomcat-8084/bin/shutdown.sh/usr/local/tomcat/tomcat-8085/bin/shutdown.sh[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# chmod +x stop-345.sh[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# ./start-345.sh# 配置maven插件&lt;build&gt;​ &lt;plugins&gt;​ &lt;plugin&gt;​ &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;​ &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;​ &lt;configuration&gt;​ &lt;path&gt;/&lt;/path&gt;​ &lt;port&gt;8080&lt;/port&gt;​ &lt;url&gt;http://smniuhe.com:8084/manager/text&lt;/url&gt;​ &lt;username&gt;root&lt;/username&gt;​ &lt;password&gt;root&lt;/password&gt;​ &lt;/configuration&gt;​ &lt;/plugin&gt;​ &lt;/plugins&gt;​ &lt;/build&gt;# create maven-redeployConfiguraion：clean tomcat7:redeploy -DskipTests 热部署图]]></content>
      <categories>
        <category>Web Server</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>热部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx web服务器的搭建]]></title>
    <url>%2F2018%2F03%2F19%2Fnginx-web%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[安装相关环境1234[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# yum install gcc-c++[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# yum install -y pcre pcre-devel[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# yum install -y zlib zlib-devel[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# yum install -y openssl openssl-devel 下载nginx稳定版1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# wget http://nginx.org/download/nginx-1.12.2.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# tar zxvf nginx-1.12.2.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# ll nginx-1.12.2总用量 724drwxr-xr-x 6 www www 4096 3月 19 21:47 auto-rw-r--r-- 1 www www 278202 10月 17 21:16 CHANGES-rw-r--r-- 1 www www 423948 10月 17 21:16 CHANGES.rudrwxr-xr-x 2 www www 4096 3月 19 21:47 conf-rwxr-xr-x 1 www www 2481 10月 17 21:16 configuredrwxr-xr-x 4 www www 4096 3月 19 21:47 contribdrwxr-xr-x 2 www www 4096 3月 19 21:47 html-rw-r--r-- 1 www www 1397 10月 17 21:16 LICENSEdrwxr-xr-x 2 www www 4096 3月 19 21:47 man-rw-r--r-- 1 www www 49 10月 17 21:16 READMEdrwxr-xr-x 9 www www 4096 3月 19 21:47 src[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# cd nginx-1.12.2# 注意：启动nginx之前，上边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录# 第三步：进入nginx目录，使用configure命令创建一makeFile文件[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# cd nginx-1.12.2 ./configure \--prefix=/usr/local/nginx \--pid-path=/var/run/nginx/nginx.pid \--lock-path=/var/lock/nginx.lock \--error-log-path=/var/log/nginx/error.log \--http-log-path=/var/log/nginx/access.log \--with-http_gzip_static_module \--http-client-body-temp-path=/var/temp/nginx/client \--http-proxy-temp-path=/var/temp/nginx/proxy \--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \--http-scgi-temp-path=/var/temp/nginx/scgi[root@iZuf6iq8e7ya9v3ix71k0pZ nginx-1.12.2]# ll总用量 732drwxr-xr-x 6 www www 4096 3月 19 21:47 auto-rw-r--r-- 1 www www 278202 10月 17 21:16 CHANGES-rw-r--r-- 1 www www 423948 10月 17 21:16 CHANGES.rudrwxr-xr-x 2 www www 4096 3月 19 21:47 conf-rwxr-xr-x 1 www www 2481 10月 17 21:16 configuredrwxr-xr-x 4 www www 4096 3月 19 21:47 contribdrwxr-xr-x 2 www www 4096 3月 19 21:47 html-rw-r--r-- 1 www www 1397 10月 17 21:16 LICENSE-rw-r--r-- 1 root root 355 3月 19 22:22 Makefiledrwxr-xr-x 2 www www 4096 3月 19 21:47 mandrwxr-xr-x 3 root root 4096 3月 19 22:22 objs-rw-r--r-- 1 www www 49 10月 17 21:16 READMEdrwxr-xr-x 9 www www 4096 3月 19 21:47 src# 有个makefile,make编译[root@iZuf6iq8e7ya9v3ix71k0pZ nginx-1.12.2]# make# 安装[root@iZuf6iq8e7ya9v3ix71k0pZ nginx-1.12.2]# make install[root@iZuf6iq8e7ya9v3ix71k0pZ nginx-1.12.2]# cd /usr/local/nginx/[root@iZuf6iq8e7ya9v3ix71k0pZ nginx]# ll总用量 12drwxr-xr-x 2 root root 4096 3月 19 22:25 confdrwxr-xr-x 2 root root 4096 3月 19 22:25 htmldrwxr-xr-x 2 root root 4096 3月 19 22:25 sbin# 启动nginx[root@iZuf6iq8e7ya9v3ix71k0pZ nginx]# cd sbin/[root@iZuf6iq8e7ya9v3ix71k0pZ sbin]# ll总用量 3608-rwxr-xr-x 1 root root 3692808 3月 19 22:25 nginx[root@iZuf6iq8e7ya9v3ix71k0pZ sbin]# ./nginx[root@iZuf6iq8e7ya9v3ix71k0pZ sbin]# ps -aux|grep nginxroot 4775 0.0 0.0 20488 612 ? Ss 22:27 0:00 nginx: master process ./nginxnobody 4776 0.0 0.0 20928 1332 ? S 22:27 0:00 nginx: worker processroot 4785 0.0 0.0 112664 976 pts/1 R+ 22:27 0:00 grep --color=auto nginx# 关闭nginx[root@iZuf6iq8e7ya9v3ix71k0pZ sbin]# ./nginx -s stop[root@iZuf6iq8e7ya9v3ix71k0pZ sbin]# ps -aux|grep nginxroot 4801 0.0 0.0 112664 976 pts/1 S+ 22:30 0:00 grep --color=auto nginx[root@iZuf6iq8e7ya9v3ix71k0pZ sbin]## 不关闭情况下，重新加载配置[root@iZuf6iq8e7ya9v3ix71k0pZ sbin]# ./nginx -s reload 启动成功测试 通过端口区分虚拟主机1234567891011121314151617181920212223242526[root@iZuf6iq8e7ya9v3ix71k0pZ nginx]# cp -r html/ html81[root@iZuf6iq8e7ya9v3ix71k0pZ nginx]# vim conf/nginx.confserver &#123; listen 81; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; root html81; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;[root@iZuf6iq8e7ya9v3ix71k0pZ nginx]# sbin/nginx -s reload 通过域名区分虚拟主机1234567891011121314151617181920212223242526[root@iZuf6iq8e7ya9v3ix71k0pZ nginx]# cp -r html/ html-xyz[root@iZuf6iq8e7ya9v3ix71k0pZ nginx]# vim conf/nginx.confserver &#123; listen 80; server_name smniuhe.xyz; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; root html-xyz; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;[root@iZuf6iq8e7ya9v3ix71k0pZ nginx]# sbin/nginx -s reload 反向代理12345678910111213141516171819202122232425[root@iZuf6iq8e7ya9v3ix71k0pZ nginx]# vim conf/nginx.confupstream tomcat8081 &#123; server smniuhe.com:8081; &#125; server &#123; listen 80; server_name smniuhe.com; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; proxy_pass http://tomcat8081; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;[root@iZuf6iq8e7ya9v3ix71k0pZ nginx]# sbin/nginx -s reload 负载均衡weight：设置对应服务器的权重，默认为11234567891011121314151617181920212223242526[root@iZuf6iq8e7ya9v3ix71k0pZ nginx]# vim conf/nginx.confupstream tomcat8081 &#123; server smniuhe.com:8081 weight=1; server smniuhe.com:8083 weight=1; &#125; server &#123; listen 80; server_name smniuhe.com; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; proxy_pass http://tomcat8081; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;[root@iZuf6iq8e7ya9v3ix71k0pZ nginx]# sbin/nginx -s reload]]></content>
      <categories>
        <category>技术积累</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>web服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text3 多行编辑的技巧]]></title>
    <url>%2F2018%2F03%2F17%2FSublime-Text3-%E5%A4%9A%E8%A1%8C%E7%BC%96%E8%BE%91%E7%9A%84%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[应用场景有时候，我们操作的的 pojo 下对应的属性过多，这个时候多行编辑非常有用，熟悉掌握开发效率也会跳高 Command + Ctrl + G 选中相同的文本Command + Left(Rgiht) 光标移动到行首(尾)Option + Left(Rgiht) 光标向左(右)移动一个词源Left(Rgiht) 光标左右移动一个位置 五种Sublime text 3同时快速编辑多行内容地址 展示可以在本博客搜索 sublime text 快捷键，查看字符转换大小快捷键]]></content>
      <categories>
        <category>smart</category>
      </categories>
      <tags>
        <tag>Sublime Text3</tag>
        <tag>多行编辑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ActiveMQ 的搭建]]></title>
    <url>%2F2018%2F03%2F16%2FActiveMQ-%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[搭建1234567891011121314# 通过sftp上传压缩包sftp&gt; put /Users/niuhesm/resouces/major/remoteServer/apache-activemq-5.15.3-bin.tar.gz /root# 启动消息队列服务[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# tar zxvf apache-activemq-5.15.3-bin.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# cd apache-activemq-5.15.3/bin[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ./activemq startINFO: Loading '/root/apache-activemq-5.15.3//bin/env'INFO: Using java '/usr/bin/java'INFO: Starting - inspect logfiles specified in logging.properties and log4j.properties to get detailsINFO: pidfile created : '/root/apache-activemq-5.15.3//data/activemq.pid' (pid '15876')[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# 后台管理页面 机器名和ip地址的映射(后台如果出现503错误)123456789101112[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# cat /etc/sysconfig/network# Created by anacondaPEERNTP=noNETWORKING_IPV6=noGATEWAY=172.xx.xx.253HOSTNAME=iZuf6iq8e7ya9v3ix71k0pZ[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# cat /etc/hosts127.0.0.1 localhost::1 localhost localhost.localdomain localhost6 localhost6.localdomain6106.xx.xx.27 iZuf6iq8e7ya9v3ix71k0pZ#172.19.106.154 iZuf6iq8e7ya9v3ix71k0pZ[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# 应用taotao-manager​ 添加商品，发送信息taotao-search​ 接受信息，同步 solr 库https://github.com/SmNiuhe/taotao]]></content>
      <categories>
        <category>middleware</category>
      </categories>
      <tags>
        <tag>消息中间件</tag>
        <tag>ActiveMQ</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[solr 集群搭建]]></title>
    <url>%2F2018%2F03%2F13%2Fsolr-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[搭建zookeeper集群12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# cd /usr/local/[root@iZuf6iq8e7ya9v3ix71k0pZ local]# mkdir solr-cluster[root@iZuf6iq8e7ya9v3ix71k0pZ local]# cd solr-cluster/[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp /usr/local/zookeeper/zookeeper-3.4.10.tar.gz /usr/local/solr-cluster/[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# tar zxvf zookeeper-3.4.10.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# mv zookeeper-3.4.10 zookeeper01[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r zookeeper01 zookeeper02[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r zookeeper01 zookeeper03[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# rm -rf zookeeper-3.4.10.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# ll总用量 12drwxr-xr-x 10 root root 4096 3月 13 16:33 zookeeper01drwxr-xr-x 10 root root 4096 3月 13 16:32 zookeeper02drwxr-xr-x 10 root root 4096 3月 13 16:32 zookeeper03&lt;!-- more --&gt;#创建 data 目录，并创建 myid 文件，编辑标识 1[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# mkdir data[root@iZuf6iq8e7ya9v3ix71k0pZ data]# vim myid (或者echo 1 &gt; myid)1~~~~~:wq# 重命名配置文件，修改配置文件[root@iZuf6iq8e7ya9v3ix71k0pZ data]# cd ../conf[root@iZuf6iq8e7ya9v3ix71k0pZ conf]# mv zoo_sample.cfg zoo.cfg[root@iZuf6iq8e7ya9v3ix71k0pZ conf]# vim zoo.cfg# The number of milliseconds of each ticktickTime=2000# The number of ticks that the initial# synchronization phase can takeinitLimit=10# The number of ticks that can pass between# sending a request and getting an acknowledgementsyncLimit=5# the directory where the snapshot is stored.# do not use /tmp for storage, /tmp here is just# example sakes.dataDir=/tmp/zookeeper# the port at which the clients will connectclientPort=2181# the maximum number of client connections.# increase this if you need to handle more clients#maxClientCnxns=60# 参数说明clientPort=客户端连接端口dataDir=data目录(/usr/local/solr-cluster/zookeeper01/data)server.1=127.0.0.1:2881:3881 (1 myid标识,2881 zookeeper 连接内部通讯端口,3881 选举端口) 配置修改如下12345678910111213141516171819202122232425262728293031323334# The number of milliseconds of each ticktickTime=2000# The number of ticks that the initial# synchronization phase can takeinitLimit=10# The number of ticks that can pass between# sending a request and getting an acknowledgementsyncLimit=5# the directory where the snapshot is stored.# do not use /tmp for storage, /tmp here is just# example sakes.dataDir=/usr/local/solr-cluster/zookeeper01/data# the port at which the clients will connectclientPort=2182# the maximum number of client connections.# increase this if you need to handle more clients#maxClientCnxns=60## Be sure to read the maintenance section of the# administrator guide before turning on autopurge.## http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance## The number of snapshots to retain in dataDir#autopurge.snapRetainCount=3# Purge task interval in hours# Set to "0" to disable auto purge feature#autopurge.purgeInterval=1server.1=127.0.0.1:2881:3881server.2=127.0.0.1:2882:3882server.3=127.0.0.1:2883:3883# 配置zookeeper02,03[root@iZuf6iq8e7ya9v3ix71k0pZ sorl-cluster] 生成批处理文件，启动并查看状态123456789101112131415161718192021222324252627282930313233343536373839404142434445# 创建批处理文件[root@iZuf6iq8e7ya9v3ix71k0pZ sorl-cluster] vim start-zookeeper.sh▽cd zookeeper01/bin./zkServer.sh startcd ../../cd zookeeper02/bin./zkServer.sh startcd ../../cd zookeeper03/bin./zkServer.sh startcd ../../~~~~"start-zookeeper.sh" 9L, 147C# 授权[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# chmod +x start-zookeeper.sh# 启动查看状态[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# ./start-zookeeper.shZooKeeper JMX enabled by defaultUsing config: /usr/local/solr-cluster/zookeeper01/bin/../conf/zoo.cfgStarting zookeeper ... STARTEDZooKeeper JMX enabled by defaultUsing config: /usr/local/solr-cluster/zookeeper02/bin/../conf/zoo.cfgStarting zookeeper ... STARTEDZooKeeper JMX enabled by defaultUsing config: /usr/local/solr-cluster/zookeeper03/bin/../conf/zoo.cfgStarting zookeeper ... STARTED[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# zookeeper01/bin/zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: /usr/local/solr-cluster/zookeeper01/bin/../conf/zoo.cfgMode: follower[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# zookeeper02/bin/zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: /usr/local/solr-cluster/zookeeper02/bin/../conf/zoo.cfgMode: leader[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# zookeeper03/bin/zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: /usr/local/solr-cluster/zookeeper03/bin/../conf/zoo.cfgMode: follower[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# 搭建solr集群12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp /usr/local/tomcat/apache-tomcat-8.5.27.tar.gz /usr/local/solr-cluster/[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# tar zxvf apache-tomcat-8.5.27.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# rm -rf apache-tomcat-8.5.27.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# mv apache-tomcat-8.5.27/ tomcat01[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r tomcat01/ tomcat02[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r tomcat01/ tomcat02[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r tomcat01/ tomcat03[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r tomcat01/ tomcat04[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim tomcat01/conf/server.xml tomcat01 tomcat02 tomcat03 tomcat048005 +10 8015 8016 8017 80188080 +10 8090 8091 8092 8093 8009 +10 8019 8020 8021 8022[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# ll总用量 32-rwxr-xr-x 1 root root 147 3月 13 17:36 start-zookeeper.shdrwxr-xr-x 9 root root 4096 3月 14 09:57 tomcat01drwxr-xr-x 9 root root 4096 3月 14 10:00 tomcat02drwxr-xr-x 9 root root 4096 3月 14 10:01 tomcat03drwxr-xr-x 9 root root 4096 3月 14 10:01 tomcat04drwxr-xr-x 11 root root 4096 3月 13 16:39 zookeeper01drwxr-xr-x 11 root root 4096 3月 13 17:02 zookeeper02drwxr-xr-x 11 root root 4096 3月 13 17:28 zookeeper03# 复制solr相关配置[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r /usr/local/solr/tomcat-8082/webapps/solr/ /usr/local/solr-cluster/tomcat01/webapps/[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r /usr/local/solr/tomcat-8082/webapps/solr/ /usr/local/solr-cluster/tomcat02/webapps/[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r /usr/local/solr/tomcat-8082/webapps/solr/ /usr/local/solr-cluster/tomcat03/webapps/[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r /usr/local/solr/tomcat-8082/webapps/solr/ /usr/local/solr-cluster/tomcat04/webapps/[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r /usr/local/solr/solrhome /usr/local/solr-cluster/solrhome01[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r /usr/local/solr/solrhome /usr/local/solr-cluster/solrhome02[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r /usr/local/solr/solrhome /usr/local/solr-cluster/solrhome03[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# cp -r /usr/local/solr/solrhome /usr/local/solr-cluster/solrhome04# 修改solrcloud配置(solrtomcat01为例)[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim solrhome01/solr.xml [root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim solrhome02/solr.xml [root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim solrhome03/solr.xml [root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim solrhome04/solr.xml &lt;solr&gt; &lt;solrcloud&gt; &lt;str name="host"&gt;$&#123;host:&#125;&lt;/str&gt; &lt;int name="hostPort"&gt;$&#123;jetty.port:8983&#125;&lt;/int&gt;......&lt;solr&gt; &lt;solrcloud&gt; &lt;str name="host"&gt;127.0.0.1&lt;/str&gt; &lt;int name="hostPort"&gt;8090&lt;/int&gt;# solr实例绑定对应的solrhome(solrhome1为例)[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim tomcat01/webapps/solr/WEB-INF/web.xml[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim tomcat02/webapps/solr/WEB-INF/web.xml[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim tomcat03/webapps/solr/WEB-INF/web.xml[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim tomcat04/webapps/solr/WEB-INF/web.xml&lt;env-entry&gt; &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt; &lt;env-entry-value&gt;/usr/local/solr/solrhome&lt;/env-entry-value&gt; &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;&lt;/env-entry&gt;......&lt;env-entry&gt; &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt; &lt;env-entry-value&gt;/usr/local/solr-cluster/solrhome01&lt;/env-entry-value&gt; &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;&lt;/env-entry&gt; tomcat关联zookeeper1234567[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim tomcat01/bin/catalina.sh[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim tomcat02/bin/catalina.sh[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim tomcat03/bin/catalina.sh[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim tomcat04/bin/catalina.sh......JAVA_OPTS="-DzkHost=127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184" zookeeper 统一管理配置文件123456789101112131415161718192021222324252627# 让zookeeper统一管理配置文件。需要把solrhome/mycore/conf目录上传到zookeeper。上传任意solrhome中的配置文件即可。# ./zkcli.sh -zkhost 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184 -cmd upconfig -confdir /usr/local/solr-cluster/solrhome01/mycore/conf/ -confname myconf[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# cd solr-7.2.1/server/scripts/cloud-scripts/[root@iZuf6iq8e7ya9v3ix71k0pZ cloud-scripts]# ./zkcli.sh -zkhost 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184 -cmd upconfig -confdir /usr/local/solr-cluster/solrhome01/mycore/conf/ -confname myconf# 查看上传的文件[root@iZuf6iq8e7ya9v3ix71k0pZ cloud-scripts]# cd /usr/local/solr-cluster/zookeeper01/bin/[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ./zkCli.sh -server 127.0.0.1:2182[zk: 127.0.0.1:2182(CONNECTED) 2] ls /configs/myconf[data-config.xml, managed-schema, protwords.txt, solrconfig.xml, synonyms.txt, stopwords.txt, dataimport.properties, params.json, lang, managed-schema的副本][zk: 127.0.0.1:2182(CONNECTED) 3]# 创建快速启动文件[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim start-tomcat.sh[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# chmod +x start-tomcat.sh/usr/local/solr-cluster/tomcat01/bin/startup.sh/usr/local/solr-cluster/tomcat02/bin/startup.sh/usr/local/solr-cluster/tomcat03/bin/startup.sh/usr/local/solr-cluster/tomcat04/bin/startup.sh[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# vim stop-tomcat.sh[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# chmod +x stop-tomcat.sh/usr/local/solr-cluster/tomcat01/bin/shutdown.sh/usr/local/solr-cluster/tomcat02/bin/shutdown.sh/usr/local/solr-cluster/tomcat03/bin/shutdown.sh/usr/local/solr-cluster/tomcat04/bin/shutdown.sh[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# ./start-tomcat.sh 访问xxxxxx:8090/solr/index.html 报错：SolrCore Initialization Failureshttps://segmentfault.com/q/1010000012076404/a-1020000012123299原因：solr启动的时候会去检测home的collection，但是你那个core1是从单节点拷贝过来的，结构上肯定不一样，单节点上core和collection可以理解成相等的，集群中collection是有分布在不通节点上的core组成的1234[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# rm -rf solrhome01/mycore[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# rm -rf solrhome02/mycore[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# rm -rf solrhome03/mycore[root@iZuf6iq8e7ya9v3ix71k0pZ solr-cluster]# rm -rf solrhome04/mycore]]></content>
      <categories>
        <category>技术积累</category>
      </categories>
      <tags>
        <tag>solr</tag>
        <tag>solr-cluster</tag>
        <tag>solr 集群</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo localSearch]]></title>
    <url>%2F2018%2F03%2F07%2Fhexo-localSearch%2F</url>
    <content type="text"><![CDATA[补充说明博文写的很清晰，但是有人难免会不清楚配置到哪里 EZLippi个人博客 配置的搜索相关参数 123456站点(博客的根目录) /users/xxx/bloghome/blog1/themes/next/_config.xmlsearch: path: search.xml field: post format: html limit: 10000 主题的配置文件中开启搜索功能 123456789/users/xxx/bloghome/blog1/themes/next/_config.xmllocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>search</tag>
        <tag>站内搜索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[chrome 搜索引擎功能]]></title>
    <url>%2F2018%2F03%2F07%2Fchrome-%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[发现输入 sf.gg 突然发现浏览器输入窗口有变化， 配置搜索引擎设置&gt;搜索引擎&gt;管理搜索引擎三个设置参数：搜索引擎关键字网站（用“%s”代替搜索内容） 网站该如何设置了你使用百度，谷歌，360，搜狗，github，知乎，你会发现他们有很多参数，但 url 基本可以归纳为 domain?q=%s demo]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>chrome</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis 集群配置]]></title>
    <url>%2F2018%2F03%2F05%2Fredis-%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[redis 集群准备1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495# 拷贝环境，如果存在 dump.rdb，记得rm[root@iZuf6iq8e7ya9v3ix71k0pZ local]# mkdir redis-cluster[root@iZuf6iq8e7ya9v3ix71k0pZ local]# cp -r redis/bin redis-cluster/redis01[root@iZuf6iq8e7ya9v3ix71k0pZ local]#&lt;!-- more --&gt;# 设置 redis.conf，修改 port，并开启集群模式[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# vim redis01/redis.confport 6379 改为 port 7001cluster-enabled yes......[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# ll总用量 24drwxr-xr-x 2 root root 4096 3月 5 23:58 redis01drwxr-xr-x 2 root root 4096 3月 5 23:57 redis02drwxr-xr-x 2 root root 4096 3月 5 23:57 redis03drwxr-xr-x 2 root root 4096 3月 5 23:57 redis04drwxr-xr-x 2 root root 4096 3月 5 23:57 redis05drwxr-xr-x 2 root root 4096 3月 5 23:57 redis06# 创建 .sh 批处理文件，批量启动[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# vim start-all.shcd redis01./redis-server redis.confcd ..cd redis02./redis-server redis.confcd ..cd redis03./redis-server redis.confcd ..cd redis04./redis-server redis.confcd ..cd redis05./redis-server redis.confcd ..cd redis06./redis-server redis.confcd ..[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# chmod +x start-all.sh# 创建 .sh 批处理文件，批量停止[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# vim stop-all.shcd redis01./redis-cli -p 7001 shutdowncd ..cd redis02./redis-cli -p 7002 shutdowncd ..cd redis03./redis-cli -p 7003 shutdowncd ..cd redis04./redis-cli -p 7004 shutdowncd ..cd redis05./redis-cli -p 7005 shutdowncd ..cd redis06./redis-cli -p 7006 shutdowncd ..[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# chmod +x stop-all.sh# 启动server[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# ./start-all.sh8907:C 06 Mar 00:07:10.397 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo8907:C 06 Mar 00:07:10.397 # Redis version=4.0.8, bits=64, commit=00000000, modified=0, pid=8907, just started8907:C 06 Mar 00:07:10.397 # Configuration loaded8909:C 06 Mar 00:07:10.401 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo8909:C 06 Mar 00:07:10.401 # Redis version=4.0.8, bits=64, commit=00000000, modified=0, pid=8909, just started8909:C 06 Mar 00:07:10.401 # Configuration loaded8911:C 06 Mar 00:07:10.406 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo8911:C 06 Mar 00:07:10.406 # Redis version=4.0.8, bits=64, commit=00000000, modified=0, pid=8911, just started8911:C 06 Mar 00:07:10.406 # Configuration loaded8919:C 06 Mar 00:07:10.410 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo8919:C 06 Mar 00:07:10.411 # Redis version=4.0.8, bits=64, commit=00000000, modified=0, pid=8919, just started8919:C 06 Mar 00:07:10.411 # Configuration loaded8924:C 06 Mar 00:07:10.415 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo8924:C 06 Mar 00:07:10.415 # Redis version=4.0.8, bits=64, commit=00000000, modified=0, pid=8924, just started8924:C 06 Mar 00:07:10.415 # Configuration loaded8926:C 06 Mar 00:07:10.419 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo8926:C 06 Mar 00:07:10.419 # Redis version=4.0.8, bits=64, commit=00000000, modified=0, pid=8926, just started8926:C 06 Mar 00:07:10.419 # Configuration loaded[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# ps -aux|grep redisroot 8908 0.0 0.2 147300 9612 ? Ssl 00:07 0:00 ./redis-server *:7001 [cluster]root 8910 0.0 0.2 147300 9608 ? Ssl 00:07 0:00 ./redis-server *:7002 [cluster]root 8918 0.0 0.2 147300 9608 ? Ssl 00:07 0:00 ./redis-server *:7003 [cluster]root 8920 0.0 0.2 147300 9612 ? Ssl 00:07 0:00 ./redis-server *:7004 [cluster]root 8925 0.0 0.2 147300 9608 ? Ssl 00:07 0:00 ./redis-server *:7005 [cluster]root 8930 0.0 0.2 147300 9608 ? Ssl 00:07 0:00 ./redis-server *:7006 [cluster]root 8940 0.0 0.0 112664 972 pts/1 S+ 00:07 0:00 grep --color=auto redis[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# 下载并配资后 ruby 搭建 redis 集群所依赖的包https://rubygems.global.ssl.fastly.net/gems/redis-4.0.1.gem123456789101112131415161718192021sftp&gt; put /Users/niuhesm/Downloads/redis-4.0.1.gem /root[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# yum install ruby[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# gem install redis-4.0.1.gemERROR: Error installing redis-4.0.1.gem:​ redis requires Ruby version &gt;= 2.2.2.[root@iZuf6iq8e7ya9v3ix71k0pZ ~]## 由于不想更新 yum 源，换个方式更新 ruby 版本[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# yum remove ruby[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# wget https://cache.ruby-lang.org/pub/ruby/2.2/ruby-2.2.3.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# tar zxvf ruby-2.2.3.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# cd ruby-2.2.3[root@iZuf6iq8e7ya9v3ix71k0pZ ruby-2.2.3]# ./configure[root@iZuf6iq8e7ya9v3ix71k0pZ ruby-2.2.3]# make[root@iZuf6iq8e7ya9v3ix71k0pZ ruby-2.2.3]# sudo make install[root@iZuf6iq8e7ya9v3ix71k0pZ ruby-2.2.3]# ruby -vruby 2.2.3p173 (2015-08-18 revision 51636) [x86_64-linux]# 重新安装依赖包[root@iZuf6iq8e7ya9v3ix71k0pZ ~]# gem install redis-4.0.1.gem ruby 脚本搭建集群123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# cd /usr/local/redis/redis-4.0.8/src/[root@iZuf6iq8e7ya9v3ix71k0pZ src]# cp redis-trib.rb /usr/local/redis-cluster/[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# ./redis-trib.rb create --replicas 1 106.15.191.27:7001 106.15.191.27:7002 106.15.191.27:7003 106.15.191.27:7004 106.15.191.27:7005 106.15.191.27:7006&gt;&gt;&gt; Creating cluster&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Using 3 masters:106.15.191.27:7001106.15.191.27:7002106.15.191.27:7003Adding replica 106.15.191.27:7005 to 106.15.191.27:7001Adding replica 106.15.191.27:7006 to 106.15.191.27:7002Adding replica 106.15.191.27:7004 to 106.15.191.27:7003&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity[WARNING] Some slaves are in the same host as their masterM: ec761eb0418892ec5ddee2c9360d09e28174236a 106.15.191.27:7001 slots:0-5460 (5461 slots) masterM: 5ae347530fee2c4569fb2fc9b0c34a9e17d48399 106.15.191.27:7002 slots:5461-10922 (5462 slots) masterM: d1fef0edb0a6efe7b2c25d1628fa01e7aa31200d 106.15.191.27:7003 slots:10923-16383 (5461 slots) masterS: be0615cbdb26b634adeed9290557750e3bda7c5c 106.15.191.27:7004 replicates ec761eb0418892ec5ddee2c9360d09e28174236aS: caa925f9e8074f7ba23ee9e73d0c1d67eb8d829b 106.15.191.27:7005 replicates 5ae347530fee2c4569fb2fc9b0c34a9e17d48399S: 274b0e14d2cb0413c026cbb9606ed9b60d44f7fa 106.15.191.27:7006 replicates d1fef0edb0a6efe7b2c25d1628fa01e7aa31200dCan I set the above configuration? (type 'yes' to accept): yes&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join.....................................................................................................................................................^C./redis-trib.rb:653:in `sleep': Interrupt from ./redis-trib.rb:653:in `wait_cluster_join' from ./redis-trib.rb:1436:in `create_cluster_cmd' from ./redis-trib.rb:1830:in `&lt;main&gt;'[root@iZuf6iq8e7ya9v3ix71k0pZ]# # 出现此问题(WRNING] Some slaves are in the same host as their master)解决一：修改 redis.conf 下的 bind ip 的地址改为服务器实际地址 解决二：(由于只有一台服务器，也可以)./redis-trib.rb create --replicas 1 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006# 成功启动[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# ./redis-trib.rb create --replicas 1 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006&gt;&gt;&gt; Creating cluster&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Using 3 masters:127.0.0.1:7001127.0.0.1:7002127.0.0.1:7003Adding replica 127.0.0.1:7005 to 127.0.0.1:7001Adding replica 127.0.0.1:7006 to 127.0.0.1:7002Adding replica 127.0.0.1:7004 to 127.0.0.1:7003&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity[WARNING] Some slaves are in the same host as their masterM: 8495f96bb7cecaa753af70b0bd76c060d1a69a77 127.0.0.1:7001 slots:0-5460 (5461 slots) masterM: 701c093b7045eedc542f68a1cbfb1c59f1b36c1a 127.0.0.1:7002 slots:5461-10922 (5462 slots) masterM: 4cf1720b03f3db54abb8f0f1eeb743f7af7eacc9 127.0.0.1:7003 slots:10923-16383 (5461 slots) masterS: a1d3258ac24b74d72a5fe6d3a255bf6dbd337684 127.0.0.1:7004 replicates 701c093b7045eedc542f68a1cbfb1c59f1b36c1aS: 892d5474496613876cbc78ac5f903f39db94e8de 127.0.0.1:7005 replicates 4cf1720b03f3db54abb8f0f1eeb743f7af7eacc9S: fc2dfc9a44179023f2743c87c0bd7f9387728728 127.0.0.1:7006 replicates 8495f96bb7cecaa753af70b0bd76c060d1a69a77Can I set the above configuration? (type 'yes' to accept): yes&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join..&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7001)M: 8495f96bb7cecaa753af70b0bd76c060d1a69a77 127.0.0.1:7001 slots:0-5460 (5461 slots) master 1 additional replica(s)S: a1d3258ac24b74d72a5fe6d3a255bf6dbd337684 127.0.0.1:7004 slots: (0 slots) slave replicates 701c093b7045eedc542f68a1cbfb1c59f1b36c1aM: 4cf1720b03f3db54abb8f0f1eeb743f7af7eacc9 127.0.0.1:7003 slots:10923-16383 (5461 slots) master 1 additional replica(s)S: fc2dfc9a44179023f2743c87c0bd7f9387728728 127.0.0.1:7006 slots: (0 slots) slave replicates 8495f96bb7cecaa753af70b0bd76c060d1a69a77M: 701c093b7045eedc542f68a1cbfb1c59f1b36c1a 127.0.0.1:7002 slots:5461-10922 (5462 slots) master 1 additional replica(s)S: 892d5474496613876cbc78ac5f903f39db94e8de 127.0.0.1:7005 slots: (0 slots) slave replicates 4cf1720b03f3db54abb8f0f1eeb743f7af7eacc9[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]## 测试[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# redis01/redis-cli -p 7001 -c127.0.0.1:7001&gt; set key1 aaa-&gt; Redirected to slot [9189] located at 127.0.0.1:7002OK127.0.0.1:7002&gt; keys *1) "key1"# 查看集群的信息 127.0.0.1:7002&gt; cluster info# 查看节点信息127.0.0.1:7002&gt; cluster nodes 相关错误123[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# ./redis-trib.rb create --replicas 1 106.15.191.27:7001 106.15.191.27:7002 106.15.191.27:7003 106.15.191.27:7004 106.15.191.27:7005 106.15.191.27:7006&gt;&gt;&gt; Creating cluster[ERR] Node 106.15.191.27:7002 is not empty. Either the node already knows other nodes (check with CLUSTER NODES) or contains some key in database 0. 解决：http://blog.csdn.net/vtopqx/article/details/50235737 12345678910111213141516171819202122232425262728293031323334353637[root@iZuf6iq8e7ya9v3ix71k0pZ redis-cluster]# ./redis-trib.rb create --replicas 1 106.15.191.27:7001 106.15.191.27:7002 106.15.191.27:7003 106.15.191.27:7004 106.15.191.27:7005 106.15.191.27:7006&gt;&gt;&gt; Creating cluster&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Using 3 masters:106.15.191.27:7001106.15.191.27:7002106.15.191.27:7003Adding replica 106.15.191.27:7005 to 106.15.191.27:7001Adding replica 106.15.191.27:7006 to 106.15.191.27:7002Adding replica 106.15.191.27:7004 to 106.15.191.27:7003&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity[WARNING] Some slaves are in the same host as their masterM: f2387ef8a1ff7770623ae9545bea3ad9a632da52 106.15.191.27:7001 slots:0-5460 (5461 slots) masterM: 58ab432ad1e25b9699a2552442e6e1b84d07473c 106.15.191.27:7002 slots:5461-10922 (5462 slots) masterM: 8a8276597cc83b02d39f845f7a0bf51e0a7a27b3 106.15.191.27:7003 slots:10923-16383 (5461 slots) masterS: c292b2833e1c76d0b69da96ebf35d9113262f458 106.15.191.27:7004 replicates 58ab432ad1e25b9699a2552442e6e1b84d07473cS: 2b94f8ede1a83302a719d6839c7b9ce79669e33f 106.15.191.27:7005 replicates 8a8276597cc83b02d39f845f7a0bf51e0a7a27b3S: 16e3c1535950a7bc02bb45993a70250d3402db05 106.15.191.27:7006 replicates f2387ef8a1ff7770623ae9545bea3ad9a632da52Can I set the above configuration? (type 'yes' to accept): yes/usr/local/lib/ruby/gems/2.2.0/gems/redis-4.0.1/lib/redis/client.rb:119:in `call': ERR Slot 9189 is already busy (Redis::CommandError) from /usr/local/lib/ruby/gems/2.2.0/gems/redis-4.0.1/lib/redis.rb:2764:in `block in method_missing' from /usr/local/lib/ruby/gems/2.2.0/gems/redis-4.0.1/lib/redis.rb:45:in `block in synchronize' from /usr/local/lib/ruby/2.2.0/monitor.rb:211:in `mon_synchronize' from /usr/local/lib/ruby/gems/2.2.0/gems/redis-4.0.1/lib/redis.rb:45:in `synchronize' from /usr/local/lib/ruby/gems/2.2.0/gems/redis-4.0.1/lib/redis.rb:2763:in `method_missing' from ./redis-trib.rb:212:in `flush_node_config' from ./redis-trib.rb:906:in `block in flush_nodes_config' from ./redis-trib.rb:905:in `each' from ./redis-trib.rb:905:in `flush_nodes_config' from ./redis-trib.rb:1426:in `create_cluster_cmd' from ./redis-trib.rb:1830:in `&lt;main&gt;' 解决：删除相关的 dump.rdb,nodes-700x.conf]]></content>
      <categories>
        <category>NoSQL</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>redis 集群</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dubbo 启动服务器提供者，ip 绑定错乱]]></title>
    <url>%2F2018%2F02%2F19%2Fdubbo-%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8F%90%E4%BE%9B%E8%80%85%EF%BC%8Cip-%E7%BB%91%E5%AE%9A%E9%94%99%E4%B9%B1%2F</url>
    <content type="text"><![CDATA[服务配置1234&lt;dubbo:application name="taotao-manager"/&gt;​ &lt;dubbo:registry address="zookeeper://106.15.xxx.xxx:2181" /&gt;​ &lt;dubbo:protocol name="dubbo" port="20881" /&gt;​ &lt;dubbo:service interface="com.smniuhe.service.ItemService" ref="itemServiceImpl" timeout="300000"/&gt; 启动正常 查看发布的服务1234[zk: 106.15.191.27:2181(CONNECTED) 1] ls /dubbo/com.smniuhe.service.ItemService/providers[dubbo%3A%2F%2F192.168.0.28%3A20880%2Fcom.smniuhe.service.ItemService%3Fanyhost%3Dtrue%26application%3Dtaotao-manager%26dubbo%3D2.8.4%26generic%3Dfalse%26interface%3Dcom.smniuhe.service.ItemService%26methods%3DgetTbItemById%26pid%3D32659%26revision%3D1.0- SNAPSHOT%26side%3Dprovider%26timeout%3D300000%26timestamp%3D1518972080865] 发现 192.168.0.28 是本地的 ip 地址]]></content>
      <categories>
        <category>serve register discovery</category>
      </categories>
      <tags>
        <tag>dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zookeeper 命令 查看发布的服务提供者和消费者]]></title>
    <url>%2F2018%2F02%2F18%2Fzookeeper-%E5%91%BD%E4%BB%A4-%E6%9F%A5%E7%9C%8B%E5%8F%91%E5%B8%83%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# pwd/usr/local/zookeeper/zookeeper-3.4.10/bin[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ./zkCli.sh -server 127.0.0.1:2181Connecting to 127.0.0.1:21812018-02-18 21:30:05,213 [myid:] - INFO [main:Environment@100] - Client environment:zookeeper.version=3.4.10-39d3a4f269333c922ed3db283be479f9deacaa0f, built on 03/23/2017 10:13 GMT2018-02-18 21:30:05,216 [myid:] - INFO [main:Environment@100] - Client environment:host.name=iZuf6iq8e7ya9v3ix71k0pZ2018-02-18 21:30:05,216 [myid:] - INFO [main:Environment@100] - Client environment:java.version=1.8.0_1112018-02-18 21:30:05,218 [myid:] - INFO [main:Environment@100] - Client environment:java.vendor=Oracle Corporation2018-02-18 21:30:05,218 [myid:] - INFO [main:Environment@100] - Client environment:java.home=/usr/java/jdk1.8.0_111/jre2018-02-18 21:30:05,219 [myid:] - INFO [main:Environment@100] - Client environment:java.class.path=/usr/local/zookeeper/zookeeper-3.4.10/bin/../build/classes:/usr/local/zookeeper/zookeeper-3.4.10/bin/../build/lib/*.jar:/usr/local/zookeeper/zookeeper-3.4.10/bin/../lib/slf4j-log4j12-1.6.1.jar:/usr/local/zookeeper/zookeeper-3.4.10/bin/../lib/slf4j-api-1.6.1.jar:/usr/local/zookeeper/zookeeper-3.4.10/bin/../lib/netty-3.10.5.Final.jar:/usr/local/zookeeper/zookeeper-3.4.10/bin/../lib/log4j-1.2.16.jar:/usr/local/zookeeper/zookeeper-3.4.10/bin/../lib/jline-0.9.94.jar:/usr/local/zookeeper/zookeeper-3.4.10/bin/../zookeeper-3.4.10.jar:/usr/local/zookeeper/zookeeper-3.4.10/bin/../src/java/lib/*.jar:/usr/local/zookeeper/zookeeper-3.4.10/bin/../conf:2018-02-18 21:30:05,219 [myid:] - INFO [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib2018-02-18 21:30:05,219 [myid:] - INFO [main:Environment@100] - Client environment:java.io.tmpdir=/tmp2018-02-18 21:30:05,219 [myid:] - INFO [main:Environment@100] - Client environment:java.compiler=&lt;NA&gt;2018-02-18 21:30:05,219 [myid:] - INFO [main:Environment@100] - Client environment:os.name=Linux2018-02-18 21:30:05,219 [myid:] - INFO [main:Environment@100] - Client environment:os.arch=amd642018-02-18 21:30:05,219 [myid:] - INFO [main:Environment@100] - Client environment:os.version=3.10.0-514.26.2.el7.x86_642018-02-18 21:30:05,219 [myid:] - INFO [main:Environment@100] - Client environment:user.name=root2018-02-18 21:30:05,220 [myid:] - INFO [main:Environment@100] - Client environment:user.home=/root2018-02-18 21:30:05,220 [myid:] - INFO [main:Environment@100] - Client environment:user.dir=/usr/local/zookeeper/zookeeper-3.4.10/bin2018-02-18 21:30:05,221 [myid:] - INFO [main:ZooKeeper@438] - Initiating client connection, connectString=127.0.0.1:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@277050dcWelcome to ZooKeeper!2018-02-18 21:30:05,243 [myid:] - INFO [main-SendThread(127.0.0.1:2181):ClientCnxn$SendThread@1032] - Opening socket connection to server 127.0.0.1/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error)JLine support is enabled2018-02-18 21:30:05,308 [myid:] - INFO [main-SendThread(127.0.0.1:2181):ClientCnxn$SendThread@876] - Socket connection established to 127.0.0.1/127.0.0.1:2181, initiating session2018-02-18 21:30:05,315 [myid:] - INFO [main-SendThread(127.0.0.1:2181):ClientCnxn$SendThread@1299] - Session establishment complete on server 127.0.0.1/127.0.0.1:2181, sessionid = 0x161a83a11fc0007, negotiated timeout = 30000WATCHER::WatchedEvent state:SyncConnected type:None path:null[zk: 127.0.0.1:2181(CONNECTED) 0] ls /[dubbo, zookeeper][zk: 127.0.0.1:2181(CONNECTED) 1] ls /dubbo[com.smniuhe.service.ItemService][zk: 127.0.0.1:2181(CONNECTED) 2] ls /dubbo/com.smniuhe.service.ItemService/providers[][zk: 127.0.0.1:2181(CONNECTED) 3]现在我通过 tomcat maven 插件 tomcat7:run 发布该服务[zk: 127.0.0.1:2181(CONNECTED) 3] ls /dubbo/com.smniuhe.service.ItemService/providers[dubbo%3A%2F%2F192.168.0.28%3A20880%2Fcom.smniuhe.service.ItemService%3Fanyhost%3Dtrue%26application%3Dtaotao-manager%26dubbo%3D2.8.4%26generic%3Dfalse%26interface%3Dcom.smniuhe.service.ItemService%26methods%3DgetTbItemById%26pid%3D31972%26revision%3D1.0-SNAPSHOT%26side%3Dprovider%26timestamp%3D1518960843164] # 当前发布服务器的时间戳[zk: 127.0.0.1:2181(CONNECTED) 4] ls /dubbo/com.smniuhe.service.ItemService/configurators providers]]></content>
      <categories>
        <category>registration center</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zookeeper 注册中心的简单搭建]]></title>
    <url>%2F2018%2F02%2F18%2Fzookeeper-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[zookeeper 官网官网地址 zookeeper 部署123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778➜ ~ sftp root@106.15.xxx.xxxConnected to 106.15.xxx.xxx.sftp&gt; put /Users/niuhesm/resouces/major/remoteServer/zookeeper-3.4.10.tar.gz /usr/local/zookeeperUploading /Users/niuhesm/resouces/major/remoteServer/zookeeper-3.4.10.tar.gz to /usr/local/zookeeper/zookeeper-3.4.10.tar.gz/Users/niuhesm/resouces/major/remoteServer/zookeeper-3.4.10.tar.gz 100% 33MB 1.2MB/s 00:28sftp&gt;[root@iZuf6iq8e7ya9v3ix71k0pZ zookeeper]# tar zxf zookeeper-3.4.10.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ zookeeper]# ll总用量 34228drwxr-xr-x 10 www www 4096 3月 23 2017 zookeeper-3.4.10-rw-r--r-- 1 root root 35042811 2月 18 13:59 zookeeper-3.4.10.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ zookeeper-3.4.10]# ll总用量 1588drwxr-xr-x 2 www www 4096 3月 23 2017 bin-rw-rw-r-- 1 www www 84725 3月 23 2017 build.xmldrwxr-xr-x 2 www www 4096 3月 23 2017 confdrwxr-xr-x 10 www www 4096 3月 23 2017 contribdrwxr-xr-x 2 www www 4096 3月 23 2017 dist-mavendrwxr-xr-x 6 www www 4096 3月 23 2017 docs-rw-rw-r-- 1 www www 1709 3月 23 2017 ivysettings.xml-rw-rw-r-- 1 www www 5691 3月 23 2017 ivy.xmldrwxr-xr-x 4 www www 4096 3月 23 2017 lib-rw-rw-r-- 1 www www 11938 3月 23 2017 LICENSE.txt-rw-rw-r-- 1 www www 3132 3月 23 2017 NOTICE.txt-rw-rw-r-- 1 www www 1770 3月 23 2017 README_packaging.txt-rw-rw-r-- 1 www www 1585 3月 23 2017 README.txtdrwxr-xr-x 5 www www 4096 3月 23 2017 recipesdrwxr-xr-x 8 www www 4096 3月 23 2017 src-rw-rw-r-- 1 www www 1456729 3月 23 2017 zookeeper-3.4.10.jar-rw-rw-r-- 1 www www 819 3月 23 2017 zookeeper-3.4.10.jar.asc-rw-rw-r-- 1 www www 33 3月 23 2017 zookeeper-3.4.10.jar.md5-rw-rw-r-- 1 www www 41 3月 23 2017 zookeeper-3.4.10.jar.sha1[root@iZuf6iq8e7ya9v3ix71k0pZ zookeeper-3.4.10]# cd bin[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ll总用量 36-rwxr-xr-x 1 www www 232 3月 23 2017 README.txt-rwxr-xr-x 1 www www 1937 3月 23 2017 zkCleanup.sh-rwxr-xr-x 1 www www 1056 3月 23 2017 zkCli.cmd-rwxr-xr-x 1 www www 1534 3月 23 2017 zkCli.sh-rwxr-xr-x 1 www www 1628 3月 23 2017 zkEnv.cmd-rwxr-xr-x 1 www www 2696 3月 23 2017 zkEnv.sh-rwxr-xr-x 1 www www 1089 3月 23 2017 zkServer.cmd-rwxr-xr-x 1 www www 6773 3月 23 2017 zkServer.sh[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# cd ..[root@iZuf6iq8e7ya9v3ix71k0pZ zookeeper-3.4.10]# mkdir data[root@iZuf6iq8e7ya9v3ix71k0pZ zookeeper-3.4.10]### 记录 data 路径[root@iZuf6iq8e7ya9v3ix71k0pZ zookeeper-3.4.10]# cd data[root@iZuf6iq8e7ya9v3ix71k0pZ data]# pwd/usr/local/zookeeper/zookeeper-3.4.10/data[root@iZuf6iq8e7ya9v3ix71k0pZ data]# cd ../conf[root@iZuf6iq8e7ya9v3ix71k0pZ conf]# ll总用量 12-rw-rw-r-- 1 www www 535 3月 23 2017 configuration.xsl-rw-rw-r-- 1 www www 2161 3月 23 2017 log4j.properties-rw-rw-r-- 1 www www 922 3月 23 2017 zoo_sample.cfg[root@iZuf6iq8e7ya9v3ix71k0pZ conf]# mv zoo_sample.cfg zoo.cfg[root@iZuf6iq8e7ya9v3ix71k0pZ conf]# vim zoo.cfgdataDir=/tmp/zookeeper改成dataDir=/usr/local/zookeeper/zookeeper-3.4.10/data## 服务相关命令[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ./zkServer.sh startZooKeeper JMX enabled by defaultUsing config: /usr/local/zookeeper/zookeeper-3.4.10/bin/../conf/zoo.cfgStarting zookeeper ... STARTED[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ./zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: /usr/local/zookeeper/zookeeper-3.4.10/bin/../conf/zoo.cfgMode: standalone[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ./zkServer.sh stopZooKeeper JMX enabled by defaultUsing config: /usr/local/zookeeper/zookeeper-3.4.10/bin/../conf/zoo.cfgStopping zookeeper ... STOPPED[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# dubbo-admin 管理平台的结合123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# 推收文件➜ ~ sftp root@106.15.191.27Connected to 106.15.191.27.sftp&gt; put /Users/niuhesm/resouces/major/remoteServer/apache-tomcat-8.5.28.tar.gz /usr/local/tomcatUploading /Users/niuhesm/resouces/major/remoteServer/apache-tomcat-8.5.28.tar.gz to /usr/local/tomcat/apache-tomcat-8.5.28.tar.gz/Users/niuhesm/resouces/major/remoteServer/apache 100% 9321KB 1.5MB/s 00:06# 解压配置tomcat[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# ll总用量 9324-rw-r--r-- 1 root root 9544774 4月 4 21:21 apache-tomcat-8.5.28.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# tar zxf apache-tomcat-8.5.28.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# ll总用量 9328drwxr-xr-x 9 root root 4096 4月 4 21:22 apache-tomcat-8.5.28-rw-r--r-- 1 root root 9544774 4月 4 21:21 apache-tomcat-8.5.28.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# ll总用量 9328drwxr-xr-x 9 root root 4096 4月 4 21:22 apache-tomcat-8.5.28-rw-r--r-- 1 root root 9544774 4月 4 21:21 apache-tomcat-8.5.28.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# rm -rf apache-tomcat-8.5.28.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# cp -r apache-tomcat-8.5.28/ /usr/local/tomcat/tomcat-8081[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# ll总用量 8drwxr-xr-x 9 root root 4096 4月 4 21:22 apache-tomcat-8.5.28drwxr-xr-x 9 root root 4096 4月 4 21:24 tomcat-8081[root@iZuf6iq8e7ya9v3ix71k0pZ tomcat]# vim tomcat-8081/conf/server.xml...# 接受dubbo-admi管理工程sftp&gt; put /Users/niuhesm/resouces/major/remoteServer/dubbo-admin-2.6.0.war /usr/local/tomcat/tomcat-8081/webappsUploading /Users/niuhesm/resouces/major/remoteServer/dubbo-admin-2.6.0.war to /usr/local/tomcat/tomcat-8081/webapps/dubbo-admin-2.6.0.war/Users/niuhesm/resouces/major/remoteServer/dubbo- 100% 31MB 1.3MB/s 00:24sftp&gt;# 配置[root@iZuf6iq8e7ya9v3ix71k0pZ webapps]# ll总用量 31416drwxr-x--- 14 root root 4096 4月 4 21:24 docsdrwxr-x--- 8 root root 4096 4月 4 21:30 dubbo-admin-2.6.0-rw-r--r-- 1 root root 32089280 4月 4 21:28 dubbo-admin-2.6.0.war-rw-r----- 1 root root 51229 4月 4 21:30 dubbo-governance.logdrwxr-x--- 6 root root 4096 4月 4 21:24 examplesdrwxr-x--- 5 root root 4096 4月 4 21:24 host-managerdrwxr-x--- 5 root root 4096 4月 4 21:24 managerdrwxr-x--- 3 root root 4096 4月 4 21:24 ROOT[root@iZuf6iq8e7ya9v3ix71k0pZ webapps]# mv dubbo-admin-2.6.0.war dubbo-admin.war[root@iZuf6iq8e7ya9v3ix71k0pZ webapps]# /usr/local/tomcat/tomcat-8081/bin/startup.sh[root@iZuf6iq8e7ya9v3ix71k0pZ webapps]# ll总用量 31400drwxr-x--- 14 root root 4096 4月 4 21:24 docsdrwxr-x--- 8 root root 4096 4月 4 21:33 dubbo-admin-rw-r--r-- 1 root root 32089280 4月 4 21:28 dubbo-admin.war-rw-r----- 1 root root 35083 4月 4 21:33 dubbo-governance.logdrwxr-x--- 6 root root 4096 4月 4 21:24 examplesdrwxr-x--- 5 root root 4096 4月 4 21:24 host-managerdrwxr-x--- 5 root root 4096 4月 4 21:24 managerdrwxr-x--- 3 root root 4096 4月 4 21:24 ROOT[root@iZuf6iq8e7ya9v3ix71k0pZ dubbo-admin]# vim WEB-INF/dubbo.propertiesdubbo.registry.address=zookeeper://127.0.0.1:2181dubbo.admin.root.password=rootdubbo.admin.guest.password=guest~~]]></content>
      <categories>
        <category>registration center</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis 简单部署]]></title>
    <url>%2F2018%2F02%2F13%2Fredis-%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[redis 官网官网地址 redis 部署概括12345678910111213141516$ wget http://download.redis.io/releases/redis-4.0.8.tar.gz$ tar xzf redis-4.0.8.tar.gz$ cd redis-4.0.8$ make&lt;!-- more --&gt;## redis-server前端启动$ src/redis-server## redis-cli 启动$ src/redis-cliredis&gt; set foo barOKredis&gt; get foo"bar" redis 实际部署123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181[root@iZuf6iq8e7ya9v3ix71k0pZ redis]# pwd/usr/local/redis## 下载redis解压包[root@iZuf6iq8e7ya9v3ix71k0pZ redis]# wget http://download.redis.io/releases/redis-4.0.8.tar.gz--2018-02-13 14:12:36-- http://download.redis.io/releases/redis-4.0.8.tar.gz正在解析主机 download.redis.io (download.redis.io)... 109.74.203.151正在连接 download.redis.io (download.redis.io)|109.74.203.151|:80... 已连接。已发出 HTTP 请求，正在等待回应... 200 OK长度：1729973 (1.6M) [application/x-gzip]正在保存至: “redis-4.0.8.tar.gz”100%[=================================================================================================================================&gt;] 1,729,973 973KB/s 用时 1.7s2018-02-13 14:12:39 (973 KB/s) - 已保存 “redis-4.0.8.tar.gz” [1729973/1729973])[root@iZuf6iq8e7ya9v3ix71k0pZ redis]# ll总用量 1692-rw-r--r-- 1 root root 1729973 2月 3 00:40 redis-4.0.8.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ redis]# tar xzf redis-4.0.8.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ redis]# ll总用量 1696drwxrwxr-x 6 root root 4096 2月 3 00:39 redis-4.0.8-rw-r--r-- 1 root root 1729973 2月 3 00:40 redis-4.0.8.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ redis]# cd redis-4.0.8## 自动配置[root@iZuf6iq8e7ya9v3ix71k0pZ redis-4.0.8]# makecd src &amp;&amp; make allmake[1]: 进入目录“/usr/local/redis/redis-4.0.8/src”​ CC Makefile.depmake[1]: 离开目录“/usr/local/redis/redis-4.0.8/src”make[1]: 进入目录“/usr/local/redis/redis-4.0.8/src”​ ...​ ...​ ...​ CC redis-benchmark.o​ LINK redis-benchmark​ INSTALL redis-check-rdb​ INSTALL redis-check-aofHint: It's a good idea to run 'make test' ;)make[1]: 离开目录“/usr/local/redis/redis-4.0.8/src”[root@iZuf6iq8e7ya9v3ix71k0pZ redis-4.0.8]# ls00-RELEASENOTES CONTRIBUTING deps Makefile README.md runtest runtest-sentinel src utilsBUGS COPYING INSTALL MANIFESTO redis.conf runtest-cluster sentinel.conf tests[root@iZuf6iq8e7ya9v3ix71k0pZ redis-4.0.8]# ll总用量 296-rw-rw-r-- 1 root root 150927 2月 3 00:39 00-RELEASENOTES-rw-rw-r-- 1 root root 53 2月 3 00:39 BUGS-rw-rw-r-- 1 root root 1815 2月 3 00:39 CONTRIBUTING-rw-rw-r-- 1 root root 1487 2月 3 00:39 COPYINGdrwxrwxr-x 6 root root 4096 2月 13 14:14 deps-rw-rw-r-- 1 root root 11 2月 3 00:39 INSTALL-rw-rw-r-- 1 root root 151 2月 3 00:39 Makefile-rw-rw-r-- 1 root root 4223 2月 3 00:39 MANIFESTO-rw-rw-r-- 1 root root 20543 2月 3 00:39 README.md-rw-rw-r-- 1 root root 58353 2月 3 00:39 redis.conf-rwxrwxr-x 1 root root 271 2月 3 00:39 runtest-rwxrwxr-x 1 root root 280 2月 3 00:39 runtest-cluster-rwxrwxr-x 1 root root 281 2月 3 00:39 runtest-sentinel-rw-rw-r-- 1 root root 7606 2月 3 00:39 sentinel.confdrwxrwxr-x 3 root root 4096 2月 13 14:15 srcdrwxrwxr-x 10 root root 4096 2月 3 00:39 testsdrwxrwxr-x 8 root root 4096 2月 3 00:39 utils## 将启动目录配置到父目录同级下[root@iZuf6iq8e7ya9v3ix71k0pZ redis-4.0.8]# make PREFIX=/usr/local/redis installcd src &amp;&amp; make installmake[1]: 进入目录“/usr/local/redis/redis-4.0.8/src”​ CC Makefile.depmake[1]: 离开目录“/usr/local/redis/redis-4.0.8/src”make[1]: 进入目录“/usr/local/redis/redis-4.0.8/src”Hint: It's a good idea to run 'make test' ;) INSTALL install INSTALL install INSTALL install INSTALL install INSTALL installmake[1]: 离开目录“/usr/local/redis/redis-4.0.8/src”[root@iZuf6iq8e7ya9v3ix71k0pZ redis-4.0.8]# cd ..[root@iZuf6iq8e7ya9v3ix71k0pZ redis]# ll总用量 1700drwxr-xr-x 2 root root 4096 2月 13 14:23 bindrwxrwxr-x 6 root root 4096 2月 3 00:39 redis-4.0.8-rw-r--r-- 1 root root 1729973 2月 3 00:40 redis-4.0.8.tar.gz[root@iZuf6iq8e7ya9v3ix71k0pZ redis]# cd bin[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ll总用量 21836-rwxr-xr-x 1 root root 2450960 2月 13 14:23 redis-benchmark-rwxr-xr-x 1 root root 5762432 2月 13 14:23 redis-check-aof-rwxr-xr-x 1 root root 5762432 2月 13 14:23 redis-check-rdb-rwxr-xr-x 1 root root 2616128 2月 13 14:23 redis-clilrwxrwxrwx 1 root root 12 2月 13 14:23 redis-sentinel -&gt; redis-server-rwxr-xr-x 1 root root 5762432 2月 13 14:23 redis-server## 前端启动（关闭窗口，则服务关闭） [root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ./redis-server 21156:C 13 Feb 14:25:25.281 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo21156:C 13 Feb 14:25:25.281 # Redis version=4.0.8, bits=64, commit=00000000, modified=0, pid=21156, just started21156:C 13 Feb 14:25:25.281 # Warning: no config file specified, using the default config. In order to specify a config file use ./redis-server /path/to/redis.conf​ _._​ _.-``__ ''-._​ _.-`` `. `_. ''-._ Redis 4.0.8 (00000000/0) 64 bit .-`` .-```. ```\/ _.,_ ''-._ ( ' , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|'` _.-'| Port: 6379 | `-._ `._ / _.-' | PID: 21156 `-._ `-._ `-./ _.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | http://redis.io `-._ `-._`-.__.-'_.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | `-._ `-._`-.__.-'_.-' _.-'​ `-._ `-.__.-' _.-'​ `-._ _.-'​ `-.__.-'21156:M 13 Feb 14:25:25.283 # Server initialized21156:M 13 Feb 14:25:25.283 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.21156:M 13 Feb 14:25:25.283 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.21156:M 13 Feb 14:25:25.283 * Ready to accept connections^C21156:signal-handler (1518503420) Received SIGINT scheduling shutdown...21156:M 13 Feb 14:30:20.926 # User requested shutdown...21156:M 13 Feb 14:30:20.926 * Saving the final RDB snapshot before exiting.21156:M 13 Feb 14:30:20.928 * DB saved on disk21156:M 13 Feb 14:30:20.929 # Redis is now ready to exit, bye bye...## 配置后端启动（可以关闭窗口）[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# cp ../redis-4.0.8/redis.confcp: 在"../redis-4.0.8/redis.conf" 后缺少了要操作的目标文件Try 'cp --help' for more information.[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# cp ../redis-4.0.8/redis.conf /usr/local/redis/bin/[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ll总用量 21900-rw-r--r-- 1 root root 92 2月 13 14:30 dump.rdb-rwxr-xr-x 1 root root 2450960 2月 13 14:23 redis-benchmark-rwxr-xr-x 1 root root 5762432 2月 13 14:23 redis-check-aof-rwxr-xr-x 1 root root 5762432 2月 13 14:23 redis-check-rdb-rwxr-xr-x 1 root root 2616128 2月 13 14:23 redis-cli-rw-r--r-- 1 root root 58353 2月 13 14:31 redis.conflrwxrwxrwx 1 root root 12 2月 13 14:23 redis-sentinel -&gt; redis-server-rwxr-xr-x 1 root root 5762432 2月 13 14:23 redis-server[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# chmod 777 redis.conf[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ll总用量 21900-rw-r--r-- 1 root root 92 2月 13 14:30 dump.rdb-rwxr-xr-x 1 root root 2450960 2月 13 14:23 redis-benchmark-rwxr-xr-x 1 root root 5762432 2月 13 14:23 redis-check-aof-rwxr-xr-x 1 root root 5762432 2月 13 14:23 redis-check-rdb-rwxr-xr-x 1 root root 2616128 2月 13 14:23 redis-cli-rwxrwxrwx 1 root root 58353 2月 13 14:31 redis.conflrwxrwxrwx 1 root root 12 2月 13 14:23 redis-sentinel -&gt; redis-server-rwxr-xr-x 1 root root 5762432 2月 13 14:23 redis-server[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# vim redis.conf......# By default Redis does not run as a daemon. Use 'yes' if you need it.# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.daemonize yes......[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ./redis-server redis.conf21167:C 13 Feb 14:34:45.321 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo21167:C 13 Feb 14:34:45.321 # Redis version=4.0.8, bits=64, commit=00000000, modified=0, pid=21167, just started21167:C 13 Feb 14:34:45.321 # Configuration loaded[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ps aux|grep redisroot 21168 0.0 0.1 145252 7556 ? Ssl 14:34 0:00 ./redis-server 127.0.0.1:6379root 21173 0.0 0.0 112664 976 pts/0 S+ 14:35 0:00 grep --color=auto redis## 启动 redis 实例，并简单set,get[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ./redis-cli127.0.0.1:6379&gt; set name niuheOK127.0.0.1:6379&gt; get name"niuhe"127.0.0.1:6379&gt; jedis 客户端操作12345678910111213141516171819202122232425262728293031​ @Test​ public void testJedis() &#123; /** * redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused) at redis.clients.jedis.Connection.connect(Connection.java:207) 解决： vim redis.conf # bind 127.0.0.0.1 redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command 'CONFIG SET protected-mode no' from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to 'no', and then restarting the server. 3) If you started the server manually just for testing, restart it with the '--protected-mode no' option . 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside. 解决： vim redis.conf protected-mode yes 改成 protected-mode no */ Jedis jedis = new Jedis("smniuhe.com", 6379); jedis.set("name", "smniuhe"); System.out.println(jedis.get("name")); jedis.close(); &#125; 两种持久化方案 rdb(默认) 可以设置间隔多长时间保存一次(Redis不用任何配置默认的持久化方案) 有点:让redis的数据存取速度变快 缺点:服务器断电时会丢失部分数据(数据的完整性得不到保 aop 可以设置实时保存 优点:持久化良好,能包装数据的完整性 缺点:大大降低了redis系统的存取速度 设置为 aop 策略修改 redis.conf 配置文件 appendonly yes 主从复制 模拟 redis 集群（从服务器只能读取）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ll总用量 21900-rw-r--r-- 1 root root 197 2月 14 18:19 dump.rdb-rwxr-xr-x 1 root root 2450960 2月 13 14:23 redis-benchmark-rwxr-xr-x 1 root root 5762432 2月 13 14:23 redis-check-aof-rwxr-xr-x 1 root root 5762432 2月 13 14:23 redis-check-rdb-rwxr-xr-x 1 root root 2616128 2月 13 14:23 redis-cli-rwxrwxrwx 1 root root 58356 2月 13 16:04 redis.conflrwxrwxrwx 1 root root 12 2月 13 14:23 redis-sentinel -&gt; redis-server-rwxr-xr-x 1 root root 5762432 2月 13 14:23 redis-server[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# rm -rf dump.rdb[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ../[root@iZuf6iq8e7ya9v3ix71k0pZ redis]# mkdir bin2[root@iZuf6iq8e7ya9v3ix71k0pZ redis]# cp bin/* bin2/[root@iZuf6iq8e7ya9v3ix71k0pZ redis]# cp bin2[root@iZuf6iq8e7ya9v3ix71k0pZ bin2]# vim redis.conf修改 redis-cli 启动的端口号port = 6380# 设置主的端口 ip port# slaveof &lt;masterip&gt; &lt;masterport&gt;slaveof 106.15.191.27 6379[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ./redis-server redis.conf[root@iZuf6iq8e7ya9v3ix71k0pZ bin2]# ./redis-server redis.conf[root@iZuf6iq8e7ya9v3ix71k0pZ bin2]# ./redis-server redis.conf[root@iZuf6iq8e7ya9v3ix71k0pZ bin2]# ps -aux|grep redisroot 21266 0.0 0.2 147300 9768 ? Ssl 2月13 1:10 ./redis-server *:6379root 21847 0.0 0.2 147300 9688 ? Ssl 18:16 0:00 ./redis-server *:6380root 21853 0.0 0.0 112664 976 pts/0 S+ 18:16 0:00 grep --color=auto redis[root@iZuf6iq8e7ya9v3ix71k0pZ bin2]# ./redis-cli127.0.0.1:6379&gt; set name smniuhe79OK127.0.0.1:6379&gt; get name"smniuhe79"127.0.0.1:6379&gt;[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# cd ../bin[root@iZuf6iq8e7ya9v3ix71k0pZ bin]# ./redis-cli shutdown[root@iZuf6iq8e7ya9v3ix71k0pZ bin2]# ./redis-cli -p 6380127.0.0.1:6380&gt; get name"smniuhe79"127.0.0.1:6380&gt;# 指定ip地址和port[root@iZuf6iq8e7ya9v3ix71k0pZ bin2]# ./redis-cli -h ip -p 6380106.15.191.27:6380&gt; get name# 指定校验密码[root@iZuf6iq8e7ya9v3ix71k0pZ bin2]# ./redis-cli -h ip -p port -a authpassword106.15.191.27:6380&gt; get name# 正常关闭实例106.15.191.27:6380&gt; shutdown]]></content>
      <categories>
        <category>NoSQL</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[solr 7.2 + tomcat 的部署]]></title>
    <url>%2F2018%2F02%2F11%2Fsolr-7-2-tomcat-%E7%9A%84%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[官网下载solr7.2.1 目录结构1234567891011121314➜ solr-7.2.1 lltotal 2896-rw-r--r--@ 1 niuhesm staff 737K 1 10 05:32 CHANGES.txt -rw-r--r--@ 1 niuhesm staff 12K 1 10 05:26 LICENSE.txt-rw-r--r--@ 1 niuhesm staff 652K 1 10 05:32 LUCENE_CHANGES.txt-rw-r--r--@ 1 niuhesm staff 24K 1 10 05:26 NOTICE.txt-rw-r--r--@ 1 niuhesm staff 7.3K 1 10 05:26 README.txtdrwxr-xr-x@ 12 niuhesm staff 408B 2 11 22:44 bin # 生成core实例drwxr-xr-x@ 11 niuhesm staff 374B 1 10 08:54 contribdrwxr-xr-x@ 18 niuhesm staff 612B 2 11 12:30 distdrwxr-xr-x@ 4 niuhesm staff 136B 2 11 12:28 docsdrwxr-xr-x@ 9 niuhesm staff 306B 2 11 12:30 exampledrwxr-xr-x@ 535 niuhesm staff 18K 1 10 05:32 licensesdrwxr-xr-x@ 14 niuhesm staff 476B 2 11 22:43 server 环境搭建 第一步将下面的相关依赖包拷贝一份到 solr-7.2.1/server/solr-webapp/WEB-INF/lib 下 solr-7.2.1/server/lib 目录下 metrics-core-3.2.2.jar metrics-ganglia-3.2.2.jar metrics-graphite-3.2.2.jar metrics-jetty9-3.2.2.jar metrics-jvm-3.2.2.jar solr-7.2.1/server/lib/ext 目录下 jcl-over-slf4j-1.7.7.jar jul-to-slf4j-1.7.7.jar log4j-1.2.17.jar slf4j-api-1.7.7.jar slf4j-log4j12-1.7.7.jar 第二步新建一个文件夹命名solr，存放 solr-7.2.1/server/solr-webapp 目录下的文件，并将 solr 放置到 tomcat 的 webapp 下 第三步solr-7.2.1/server/solr，拷贝该目录，重命名为 solrhome，建议不要放到 tomcat 下，打开刚存放到 tomcat 下的 solr 中的 web.xml 配置 solrhome 的关联路径 12345&lt;env-entry&gt; ​ &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt; ​ &lt;env-entry-value&gt;/Users/niuhesm/resouces/major/remoteServer/solrhome&lt;/env-entry-value&gt; ​ &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt; &lt;/env-entry&gt; 第四步运用自带的servlet容器 jetty来启动 solr 实例，生成 mycore 目录，放置到 solrhome 目录下（生成的 mycore 在 solr7.2.1/server/solr/ 下） 1234567891011121314➜ src cd solr-7.2.1/bin➜ bin ./solr startWaiting up to 180 seconds to see Solr running on port 8983 [\]Started Solr server on port 8983 (pid=20516). Happy searching!➜ bin ./solr create -c mycoreWARNING: Using _default configset. Data driven schema functionality is enabled by default, which is​ NOT RECOMMENDED for production use. To turn it off: curl http://localhost:8983/solr/mycore/config -d '&#123;"set-user-property": &#123;"update.autoCreateFields":"false"&#125;&#125;'Created new core 'mycore'➜ bin 第五步启动 tomcat，通过 http://localhost:8082/solr/index.html#/，进入 solr 管理页面]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>solr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从未注意的分隔符问题]]></title>
    <url>%2F2018%2F02%2F09%2F%E4%BB%8E%E6%9C%AA%E6%B3%A8%E6%84%8F%E7%9A%84%E5%88%86%E9%9A%94%E7%AC%A6%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Git Commit Failed1234上午10:32 Commit failed with error​ 0 files committed, 4 files failed to commit: 1.更新分词器配置文件​ warning: CRLF will be replaced by LF in src/main/resources/IKAnalyzer.cfg.xml.​ The file will have its original line endings in your working directory. 大概是意思是说 xml 文件有它原始的行编码格式 CRLF，CRLF 并将替换成 LF 的行编码格式，可能是转换的时候出错啦，导致整个 Commit failed 背景在各操作系统下，文本文件所使用的换行符是不一样的。UNIX/Linux 使用的是 0x0A（LF），早期的 Mac OS 使用的是0x0D（CR），后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 0x0D0A（CRLF）作为换行符。Git提供了一个“换行符自动转换”功能。这个功能默认处于“自动模式”，当你在签出文件时，它试图将 UNIX 换行符（LF）替换为 Windows 的换行符（CRLF）；当你在提交文件时，它又试图将 CRLF 替换为 LF。Git 的“换行符自动转换”功能听起来似乎很智能、很贴心，因为它试图一方面保持仓库内文件的一致性（UNIX 风格），一方面又保证本地文件的兼容性（Windows 风格）。但遗憾的是，这个功能是有 bug 的，而且在短期内都不太可能会修正。 Intellij IDEA 行分隔符设置 由于默认是 System-Dependent 设置，你并不知道你系统真正用的是什么的分隔符，Class Mac(\r) 和 Unix and OS X(\n)有什么区别呢，现在最新的 Mac 系统叫 Mac OS，所以应该是 OS X 也就是上面对应的 LF 格式 有两种方式查看文件对应的分隔符格式 Java File XML File 解决方法由于提交 xml 是网上下载的，他们都是 windows 系统下的分隔符，所以直接修改 Commit failed 对应的 xml 文件即可]]></content>
      <categories>
        <category>charset</category>
      </categories>
      <tags>
        <tag>Line Separators</tag>
        <tag>细节</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 中 Java 版本管理的好帮手 jEnv]]></title>
    <url>%2F2018%2F02%2F02%2FjEnv%2F</url>
    <content type="text"><![CDATA[困恼在开发的时候每个人配置 Java 环境都不一样， 或者开发者都有多个版本的 jdk，比如：123456789101112# 当前版本➜ ~ java -versionjava version "1.8.0_121"Java(TM) SE Runtime Environment (build 1.8.0_121-b13)Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)# 所有的版本➜ ~ ll /Library/Java/JavaVirtualMachinestotal 0drwxr-xr-x 3 root wheel 102B 6 3 2017 jdk1.7.0_80.jdkdrwxr-xr-x 3 root wheel 102B 4 12 2017 jdk1.8.0_121.jdk➜ ~ jEnv 介绍Java 生态中包含大量的你可能想使用的工具，包括 Java 本身到一些构建工具，如 Maven 和 Gradle，以及第三方应用如 ActiveMQ 和 Tomcat 等。经常你会需要同时使用这些工具的不同版本，用于不同的项目，或者想对一个项目在不同版本的环境中做兼容性测试。 管理这些不同版本的工具是一项非常复杂的任务。每个工具有各自不同的获取方式，如果安装，如何控制都是很成问题的。 值得庆幸的是，jenv 可以帮你轻松搞定这个复杂的工作（请注意该工具不同于 jEnv, 这是用来设置 JAVA_HOME 环境变量的）。jenv 支持 Windows、Mac 和 Linux – 可以轻松管理大量基于 Java 开发的工具的多个版本。目前已经支持超过 200 个不同的工具。 jenv 介绍官网 jEnv 安装12345678910111213141516➜ ~ brew install jenv# bash$ echo 'export PATH="$HOME/.jenv/bin:$PATH"' &gt;&gt; ~/.bash_profile$ echo 'eval "$(jenv init -)"' &gt;&gt; ~/.bash_profile# zsh$ echo 'export PATH="$HOME/.jenv/bin:$PATH"' &gt;&gt; ~/.zshrc$ echo 'eval "$(jenv init -)"' &gt;&gt; ~/.zshrc# 查看版本➜ ~ jenv versions* system (set by /Users/niuhesm/.jenv/version)➜ ~ bashbash-3.2$ jenv versions* system (set by /Users/niuhesm/.jenv/version)bash-3.2$ zsh➜ ~ open ~/.bash_profile 它只找到了系统默认的Java，即使我已经下载了其他版本的Java。*表示当前选择的版本。 添加 Java 版本1234567891011121314151617181920212223242526272829303132333435363738394041424344➜ ~ jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/oracle64-1.7.0.80 added1.7.0.80 added1.7 added➜ ~ jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/oracle64-1.8.0.121 added1.8.0.121 added1.8 added# 重新查看版本➜ ~ jenv versions* system (set by /Users/niuhesm/.jenv/version) 1.7 1.7.0.80 1.8 1.8.0.121 oracle64-1.7.0.80 oracle64-1.8.0.121 # 只保留一个版本➜ ~ ....➜ ~ jenv remove oracle64-1.7.0.80JDK oracle64-1.7.0.80 removed➜ ~ jenv remove oracle64-1.8.0.121JDK oracle64-1.8.0.121 removed➜ ~ jenv versions* system (set by /Users/niuhesm/.jenv/version) 1.7.0.80 1.8.0.121➜ ~# 指定版本➜ ~ java -versionjava version "1.7.0_80"Java(TM) SE Runtime Environment (build 1.7.0_80-b15)Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)➜ ~ jenv local 1.8.0.121 # 指定当前的运行版本➜ ~ java -versionjava version "1.8.0_121"Java(TM) SE Runtime Environment (build 1.8.0_121-b13)Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)➜ ~ jenv which java # 显示可执行的Java的完整路径/Users/niuhesm/.jenv/versions/1.8.0.121/bin/java➜ ~ 这当然不是真实的路径，而是一个硬链接。你可以找到 /Users/kmyhy/.jenv/versions/ 目录，发现所有的 java 版本都被列在了这里，这些硬链接（相当于 windows 的快捷方式）都指向了对应的 java 安装目录。你还可以指定一个全局的版本1➜ ~ jenv global 1.7.0_80这样，默认的 java 版本就是 1.7.0_80 了。如果你想在某个项目中使用 1.7.0_80 版本，可以在项目文件夹下新建一个.java-version 文件，将文件内容编辑为 1.7.0_80 保存。这样，你进入这个文件夹时 jenv 会自动使用 1.7.0_80 作为当前版本（即 local 版本）。]]></content>
      <categories>
        <category>VC</category>
      </categories>
      <tags>
        <tag>版本控制</tag>
        <tag>jEnv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 上搭建 gitlab]]></title>
    <url>%2F2018%2F02%2F01%2Fcentos7-2%E6%90%AD%E5%BB%BAgitlab%2F</url>
    <content type="text"><![CDATA[GitLab 介绍最近DevOps非常火, 而GitLab作为其中重要一环, 也越来越受重视, 与SVN相比, GitLab同样提供完美的用户权限管理, 与Git相比, 除了涵盖Git所有功能, 同时又提供方便的后台管理, 非常适合企业使用 殷临风简书 GitLab 安装1234567891011# 1. 安装相关依赖yum install curl policycoreutils openssh-server openssh-clients -y# 确保sshd启动(正常情况下, sshd是启动的)systemctl enable sshdsystemctl start sshd# 2. 引入yum源, 并安装gitlabcurl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bashyum install gitlab-ce -y# 配置并启动gitlab-ctl reconfigure 修改 Nginx 相关配置由于我用的是阿里云的 ESC，所以默认情况下防火墙的没有关闭的，且 GitLab 内置的 Nginx 默认端口是80，为了不占用这个特殊的端口，我们使用82端口，unicorn 端口也由8080改成8082，即nginx监听的rails端口，类似php-fpm，同样改成8082 配置 Nginx 的默认端口123456vim /etc/gitlab/gitlab.rb# nginx['listen_port'] = nil 默认值即80nginx['listen_port'] = 82 vim /var/opt/gitlab/nginx/conf/gitlab-http.conf# 默认值listen *:80;listen *:82; 修改 unicorn 的默认端口和 Nginx 监听的 rails 端口 12345678910vim /etc/gitlab/gitlab.rb# 原值unicorn['port'] = 8080unicorn['port'] = 8082vim /var/opt/gitlab/gitlab-rails/etc/unicorn.rb#原值listen "127.0.0.1:8080", :tcp_nopush =&gt; truelisten "127.0.0.1:8082", :tcp_nopush =&gt; true# 重新加载配置、启动gitlab-ctl reconfiguregitlab-ctl restart 重新加载配置、启动 12gitlab-ctl reconfiguregitlab-ctl restart 测试由于我的服务器地址配置了域名解析，浏览器上输入 domain:82/ip地址:82，第一次会出现让你注册的界面，直接注册就行，下次输入地址会直接登录 注意事项 GitLab 上需要配置本地的秘钥公约 新建仓库生成的url 都改成你服务器的 domain:82/ip地址:82，否则会访问失败 git,yum 相关的安装和命令都可以参看 runoob.com 网站]]></content>
      <categories>
        <category>VC</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[5.7之sql_model]]></title>
    <url>%2F2018%2F01%2F29%2F5-7%E4%B9%8Bsql-model%2F</url>
    <content type="text"><![CDATA[问题发生背景今天在部署项目的时候发现，测试后台接口，直接报 500，仔细一看原来是操作数据库的时候报错了，在本地测试的时候是没遇到类似的问题，数据库的版本是一样的，后面查找资料，说是 MySQL 5.7 默认的 sql_model 配置是有 only_full_group_by， 12345678910111213141516171819# 分组查询报错[Err] 1055 - Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'leping.township_info.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by# 查看当前MySQL sql_mode 配置mysql&gt; select version();+-----------+| version() |+-----------+| 5.7.18 |+-----------+1 row in set (0.00 sec)mysql&gt; select @@sql_mode;+--------------------------------------------+| @@sql_mode |+--------------------------------------------+| STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION |+--------------------------------------------+1 row in set (0.00 sec) only_full_group_by ：使用这个就是使用和oracle一样的group 规则, select的列都要在group中,或者本身是聚合列(SUM,AVG,MAX,MIN) 才行 解决的办法就是将这个 sql_model 的 only_full_group_by 参数去除1sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' window server 服务器，直接找到 my.ini 配置文件，如果配置中没有对应的配置，先添加 sql_model ，有则直接移除 only_full_group_by mac vim /etc/my.cof centos 7 vim /etc/my.cof]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[geotools解析Shapefile文件]]></title>
    <url>%2F2018%2F01%2F05%2Fgeotools%E8%A7%A3%E6%9E%90Shapefile%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[交代背景前段工程师给了我 gis 相关的一些文件，想让我解析里面的数据，简单点就是解析 Shapefile 文件，由于地理信息相关的数据都是 GeoJson 的数据格式；也是第一次接触 gis，所以先简单的了解了下这些专用的名词。 Shapefile一个Shapefile文件最少包括三个文件：主文件（.shp）、–存储地理要素的几何图形的文件。索引文件（.shx）、–存储图形要素与属性信息索引的文件。dBASE表文件（.dbf），–存储要素信息属性的dBase表文件。除此之外还有可选的文件包括：空间参考文件（.prj）、几何体的空间索引文件（.sbn 和 .sbx）、只读的Shapefiles的几何体的空间索引文件（.fbn 和.fbx）、列表中活动字段的属性索引（.ain 和 .aih）、可读写Shapefile文件的地理编码索引（.ixs）、可读写Shapefile文件的地理编码索引（.mxs）、dbf文件的属性索引（.atx）、以XML格式保存元数据（.shp.xml）、用于描述.dbf文件的代码页，指明其使用的字符编码的描述文件（.cpg）。 Shapefile百度百科地址 GeotoolsGeoTools 是英国利兹大学(University of Leeds)的James Macgll 从1996 年开始研发的一个操作和显示地图的开源Java 代码库，[1] 提供了一系列符合规范的操作地理空间数据的方法，例如可以用它来实现一个地理信息系统（GIS）。GeoTools库在开发时执行OGC规范。目前GeoTools的最新版本是 GeoTools 17 Releases。 GeoTools官网地址 Geojson要素组合的数据格式如下： 简书brandonxiang 123456789101112131415161718192021222324252627282930313233&#123; "type": "FeatureCollection",​ "features": [​ &#123; "type": "Feature",​ "geometry": &#123;"type": "Point", "coordinates": [102.0, 0.5]&#125;,​ "properties": &#123;"prop0": "value0"&#125;​ &#125;,​ &#123; "type": "Feature",​ "geometry": &#123;​ "type": "LineString",​ "coordinates": [​ [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]​ ]​ &#125;,​ "properties": &#123;​ "prop0": "value0",​ "prop1": 0.0​ &#125;​ &#125;,​ &#123; "type": "Feature",​ "geometry": &#123;​ "type": "Polygon",​ "coordinates": [​ [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],​ [100.0, 1.0], [100.0, 0.0] ]​ ]​ &#125;,​ "properties": &#123;​ "prop0": "value0",​ "prop1": &#123;"this": "that"&#125;​ &#125;​ &#125;​ ]&#125; 核心代码github-demo 传送门]]></content>
      <categories>
        <category>GEO</category>
      </categories>
      <tags>
        <tag>geotools</tag>
        <tag>gis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dozer设计通用的自定义转换器]]></title>
    <url>%2F2017%2F12%2F29%2Fdozer%E8%AE%BE%E8%AE%A1%E9%80%9A%E7%94%A8%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E6%8D%A2%E5%99%A8%2F</url>
    <content type="text"><![CDATA[场景做国土项目的时候遇到了个类似头疼的问题，就是展现数据由于要计算统计土地的面积，精度要求，所以 pojo 中用的 BigDecimal 类型，但是在展示的时候类似于表格的形式，没有数据默认就是不填，想来想去还是第三种样式比较方便，前端也好处理123456789101112131415&#123;​ "applyLandArea": 14.6121,​ "xxxLandArea": null,​ "xxxLandArea": null&#125;&#123;​ "applyLandArea": 14.6121,​ "xxxLandArea": 0,​ "xxxLandArea": 0&#125;&#123;​ "applyLandArea": 14.6121,​ "xxxLandArea": “”,​ "xxxLandArea": “”&#125;dozer 也是最近接触的，以前老是自己手动转换，当属性的数量多起来，伴随着大量的 set 方法，dozer 解决了这部分问题，当你转换的属性比较多并且类型不等的时候，这个时候就需要自己定义转换器 1234567891011121314//类级别&lt;mappings&gt; &lt;mapping relationship-type="non-cumulative"&gt;​ &lt;!-- 省略 --&gt; &lt;/mapping&gt; &lt;/mappings&gt; //属性级别&lt;field relationship-type="cumulative"&gt; &lt;a&gt;hintList&lt;/a&gt; &lt;b&gt;hintList&lt;/b&gt; &lt;a-hint&gt;org.dozer.vo.TheFirstSubClass&lt;/a-hint&gt; &lt;b-hint&gt;org.dozer.vo.TheFirstSubClassPrime&lt;/b-hint&gt; &lt;/field&gt; 核心代码自定义转换器必须实现 CustomConverter 接口重写 convert 方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class LandActualConverter implements CustomConverter &#123; @Override public Object convert(Object destination, Object source, Class&lt;?&gt; destinationClass, Class&lt;?&gt; sourceClass) &#123; // 如果满足条件，进行转换 final String emptyStr = ""; boolean havevalue = source instanceof LandActual &amp;&amp; Objects.equals(destinationClass, LandActualVm.class); if (havevalue) &#123; destination = new LandActualVm(); Field[] fields = source.getClass().getDeclaredFields(); for (Field field : fields) &#123; Class&lt;?&gt; type = field.getType(); String fieldName = field.getName(); Object value = BeanConverter.invokeGet(source, fieldName); String baseValue = value + emptyStr; // 如果为不为null,全部正常处理 if (value != null) &#123; if (Objects.equals(type, Short.class)) &#123; BeanConverter.invokeSet(destination, fieldName, new Short(baseValue)); &#125; if (Objects.equals(type, String.class)) &#123; BeanConverter.invokeSet(destination, fieldName, baseValue); &#125; if (Objects.equals(type, Date.class)) &#123; BeanConverter.invokeSet(destination, fieldName, DateUtils.parse(baseValue)); &#125; if (Objects.equals(type, BigDecimal.class)) &#123; BeanConverter.invokeSet(destination, fieldName, baseValue); &#125; // 如果为null,将空值转变成"" &#125; else &#123; if (Objects.equals(type, Short.class)) &#123; &#125; if (Objects.equals(type, String.class)) &#123; &#125; if (Objects.equals(type, Date.class)) &#123; &#125; if (Objects.equals(type, BigDecimal.class)) &#123; BeanConverter.invokeSet(destination, fieldName, emptyStr); &#125; &#125; &#125; return destination; &#125; else &#123; return new LandActualVm(); &#125; &#125; 反射实现通用性12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485public class BeanConverter &#123; /** * java反射bean的get方法 * * @param objectClass * @param fieldName * @return */ @SuppressWarnings("unchecked") public static Method getGetMethod(Class objectClass, String fieldName) &#123; StringBuffer sb = new StringBuffer(); sb.append("get"); sb.append(fieldName.substring(0, 1).toUpperCase()); sb.append(fieldName.substring(1)); try &#123; return objectClass.getMethod(sb.toString()); &#125; catch (Exception e) &#123; &#125; return null; &#125; /** * java反射bean的set方法 * * @param objectClass * @param fieldName * @return */ @SuppressWarnings("unchecked") public static Method getSetMethod(Class objectClass, String fieldName) &#123; try &#123; Class[] parameterTypes = new Class[1]; Field field = objectClass.getDeclaredField(fieldName); parameterTypes[0] = field.getType(); StringBuffer sb = new StringBuffer(); sb.append("set"); sb.append(fieldName.substring(0, 1).toUpperCase()); sb.append(fieldName.substring(1)); Method method = objectClass.getMethod(sb.toString(), parameterTypes); return method; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125; /** * 执行set方法 * * @param o * 执行对象 * @param fieldName * 属性 * @param value * 值 */ public static void invokeSet(Object o, String fieldName, Object value) &#123; Method method = getSetMethod(o.getClass(), fieldName); try &#123; method.invoke(o, new Object[] &#123; value &#125;); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /** * 执行get方法 * * @param o * 执行对象 * @param fieldName * 属性 */ public static Object invokeGet(Object o, String fieldName) &#123; Method method = getGetMethod(o.getClass(), fieldName); try &#123; return method.invoke(o, new Object[0]); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125;&#125;]]></content>
      <categories>
        <category>JavaBean</category>
      </categories>
      <tags>
        <tag>dozer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[4楼图书馆的爱情延时]]></title>
    <url>%2F2017%2F10%2F19%2F4%E6%A5%BC%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%9A%84%E7%88%B1%E6%83%85%E5%BB%B6%E6%97%B6%2F</url>
    <content type="text"><![CDATA[王逸，我的图书馆好友故事的两位主人公刚好都认识，都是图书馆工作的好友，王逸这名字总让我想得到现在的外交部长，也成了我们之间刚认识加深关系的基带，作为图书馆管理图书的，当然我们经常一起读书了，刚开始我看文学作品，他喜欢看地理，后来我读 c、Java，他读防雷工程；有时候一起吃鸡，必须变态辣，我感觉自己吃辣很厉害了，他比我还厉害，毕竟都是江西人，说实话，他身上有种人格，是我比较喜欢的，随性不受任何约束，相反，我是一个比较有危机感的一个人，看到他会比较安心。今早看到他发的 “思念”，文字太暖，是我很向往的一种爱情，所以打算分享给自己的好友；回想最后一次见面是去年的10月份，返校采集信息，当时在大礼堂拿表，他叫了我，我看了半天，没找到人，发现他原来在身穿一身白的制服（应该是海军制服吧，一直让我很困惑的是，这家伙的专业是防雷，为啥老是打着海军的旗号，..姑娘..，后面省略好多字）的队列中，由于但是大家都在排队，于是简单寒暄了几句，就离开了，下面是他和他 “爱人” 的故事（保留原文不变，略改格式）。 “有空的话进来听听我的故事吧”时间是让人措不及防的东西一晃自己都参加工作十个月了晴时有风阴时有雨争不过朝夕又念着往昔偷走了青丝却留住了一个你12月28踏上火车的那一刻从此对故乡的记忆定格在那个冬天他们有家人送行我有你转身上车瞬间哭成个泪人带着整个车厢的人都跟着哭起来你问我何时归故里故里又是何年哭的更凶了脚踩在北国的土地上顿时就如入冰箱一样给我一南方的汉子下马威，眼前的一切都是新生和未知的从最简单的吃饭睡觉学起不知接下来是什么样的生活也不知自己选的路对不对更不知什么时候才能向你道声早道声晚安自己在你那仿佛人间蒸发一样一点消息都没了就好像我从来就没出现在你的世界一般留下的最后一条短信下个季节见 下个季节见半个月后终于办了张公共电话卡拨通了早已在心中拨了无数遍的号码电话那头没有惊喜没有惊讶一句平平淡淡的恩我知道你是开心的只是不善言辞的你此时更加语塞了什么都想说又不知道说什么好从此电话吧总是少不了我和啊涛的影子一入话吧深似海从此队长是大傻我们约好中午见晚上见哪怕熄灯前一分钟我都会跑下楼去和你道声晚安因为电话那头那个她在等我尼中间也因打电话出过篓子没少挨练不过听到你的声音后一切都是值得的后面要上山拉练又的失联一礼拜了五天四夜晚上零下十几度泼水成冰只所以提前下山还是因为大雪封山也是在北方见的初雪按耐住迫切告诉你的心情蓝色大海的传说里初雪的约定裹着大衣拆帐篷抬帐篷下山车已经上不来了五秒就五秒地上就有积雪了上山下山不知道多少躺最后也不知道自己这么上的大巴又冷又饿又困的睡过去头一次晕车下车后忙去电话吧告诉你我下山了接着恢复以前的生活训练训练训练跑圈跑圈跑圈午休时偷摸进话吧晚点名后混进话吧拿着一月880的津贴打着三毛钱一分钟的长途这是我在青岛做过最奢侈的事了想你说的整个话吧就靠我养活的一样到了月末把吃蛋炒饭的钱换成泡面就想多和你通一会电话可气的死电话卡还被人盗过心疼了我一阵子三个月说长不长说短不短反正我熬过来了之所以说这么多我是因为这三个月对我来说太不寻常了是自己最迷茫最无助又最无可奈何的三月谢谢你 谢谢你陪我伴我左右做了三个月的电话情人煲了三个月的电话粥当了三个月的树洞打着哈欠陪我聊天到深夜的你心里回荡着一句话不能辜负的girl其实有时候真的怕耽误了你自己貌似什么都给不了你除了承诺可这年代承诺是最廉价的吧而你却将我的话深信不疑在后面默默的付出着茫茫红尘中经历万千风浪庆幸得以遇见你想驻扎进我生命的那道绝世风光绝世风光不想你去羡慕任何一个人只想尽自己最大的努力让你成为朋友中最让人羡慕的人 今后拌嘴可以但不能当真生气可以但不能生闷气出门在外要交待约法四章依然有效最后谢谢你的勇敢与坚强谢谢你能来看我如果可以以后让我来哪怕等的时间长点也好熬过异地就结婚吧最后的最后祝我家傻梦永远十八那年十八美如画]]></content>
      <categories>
        <category>生活杂谈</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[付费产品思考]]></title>
    <url>%2F2017%2F08%2F15%2F%E4%BB%98%E8%B4%B9%E4%BA%A7%E5%93%81%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[再想想，婆媳关系]]></title>
    <url>%2F2017%2F08%2F14%2F%E5%A9%86%E5%AA%B3%E5%85%B3%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[拜访同学今年的 7 月份去朋友家（外号：kindle）做客，南方城市普遍偏热，大晚上开空调成了再正常不过的事情了，同学 kindle 家正好有两个小孩，一男一女，在我们家乡，这就是传种接代好的象征。 小孩吃药两个小孩，男孩 2 岁不到，女孩 2 个月，刚进家门的时候，正好发现小男孩有点没精神，发现婆婆从房间拎着个茶水杯和几瓶棕色瓶装的不明液体出来，这一来一回大概是知道了，小孩子不舒服；由于小孩哭闹，不爱吃药，即使 kindle 的婆婆一再强调这药的甜的，宝宝要乖，不吃咳嗽好不啦，但还是压不住小孩子 “手脚并用” 、 “誓死力争，还我青岛” 的决心，这下就到了 kindle 的出场了，kindler 抓住小孩的手脚，让婆婆像古代给犯人实施灌水胀肚的刑法一样，同样的实施到孩子的身上，那个场面小孩子的反应和电视上的胀肚犯人没个二样，男孩咬住牙齿，誓死不从；kindle 可能是第一次见这种场面吧，开始慌了，这是自己的亲侄子呀！才不到两岁，为何自己要如此下死手的严刑逼供，一直僵持不下，kindle 开始受不了了，抓小孩手脚的力度也开始慢慢放缓，婆婆的手一直拿着勺子使劲的突破小孩关闭的牙齿高墙，最后以药洒落一地失败告终。 婆婆生气，小孩爸爸妈妈归来婆婆这下生气的恨，药也不喂了，直接脱掉小孩被药打湿的衣服，上去就是两个巴掌，打在了男孩的后脖子上，口里念叨着，这么没用呀！药甜的都不喝，这么没用呀！一直绷着牙齿，鼓着力气，被你气伤了心。这时正好小孩的爸爸妈妈正好回来，看到这个场面，婆婆直接说了小孩不听话，药撒一地，死都不吃；孩子他妈说：“不吃就不吃呀！小孩怎么冷到了，你看看晚上上空调开着这么低的温度，能不病吗？” 婆婆表示无奈，母亲开始摸着孩子的头，问男孩晚上是否跟妈妈睡，可见小孩一直是跟着婆婆睡的，一直也是婆婆带的；惊讶的是，小孩直接摇头，表示今晚还是跟着婆婆睡，2 岁不到的小孩，回答的如此果敢，让旁边无奈的婆婆很是欣慰，但是婆婆同样果敢的回答：“今晚你跟你妈妈去睡！” 同样让旁边的母亲很是受挫和尴尬，自己的小孩被婆婆打了，还是想都没想的跟着她睡。 尴尬的我在想 虽是单狗，但是带过一段时间小孩的我知道，带小孩太不容易了，还是两个这么小的孩子，吃喝拉傻，睡眠健康，样样都要照应着；孩子生病冷到是难免的，越是这样的事情发生，个人感觉母亲越应该站在婆婆的角度是思考下，是不是婆婆照顾孩子辛苦，过度操劳，导致没照顾好孩子，而不是由于没照顾好孩子，自己的母爱泛滥，而给婆婆不好的态度。再想想，母亲指责孩子不能带来任何的利益，不是你骂的狗血姘头，孩子就能安然无恙的； 况且婆婆不是菲佣，也是孩子的亲人，自己丈夫的母亲，是否应该多问候寒暄下，感谢她的不饶辛苦。 男孩是聪明的，如果我是男孩也会不假思索的直接拒绝母亲，明天的 “监护人” 还是婆婆，为何要去惹一个每天都照顾我的人呢？并且那时的婆婆是那样的尴尬！]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hi SublimeText3]]></title>
    <url>%2F2017%2F08%2F03%2FHi-SublimeText3%2F</url>
    <content type="text"><![CDATA[插件的安装 package control emmet 快捷键 快捷键 说明 Command + D 选择当前光标所在的一个词 （继续按会继续选取下一个同样的词） Ctrl + M 前往匹配的括号 Command + T 查询/前往文件 Command + R 查询/前往funcdtion或method Command + K + B 隐藏/显示边栏 Command + 左键 设置多个光标操作 Command + f 查找 Command + / 注释/非注释 Command + L 选择当前光标整行 Command + K + U 转换为大写 Command + K + L 转换为小写 cmmand + shirt + V 粘贴并缩进 cmmand + shirt + f 查找并替换 cmmand + shrit + d 复制当前行 cmmand + control + 上下方向键 向上下移动 Ctrl + Shift + K 删除当前行 emmet语法快速编写HTML代码 激活键（默认）：tab 快捷键 说明 效果 html:xt XHTML过渡文档类型 html:5/! HTML5文档类型 html:4s HTML4严格文档类型 p.bar#foo 轻松添加类、id、文本和属性 &lt;p class=&quot;bar&quot; id=&quot;foo&quot;&gt;&lt;/p&gt; h1{foo}和a[href=#] 定义HTML元素的内容和属性 &lt;h1&gt;foo&lt;/h1&gt; &lt;a href=&quot;#&quot;&gt;&lt;/a&gt; h1{foo}和a[href=#] 定义HTML元素的内容和属性 &lt;h1&gt;foo&lt;/h1&gt; &lt;a href=&quot;#&quot;&gt;&lt;/a&gt; div&gt;a 子元素符号，表示嵌套的元素 &lt;div&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/div&gt; div+a 同级标签符号 &lt;div&gt;&lt;/div&gt; &lt;a href=&quot;&quot;&gt;&lt;/a&gt; ^ 可以使该符号前的标签提升一行 暂时看不出啥区别 (.foo&gt;h1)+(.bar&gt;h2) 嵌套和括号来快速生成一些代码块 &lt;div class=&quot;foo&quot;&gt;&lt;h1&gt;&lt;/h1&gt;&lt;/div&gt; &lt;div class=&quot;bar&quot;&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/div&gt; .item 隐式标签li：用于ul和ol中 &lt;ul&gt;&lt;li calss=&quot;item&quot;&gt;&lt;/li&gt;&lt;/url&gt; .item 隐式标签tr：用于table、tbody、thead和tfoot中 &lt;table&gt;&lt;tr calss=&quot;item&quot;&gt;&lt;/tr&gt;&lt;/table&gt; .item 隐式标签td：用于tr中 &lt;tr&gt;&lt;td calss=&quot;item&quot;&gt;&lt;/td&gt;&lt;/tr&gt; .item 隐式标签option：用于select和optgroup中 &lt;select&gt;&lt;option calss=&quot;item&quot;&gt;&lt;/option&gt;&lt;/select&gt; ul&gt;li*3 定义多个元素 &lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt; ul&gt;li.item$*3 定义多个带属性的元素 &lt;ul&gt;&lt;li class=&quot;item&quot;&gt;&lt;/li&gt;&lt;li class=&quot;item&quot;&gt;&lt;/li&gt;&lt;li class=&quot;item&quot;&gt;&lt;/li&gt;&lt;/ul&gt; CSS缩写 快捷键 说明 效果 h10p+m5e 单位别名列表[^f1] height: 10%; margin: 5em; @f 附加属性 @font-face { font-family:; src:url(); } ov:h, ov-h, ovh和oh 模糊匹配 overflow: hidden; } Emmet：HTML/CSS代码快速编写神器 [^f1]: 单位别名列表： p 表示% , e 表示 em , x 表示 ex . Sublime-HTMLPrettify 插件 快捷键 说明 Command + Shift + H 格式化]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>SublimeText3</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 上搭建 Redis 爬坑之路上：CentOS 的安装]]></title>
    <url>%2F2017%2F08%2F01%2FCentOS%20%E4%B8%8A%E6%90%AD%E5%BB%BA%20Redis%20%E7%88%AC%E5%9D%91%E4%B9%8B%E8%B7%AF%E4%B8%8A%EF%BC%9ACentOS%20%E7%9A%84%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[MacOS 系统本来不想多赘述，考虑到，看博文的有可能有相同情况的人，可以做个参考； 电脑配置：MBP 15年 128G 安装虚拟机的软件：VMware Fusion(免费版8.5.8)、Parallels Desktop 注定：早使用 Mac，很多软件都是付费的，不建议大家用破解版，版权意识 VMware funion、Centos.ios 准备 我用的是 VMware Fusion 免费版，brew 下载安装很方便，我安装在 SSD 上；CentOS7.iso 则安装在移动硬盘3.0上，有人担心其速度，测试过，没问题。这样无论是以后的项目部署，还是系统文件的增加，都不用担心。 centos7 镜像文件 的下载地址是 CentOS7-64, 迅雷下载的速度是最快的，文件4G，大概 20 分钟，小问题【点击迅雷下载，会一直提示没有检测到你的迅雷软件，让你下载，下载完成后，还是如此，解决办法：右键迅雷下载，复制链接地址，打开迅雷，会直接粘贴到URL下载】 打开 VMware fusion，会直接显示【选择安装方法界面】（没有的话 command + N 新建）&gt; 创建自定义虚拟机 &gt; 选择操作系统（linux CentOS 64位） &gt; 新建虚拟磁盘（我在移动硬盘上创建了 名为虚拟机的文件夹）设置虚拟机 CD/DVD 驱动，选择下载好的镜像文件 &gt; 后面会出现一下安装界面… 安装流程 网上很多。 操作界面的分辨率很低 一般有两种方法，是通过 VMware tools 来解决，第二种是配置文件，果断选择前者， 后面发现没有 tools 一直安装不了，虚拟机和 mac 的切换也变的难受起来，命令也不能复制粘贴，转而成了 tools 必须要安装的事情了。 VMware tools 的安装 命令行模式安装VMware Tools 安装过程中遇到的问题 1 The path “” is not a valid path to the 3.10.0-229.4.2.el7.x86_64 kernel headers. 2 解决vmware fusion + centos 7安装vmtools时提示The path “” is not a valid path to the xxx kernel headers. 3 -bash: wget: command not found 安装成功后，/usr/bin/vmware-user，启动用户进程（无效） vmware-user: could not open /proc/fs/vmblock/dev 安装Gnome GUI 图形界面 （靠谱） yum groupinstall -y “GNOME Desktop” init 5 (从命令行切换到图形界面) ifconfig ：cammand not faund 1$ yum install net-tools 查看 CentOS7 SSH的端口号 1$ vim /etc/ssh/sshd_config // #port = 22 注释打开 iterm2 SSH 连接服务器 ssh-key 免密登录服务器 网上的安装教程零零散散，坑太多，下面的是完整的安装教程，试了，完全的踏过了所有的坑；不过爬坑的过程中，也慢慢了解了点；IQC:8944845，一起探讨 CentOS64 完整安装教程]]></content>
      <categories>
        <category>environment</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建博客初衷]]></title>
    <url>%2F2017%2F07%2F27%2F%E6%88%91%E4%B8%BA%E4%BD%95%E6%83%B3%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[首先我要承认我是一个爱说话的人，无论是高中的三剑客，还是大学的133，随着高中、大学的逐个毕业，我们见面的机会并不是很多，有的半年一次，有的一年一次，可能是时代变了，或者说是移动互联网在中国的快速发展的几年，让很多人都习惯了朋友之间不用面对面的日子，可喜的是，“三剑客” 和 “133” 这两个 tag 的人，无论是多久没见，只有一见面，脸上总是漏出那种上下铺习惯的眼神，或者可耻的 “奸笑”，不用去猜是谁，懂的人就懂，gay 风说的是你，一个可以对着天空撸的男人。 一开始是打算纯做技术博客，后面发现，无论是自己的资历还是水平都不足以完成。当然啦，这肯定不是最重要的原因，一直觉得写技术，没必要在自己的博客上写，因为有太多的技术博客的平台啦，无论是 掘金、简书，还是老牌的 博客园、CSDN， 还有我最近比较喜欢的 segmentfault，这些都能写技术文，而且我也建议大家在这上面写，为什么呢，因为程序员的我们都经常浏览这些网站，它们的风格也习惯了，倘如每片技术文章都以检索列表的形式陈列在 Google、百度上，那才是件尴尬的事情，你想想看，每个人的风格，样式繁多，眼花缭乱，或者说有的人就是 gay 里 gay 气，你为了解决技术上面的问题，要忍受这些，指不定哪天眼睛真瞎了，而且也没意义，不像平台是有人管理和维护的。 信息爆炸的时代，“碎片时间” 词汇的出现，朋友圈，公众号，小密圈都是大家平台可以接触各种学习东西的路径或者渠道，当然了我也是，但是我发现一个问题，公众号太多了，多的我只吸收，不思考，我技术文章的收藏太多太多了，百分之八十的文章，是没看过第二遍的；公司也有工作，这也正常，周末睡懒觉，再或者说，天天搞技术，会性冷淡等等.. ； 归根到底，我就是想说：大家不必老看着别人怎么活，做什么事，怎么奋斗，自己也可以忍受种种寂寞，去干一件事情，任何一件自己想干的事情，这种的日子才有意思。比如我，看到一件事，我就在想呀想呀，终于想明白了，后来发现无人交谈，或者无人愿意听你交谈，比起聊天，还不是面对面的聊天，大家更愿意去 断手app, 咸鱼直播等，王者农药，打发时间；当然这也正常，我也常干。 信息爆炸的时代，学会如何阅读，如何表达自己的思想（写博客），对于一个爱思考的人来说，就显得非常重要了。 老妈是业余媒婆，居然最近老暗示我，有合适的人就谈，没车没房的屌丝，假如有相亲的一天，想过能不能让她先看看我的博客，觉得性格是否合适，哈哈。]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路过红灯区的我..]]></title>
    <url>%2F2017%2F07%2F26%2Flastgo%2F</url>
    <content type="text"><![CDATA[大家好，我是舒嘉峰，一个 gay 里 gay 气的人，为什么这么说呢，我想@他本人，让他自己回答]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android O]]></title>
    <url>%2F2017%2F07%2F01%2FAndroid%20O%2F</url>
    <content type="text"><![CDATA[交代背景1Android O API 已发布最终版本，这是谷歌开发者6月14日发布的的标题，O（Oreo）可以理解为代号，再通俗点就是 Android 系统 8.0，对于空间内多数好友是不太关注这个的，但是你们日常吐槽 Android 手机各种功能和设计都是与他们相关的。 交代背景2Android 6.0 出现最大特点就是运行时权限，什么是运行时权限呢？就是当你想要体验某个 APP ，以前是在安装的时候直接指定一些（读取联系人、获取摄像头、拨打电话‘这可能会产生费用’）权限，这些权限是必需的，潜台词是：不同意不行，要不别用我家产品，讲道理绝大数的用户是能接受的（是的，你没有听说，我们能接受，但是对于 ”自我保护意识强烈的人“ 或者 ”绝大数老外“ 来说：amazing，它太流氓，为什么不问我，就偷偷发短信，偷偷定位我的位置，偷偷修改我的手机设置），在几年前的中国也是正常的，当然和中国自古以来的信任也是有关联的，在中国，绝大多数人的行为准则都是事后处理的态度，就是等这件事发生后，才来想如何去解决，如何去比较，比如：“谁谁谁，怎么样”，“别人家的孩子”，太常见了。 idea写这篇文章的原因是，今早看到谷歌发了篇文章叫 “WebView 的新增安全功能“ 的文章，哥，别按 back 键，容我说完，咱们一起来思考；和上面的运行时权限一样，6.0 的运行时权限时为了增强用户的安全性，或者说是用户的主导权，因为用户是上帝；8.0 这次最大的特点就是这个 WebView 的安全功能，怎么个安全功能呢，【原话太长，简单来说就是和 Chrome 类似，WebView单独提供一个独立线程来管理，就是常说的渲染效果，通俗点就是显示手机画面】，本来是不打算写这篇文章的，看到与 Chrome 类似，我就忍不了啦，大家都说:人生苦短 我用Chrome，Chrome 是快，市场份额也达到第一了，但是你不觉得不论是企业、网吧、家庭、普通笔记本使用者，个人感觉是没有提升，就我个人观察的而言，在中国的这个拥有14亿人口的前提下。为什么呢，他太吃性能了，他管的太多了，所以他太 ”安全“ 了，如果你是 Chrome 使用者你习惯随便乱点，或者链接到自己熟悉的网站上，他总是提示你没有xxx认证，可能存在风险。有人的熟悉，这是 Chrome Google 的“一贯作风”，有人不熟悉，不知所措，只能点点其他地方或者网站了。回归主题，下个 Android 系统版本就是在你查看新闻资讯等其他操作，他家公司就是用的新版的 WebView ，开玩笑，它可是提供两级隔离，和 Chrome一样，好家伙，当出现满屏以红色为背景的不安全信息来阻止你访问，或者提示你的时候，你再来想想是否有我一样的烦恼，心想：md，真的烦，和一些权限一样，老是弹出一些“这个东西”，很多人是不关心的。 老铁，扎心了说了这么多，可能没说明白，简单来说就是不要为来安全性来剥夺用户的体验和感受，感受和安全一样重要，上次去银行办卡，居然问家住哪里，是干什么的，ATM 转账不能立刻到账等… 写的有点乱，就那意思，在保证安全的前提下，好的用户体验会让你内心波动：扎心了，老铁。 懒得检查了….]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
